


define void Prompt() {
	Print("(>")
	KeyboardBackspaceBound := 2
}

i8*{0x20} CommandParameters

define void OnCommand(i8* CommandLine) {
	i32 ParameterStart := 0
	i32 ParameterCount := 0
	
	for (i32 Index := 0, CommandLine[Index] != 0, Index += 1) {
		i8 NextCharacter := CommandLine[Index]
		
		if (NextCharacter = ' ') {
			CommandParameters[ParameterCount] := CommandLine + ParameterStart
			ParameterCount += 1

			CommandLine[Index] := 0
			
			while (CommandLine[Index + 1] = ' ') {
				Index += 1
			}
			
			ParameterStart := Index + 1
		}
	}
	
	CommandParameters[ParameterCount] := CommandLine + ParameterStart
	
	i8* Command := CommandParameters[0]
	i8** Parameters := CommandParameters + 8
	
	if (StringEquals(Command, "uptime")) {
		i64 MS := GetUptimeMS()
		i64 Seconds := MS / 1000
		i64 Minutes := Seconds / 60
		Seconds := Seconds % 60
		i64 Hours := Minutes / 60
		Minutes := Minutes % 60
		
		Print(" Uptime [ %ih %im %is | %ims ]\n Ticks [ %i ]\n", Hours, Minutes, Seconds, GetUptimeMS(), GetTickCount())
	}
	else if (StringEquals(Command, "reset_time")) {
		asm {cli}
		
		PITWhole := 0
		PITFraction := 0
		TickCount := 0
		
		asm {sti}
	}
	else if (StringEquals(Command, "clear_screen")) {
		NativeScreen->Clear()
	}
	else if (StringEquals(Command, "windows")) {
		NativeScreen->PrintHierarchy(0)
	}
	else if (StringEquals(Command, "peek")) {
		i64 TargetAddress := AToI(Parameters[0], 10)
		i64 AddressValue := *(TargetAddress As i64*)
		
		if (ParameterCount = 2 && StringLength(Parameters[1]) = 1) {
			i8 Size := Parameters[1][0]
			
			if (IsNumeric(Size, 8)) {
				if (Size = '1') {
					AddressValue := AddressValue & 0xFF
				}
				else if (Size = '2') {
					AddressValue := AddressValue & 0xFFFF
				}
				else if (Size = '4') {
					AddressValue := AddressValue & 0xFFFFFFFF
				}
				else if (Size = '8') {
					AddressValue := AddressValue
				}
				else {
					Print(" Unknown size '%c', must be 1/2/4/8\n", Size)
					return
				}
				
				Print(" *(%x As i%i*) = %x\n", TargetAddress, (Size - '0') * 8, AddressValue)
				
				Prompt()
				return
			}
		}
		
		Print(" *(%x) = %x\n", TargetAddress, AddressValue)
	}
	else {
		Print(" Unknown command '%s'\n", Command)
	}
	
	Prompt()
}
