

define void ATAWait() {
	loop {
		i8 Status := InB(0x1F7)
		
		if (Status & 0x88 = 0x8) || (Status & 0x21 = 0x21) {
			return 0
		}
	}
}

define void ATAReadWrite(i8 Slave, i32 LBA, i32 Sectors, i8 Command) {
	OutB(0x1F6, (((0xE + Slave) << 4) | ((LBA >> 24) & 0xFF)) As i8)
	OutB(0x1F2, Sectors As i8)
	OutB(0x1F3, LBA As i8)
	OutB(0x1F4, (LBA >> 8) As i8)
	OutB(0x1F5, (LBA >> 16) As i8)
	OutB(0x1F7, Command)
}

define void ATARead(i8 FromSlave, i32 LBA, i32 SectorsToRead, i16* IntoBuffer) {
	ATAReadWrite(FromSlave, LBA, SectorsToRead, 0x20)
	
	for (i32 SectorIndex := 0, SectorIndex < SectorsToRead, SectorIndex += 1) {
		ATAWait()
		
		for (i32 WordIndex := 0, WordIndex < 256, WordIndex += 1) {
			IntoBuffer[WordIndex] := InW(0x1F0)
		}
		
		IntoBuffer += 512
	}
}
define void ATAWrite(i8 ToSlave, i32 LBA, i32 SectorsToWrite, void* FromBuffer) {
	ATAReadWrite(ToSlave, LBA, SectorsToWrite, 0x30)
	
	i16* WordBuffer := FromBuffer As i16*
	
	for (i32 SectorIndex := 0, SectorIndex < SectorsToWrite, SectorIndex += 1) {
		ATAWait()
		
		for (i32 WordIndex := 0, WordIndex < 256, WordIndex += 1) {
			OutW(0x1F0, WordBuffer[WordIndex])
		}
		
		WordBuffer += 512
	}
}

i8{512} ATAWriteBuffer

define void ATATest() {
	ATARead(false, 0, 126, 0x24000 As void*)
	
	void* CheckData := 0
	i32 CheckSize := 0
	
	i8 Result := FindFile(0x24200 As UStarHeader*, "FSCheck.txt", &CheckData, &CheckSize)
	
	if (Result = 0) {
		FSInfo("ATA read FAILED")
	}
	
	if (StartsWith(CheckData As i8*, "File system check PASSED")) {
		FSInfo("ATA read PASSED")
	}
}
