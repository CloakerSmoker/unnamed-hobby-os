
#Require "./src/Screen.rlx"

struct Terminal {
	Screen* Screen
	
	i32 X
	i32 Y
	
	i32 ForegroundColor
	i32 BackgroundColor
	
	define void Initialize(Screen* Screen) {
		this->Screen := Screen
		this->ForegroundColor := 0x00_00_00
		this->BackgroundColor := 0xFF_FF_FF
		
		this->X := 0
		this->Y := 0
	}
	
	define void SetColors(i32 ForegroundColor, i32 BackgroundColor) {
		this->ForegroundColor := ForegroundColor
		this->BackgroundColor := BackgroundColor
	}
	
	define void ConvertToScreenCoords(i32 XIn, i32 YIn, i32* XOut, i32* YOut) {
		XOut[0] := XIn * 8
		YOut[0] := YIn * 12
	}
	
	define void NewLine() {
		this->X := 0
		this->Y += 1
	}
	
	define void DrawCursor(i8 Enable) {
		i32 ScreenX := 0
		i32 ScreenY := 0
		
		this->ConvertToScreenCoords(this->X, this->Y, &ScreenX, &ScreenY)
		
		i32 Color := this->BackgroundColor
		
		if (Enable) {
			Color := this->ForegroundColor
		}
		
		this->Screen->DrawRectangle(ScreenX, ScreenY + 10, 8, 2, Color)
	}
	define void ShowCursor() {
		this->DrawCursor(true)
	}
	define void HideCursor() {
		this->DrawCursor(false)
	}
	
	define void RawPrint(i8* Text, i32 TextLength) {
		i32 ScreenX := 0
		i32 ScreenY := 0
		
		this->ConvertToScreenCoords(this->X, this->Y, &ScreenX, &ScreenY)
		
		i32 PixelsLeft := SCREEN_WIDTH - ScreenX
		i32 CharactersLeft := PixelsLeft / FONT_WIDTH
		
		while (TextLength > CharactersLeft) {
			this->Screen->DrawText(ScreenX, ScreenY, Text, CharactersLeft, this->ForegroundColor, this->BackgroundColor)
			
			Text += CharactersLeft
			TextLength -= CharactersLeft
			
			this->NewLine()
			
			this->ConvertToScreenCoords(this->X, this->Y, &ScreenX, &ScreenY)
			
			PixelsLeft := SCREEN_WIDTH - ScreenX
			CharactersLeft := PixelsLeft / FONT_WIDTH
		}
		
		if (TextLength) {
			this->Screen->DrawText(ScreenX, ScreenY, Text, TextLength, this->ForegroundColor, this->BackgroundColor)
		}
		
		i32 NewX := this->X + TextLength
		
		this->Y += NewX / SCREEN_WIDTH
		this->X := NewX % SCREEN_WIDTH
	}
	
	define void Print(i8* Text, i32 TextLength) {
		this->HideCursor()
		
		i32 LastLineStart := 0
		
		for (i32 Index := 0, Index < TextLength, Index += 1) {
			if (Text[Index] = 0x0A) {
				this->RawPrint(Text + LastLineStart, Index - LastLineStart)
				
				LastLineStart := Index + 1
				this->NewLine()
			}
		}
		
		if (LastLineStart != TextLength) {
			this->RawPrint(Text + LastLineStart, TextLength - LastLineStart)
		}
	}
	define void Print(i8* Text) {
		this->Print(Text, StringLength(Text))
	}
	define void PrintLine(i8* Text) {
		this->Print(Text)
		this->NewLine()
	}
}

Terminal RawTerminal
Terminal* Terminal

define void PrintNewLine() {
	Terminal->NewLine()
}
define void PrintCharacters(i8* Characters, i32 Count) {
	for (i32 Index := 0, Index < Count, Index += 1) {
		BochsPrintCharacter(Characters[Index])
	}
	
	Terminal->Print(Characters, Count)
}

define void PrintLiteral(i64 PackedCharacters) {
	i8* Characters := (&PackedCharacters) As i8*
	
	for (i32 Length := 0, (Length < 8) && (Characters[Length] != 0), Length += 1) {}
	
	PrintCharacters(Characters, Length)
}
define void PrintCharacter(i8 Character) {
	PrintCharacters(&Character, 1)
}


i8{96} PrintBuffer

define void PrintString(i8* AString) {
	PrintCharacters(AString, StringLength(AString))
}

define void ClearPrintBuffer() {
	for (i32 Index := 0, Index < 12, Index += 1) {
		(PrintBuffer As i64*)[Index] := 0
	}
}
define void Print(i64 Number) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 10, PrintBuffer))
}
define void PrintHex(i64 Number, i8 WithZeroX) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 16, PrintBuffer, WithZeroX))
}
define void PrintHex(i64 Number) {
	PrintHex(Number, true)
}
define void PrintBinary(i64 Number) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 2, PrintBuffer))
}

define void Print(i8* Format, ... Args) {
	i32 Length := StringLength(Format)
	i32 ArgIndex := 1
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 Next := Format[Index]
		
		if (Next = '%') {
			Index += 1
			Next := Format[Index]
			void NextArg := Args[ArgIndex]
			
			if (Next = 'i') {
				Print(NextArg As i64)
			}
			else if (Next = 'x') {
				PrintHex(NextArg As i64)
			}
			else if (Next = 'c') {
				PrintCharacter(NextArg As i8)
			}
			else if (Next = 's') {
				PrintString(NextArg As i8*)
			}
			else if (Next = 'l') {
				PrintLiteral(NextArg As i64)
			}
			else if (Next = 'b') {
				PrintBinary(NextArg As i64)
			}
			
			ArgIndex += 1
		}
		else {
			PrintCharacter(Next)
		}
	}
}