i8 DEBUG_EXT2_OPTIMIZATION := false

#Require "./src/utility/EFIApplication.rlx"
#Require "@/Console.rlx"
#Require "$/Memory.rlx"

#Require "./src/utility/GUID.rlx"

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/EFIBlockDevice.rlx"

define void SchedulerYield() {
	for (i32 Index := 0, Index < 0x10_0000, Index++) {}
}

#Require "./src/kernel/file-system/FileSystem.rlx"

#Require "./src/drivers/file-system/FAT32.rlx"
#Require "./src/drivers/file-system/Ext2.rlx"
#Require "./src/drivers/GPT.rlx"

#Require "./src/utility/ELF.rlx"
#Require "./src/utility/PrintHelpers.rlx"
#Require "./src/utility/CommandLine.rlx"

#Require "./src/bootloader/BootInfo.rlx"

define void* EFILoadELF(EFI_SYSTEM_TABLE* SystemTable, ELFHeader* Header, i64* OutMaxAddress) {
	void* Data := Header
	
	ELFProgramHeader* ProgramHeaders := Header->GetProgramHeaders()

	i64 CodeVirtual := 0
	i64 CodePhysical := 0
	i64 MaxAddress := 0
	
	for (i32 Index := 0, Index < Header->ProgramHeaderEntryCount, Index++) {
		ELFProgramHeader* Next := ProgramHeaders[Index]
		
		if (Next->Type = ELF_SEGMENT_TYPE_LOAD) {
			void* SectionData := Data + Next->FileOffset
			void* SectionMemory := null + Next->PhysicalAddress
			
			i32 SectionPageCount := (Next->MemorySize / 0x1000) As i32
			
			if (Next->MemorySize % 0x1000) {
				SectionPageCount += 1
			}

			i64 End := (SectionMemory As i64) + (SectionPageCount * 0x1000)

			if (End > MaxAddress) {
				MaxAddress := End
			}

			Print("Load... %i -> %x\n", Index, SectionMemory)

			if (SectionMemory = null) {
				Print("(skip)\n")
				continue
			}

			if (Next->Flags & ELF_SEGMENT_FLAGS_EXECUTE) {
				CodeVirtual := Next->VirtualAddress
				CodePhysical := Next->PhysicalAddress
			}
			
			SystemTable->BootServices->AllocatePages(EFI_MEMORY_ALLOCATE_ADDRESS, SectionPageCount, &SectionMemory)

			SetMemory(SectionMemory, 0, Next->MemorySize)
			MoveMemory(SectionMemory, SectionData, Next->FileSize As i32)
		}
	}

	*OutMaxAddress := MaxAddress
	
	return null + CodePhysical + (Header->EntryPoint - CodeVirtual)
}

#Require "./src/drivers/ACPI.rlx"

#Require "./src/utility/ProgressBar.rlx"

define i32 SizeToPageCount(i64 Size) {
	i32 Result := (Size / 0x1000) As i32

	if (Size % 0x1000) {
		Result += 1
	}

	return Result
}

define i8 LoadFile(FileHandle* RootDirectory, i8* FileName, void** OutFileData, i32* OutFileSize) {
	FileHandle* Handle := RootDirectory->Open(FileName)

	if (Handle = null) {
		Print("Could not find '%s'\n", FileName)
		return true
	}

	FileStatus Status
	Handle->Status(&Status)

	i32 Size := Status.Size As i32
	i32 PageCount := SizeToPageCount(Size)

	Print("%s is %i bytes (%x pages)\n", FileName, Size, PageCount)

	void* File := SYSTEM_TABLE->BootServices->AllocatePages(PageCount)
	
	Print("Reading %s...\n", FileName)
	
	Handle->Read(File, Size)
	
	Print("Done, %s read to %x\n", FileName, File)
	
	Handle->Close()

	*OutFileData := File
	*OutFileSize := Size

	return false
}

define i64 EFIMain(EFI_HANDLE* ImageHandle, EFI_SYSTEM_TABLE* SystemTable) {
    i64 Status := 0

	Print("Switching mode\n")
	
	EFI_GRAPHICS_OUTPUT_PROTOCOL* Graphics := null
	SystemTable->BootServices->LocateProtocol(EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID, &Graphics As void**)
	
	Print("Device has %i modes\n", Graphics->Mode->MaxMode)
	
	for (i32 Index := 0, Index < Graphics->Mode->MaxMode, Index++) {
		EFI_GRAPHICS_OUTPUT_MODE_INFORMATION* Mode := Graphics->QueryMode(Index)
		
		Print("\t%ix%i %x\n", Mode->HorizontalResolution, Mode->VerticalResolution, Mode->PixelFormat)
		
		if (Mode->HorizontalResolution = 1024 && Mode->VerticalResolution = 768) {
			if (Graphics->Mode->CurrentMode != Index) {
				;WaitKey()
				Graphics->SetMode(Index)
			}
			
			break
		}
	}
	
	SystemTable->ConsoleOutput->Reset()
	
	Print("Hello new EFI world!\n")
	
	;SystemTable->ConsoleInput->Reset()
	;SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)
	
	EFI_DEVICE_PATH_TO_TEXT_PROTOCOL* ToText := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID, &ToText As void**)
	
	EFI_DEVICE_PATH_UTILITIES_PROTOCOL* DevicePathHelpers := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID, &DevicePathHelpers As void**)
	
	if !(ToText) || !(DevicePathHelpers) {
		Print("Can't find to text or device path helper protocol\n")
		return 0
	}
	
	ACPI_RSDP* RSDP := null
	
	for (i32 Index := 0, Index < SystemTable->NumberOfTableEntries, Index++) {
		EFI_CONFIGURATION_TABLE* NextTable := SystemTable->ConfigurationTable[Index]
		
		;Print("%guid: %x ", NextTable~>VendorGUID, NextTable->VendorTable)
		
		if (NextTable~>VendorGUID->Equals(ACPI_RSDP_GUID)) {
			;Print("RSDP")
			RSDP := NextTable->VendorTable
		}
		
		;Print("\n")
	}
	
	if !(RSDP) {
		Print("Couldn't find RSDP, bailing out\n")
		return 0
	}
	
	;Print("\n\n")
	
	;Print("RSDP Signature: %l\n", RSDP->Signature)
	
	i32[16] IRQMappings
	
	for (i32 Index := 0, Index < 16, Index++) {
		IRQMappings[Index] := Index
	}
	
	i64 IOAPICBase := 0
	i64 HPETBase := 0

	i32 SegmentGroupCount := 0
	ACPI_MCFG_ENTRY* SegmentGroups := null
	
	ACPI_TABLE* XSDT := RSDP->XSDTPhysicalAddress As void*
	
	for (i32 Index := 0, Index < XSDT~>Header->EntryCount(), Index++) {
		ACPI_TABLE* NextACPITable := XSDT->EntryPhysicalAddresses[Index] As void*
		
		i32 Signature := NextACPITable~>Header->Signature
		
		Print("Table %i: %l\n", Index, Signature)
		
		if (Signature = ACPI_TABLE_SIGNATURE_MULTIPLE_APIC_DESCRIPTION) {
			;Print("APIC {\n")
			
			ACPI_APIC_TABLE* APIC := NextACPITable->Data()
			
			;Print("\tLength: %x\n", NextACPITable~>Header->Length)
			;Print("\tLocalAPICPhysicalAddress: %x\n", APIC->LocalAPICPhysicalAddress)
			;Print("\tFlags: %x\n", APIC->Flags)
			
			i32 EntryIndex := 0
			ACPI_APIC_TABLE_ENTRY* Current := APIC->First()
			
			while (Current) {
				;Print("\t%i: %x\n", EntryIndex++, Current->Type)
				
				if (Current->Type = ACPI_APIC_ENTRY_TYPE_LOCAL_APIC) {
					ACPI_LOCAL_APIC* Local := Current->Data()
					
					;Print("\t\tLocal APIC {\n")
					;Print("\t\t\tProcessor ID: %x\n", Local->ProcessorID)
					;Print("\t\t\tID: %x\n", Local->ID)
					;Print("\t\t\tFlags: %x\n", Local->Flags)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_IO_APIC) {
					ACPI_IO_APIC* IO := Current->Data()
					
					IOAPICBase := IO->PhysicalAddress & 0xFFFF_FFFF
					
					Print("\t\tIO APIC {\n")
					Print("\t\t\tID: %x\n", IO->ID)
					Print("\t\t\tPhysicalAddress: %x\n", IO->PhysicalAddress)
					Print("\t\t\tBase: %x\n", IO->GlobalInterruptBase)
					Print("\t\t}\n")

					;WaitKey()
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_INTERRUPT_OVERRIDE_SOURCE) {
					ACPI_INTERRUPT_OVERRIDE* Override := Current->Data()
					
					IRQMappings[Override->Source] := Override->GlobalInterruptNumber
					
					;Print("\t\tInterrupt Override {\n")
					;Print("\t\t\tBus: %x\n", Override->Bus)
					;Print("\t\t\tSource: %x\n", Override->Source)
					;Print("\t\t\tGlobalInterruptNumber: %x\n", Override->GlobalInterruptNumber)
					;Print("\t\t\tFlags: %x\n", Override->Flags)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_INTERRUPT_OVERRIDE_SOURCE) {
					ACPI_NMI_SOURCE* NMI := Current->Data()
					
					;Print("\t\tNMI Source {\n")
					;Print("\t\t\tFlags: %x\n", NMI->Flags)
					;Print("\t\t\tGlobalInterruptNumber: %x\n", NMI->GlobalInterruptNumber)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_LOCAL_APIC_NMI) {
					ACPI_LOCAL_APIC_NMI* LocalNMI := Current->Data()
					
					;Print("\t\tLocal APIC NMI {\n")
					;Print("\t\t\tProcessor ID: %x\n", LocalNMI->ProcessorID)
					;Print("\t\t\tFlags: %x\n", LocalNMI->Flags)
					;Print("\t\t\tLocalInterruptNumber: %x\n", LocalNMI->LocalInterruptNumber)
					;Print("\t\t}\n")
				}
				
				Current := APIC->Next(Current)
			}
			
			;Print("}\n")
		}
		else if (Signature = ACPI_TABLE_SIGNATURE_FIXED_ACPI_DESCRIPTION) {
			ACPI_FADT* FADT := NextACPITable->Data()
			ACPI_DSDT* DSDT := FADT->ExtendedDSDT As void*

			/*
			i32 Length := DSDT~>Header->Length

			asm {cli}

			Print("DSDT: ")

			for (i32 Index := 0, Index < Length, Index++) {
				Print("%B|", (DSDT As i8*)[Index])
			}

			Print("\n")

			loop {}
			
			*/
		}
		else if (Signature = ACPI_TABLE_SIGNATURE_PCIE_CONFIG_DESCRIPTION) {
			ACPI_MCFG* MCFG := NextACPITable->Data()
			i32 MCFGCount := MCFG->Count()

			SegmentGroups := MCFG->At(0)
			SegmentGroupCount := MCFGCount

			Print("MCFG Entry count: %i\n", MCFGCount)

			for (i32 MCFGIndex := 0, MCFGIndex < MCFGCount, MCFGIndex++) {
				ACPI_MCFG_ENTRY* Entry := MCFG->At(MCFGIndex)

				Print("\t%i @ %x: %i.%i - %i.%i\n", MCFGIndex, Entry->BaseAddress, Entry->SegmentGroup, Entry->StartBusNumber, Entry->SegmentGroup, Entry->EndBusNumber)
			}
		}
		else if (Signature = ACPI_TABLE_SIGNATURE_HPET_DESCRIPTION) {
			ACPI_HPET_TABLE* HPET := NextACPITable->Data()

			Print("HPET {\n")
			Print("    EventTimerBlockID: %x\n", HPET->EventTimerBlockID)
			Print("    Address: %s: %x\n", nameof:(HPET~>Address->Type), HPET~>Address->Address)
			Print("    HPETNumber: %i\n", HPET->HPETNumber)
			Print("    MinimumPeriod: %i\n", HPET->MinimumPeriod)
			Print("}\n")

			HPETBase := HPET~>Address->Address

			;WaitKey()
		}
	}
	
	;SystemTable->ConsoleInput->Reset()
	;SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)

	;return 0

	;SystemTable->ConsoleInput->Reset()
	;SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)
	
	if !(IOAPICBase) {
		Print("Couldn't find IO-APIC, bailing out\n")
		return 0
	}
	
	Print("IOAPIC: %x\n", IOAPICBase)
	
	Print("IRQ Mappings: ")
	
	for (i32 Index := 0, Index < 16, Index++) {
		if (IRQMappings[Index] != Index) {
			Print("%x - %x  ", Index, IRQMappings[Index])
		}
	}

	;WaitKey()
	
	EFI_LOADED_IMAGE_PROTOCOL* LoadedImage := null
	SystemTable->BootServices->HandleProtocol(ImageHandle, EFI_LOADED_IMAGE_PROTOCOL_GUID, &LoadedImage As void**)
	
	EFI_DEVICE_PATH_PROTOCOL* LoadedImageDevicePath := null
	SystemTable->BootServices->HandleProtocol(LoadedImage->DeviceHandle, EFI_DEVICE_PATH_PROTOCOL_GUID, &LoadedImageDevicePath As void**)
	
	i16* LoadedImageDevicePathText := ToText->ConvertDevicePathToText(LoadedImageDevicePath, true, true)
	
	Print("Boot Device Path: %w\n", LoadedImageDevicePathText)
	
	SystemTable->BootServices->FreePool(LoadedImageDevicePathText)
	
	EFI_DEVICE_PATH_PROTOCOL* RootDevicePath := DevicePathHelpers->DuplicateDevicePath(LoadedImageDevicePath)
	RootDevicePath->PopNode()
	
	
	i16* RootDevicePathText := ToText->ConvertDevicePathToText(RootDevicePath, true, true)
	
	Print("Boot Device Parent Path: %w\n", RootDevicePathText)
	
	SystemTable->BootServices->FreePool(RootDevicePathText)

	; Load kernel command line

	EFI_SIMPLE_FILE_SYSTEM_PROTOCOL* SimpleFS := null
	SystemTable->BootServices->HandleProtocol(LoadedImage->DeviceHandle, EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID, &SimpleFS As void**)

	Print("SimpleFS: %x\n", SimpleFS)

	EFI_FILE_PROTOCOL* SimpleFSRoot := SimpleFS->OpenVolume()

	Print("SimpleFSRoot: %x\n", SimpleFSRoot)

	EFI_FILE_PROTOCOL* CommandLine := SimpleFSRoot->Open("EFI\\BOOT\\KCMDLN.TXT"w, EFI_FILE_MODE_READ, EFI_FILE_ATTRIBUTE_READ_ONLY)
	;EFI_FILE_PROTOCOL* CommandLine := SimpleFSRoot->Open("EFI\\BOOT\\BOOTX64.EFI"w, EFI_FILE_MODE_READ, EFI_FILE_ATTRIBUTE_READ_ONLY)

	Print("CommandLine: %x\n", CommandLine)

	void* CommandLineBuffer := SystemTable->BootServices->AllocatePages(2)
	FastZeroMemory(CommandLineBuffer, 0x2000)
	i32 CommandLineLength := CommandLine->Read(CommandLineBuffer, 0x2000)

	Print("CommandLineBuffer: %s\n", CommandLineBuffer)

	; Parse kernel command line

	i64 ArgC := 0
	i8*[10] ArgV

	ParseCommandLine(CloneMemory(CommandLineBuffer, CommandLineLength), &ArgC, ArgV)

	i8[16] RootPartitionGUID
	i8[16] EFISystemPartitionGUID
	
	for (i32 Index := 0, Index < ArgC, Index++) {
		i8* Argument := ArgV[Index]

		if (StringEquals(Argument, "--efi-system-guid")) {
			;EFISystemPartitionGUID := ArgV[++Index]
			ParseGUID(ArgV[++Index], EFISystemPartitionGUID)
		}
		else if (StringEquals(Argument, "--root-guid")) {
			;RootPartitionGUID := ArgV[++Index]
			ParseGUID(ArgV[++Index], RootPartitionGUID)
		}
	}

	Print("EFI System GUID: %guid\n", EFISystemPartitionGUID)
	Print("Root Partition GUID: %guid\n", RootPartitionGUID)

	;WaitKey()

	; Find partitions listed on command line
	
	i32 SizeNeeded := 0
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	i32 Count := SizeNeeded / 8
	
	EFI_HANDLE* SystemPartition := null
	EFI_HANDLE* OSPartition := null

	void* GPTHeaderBuffer := SystemTable->BootServices->AllocatePages(2)
	
	for (i32 Index := 0, Index < Count, Index++) {
		EFI_HANDLE* Next := Handles[Index]

		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
		SystemTable->BootServices->HandleProtocol(Next, EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)

		i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
		Print("Block IO %i: %w\n", Index, DeviceText)
		SystemTable->BootServices->FreePool(DeviceText)

		EFI_DEVICE_PATH_PROTOCOL* Node := HandlePath

		while !(Node->IsEndNode()) {
			i16* NodeText := ToText->ConvertDeviceNodeToText(Node, true, true)

			if (Node->Type = EFI_DEVICE_PATH_NODE_TYPE_MEDIA_DEVICE && Node->SubType = EFI_DEVICE_PATH_NODE_SUBTYPE_HARD_DRIVE) {
				EFI_DEVICE_PATH_HARD_DRIVE_NODE* HardDrive := Node As void*

				Print("Is Hard Drive\n")

				if (HardDrive->PartitionNumber != 0 && HardDrive->PartitionFormat = EFI_DEVICE_PATH_HARD_DRIVE_FORMAT_GPT && HardDrive->SignatureType = EFI_DEVICE_PATH_HARD_DRIVE_SIGNATURE_GPT_GUID) {
					void* GUID := HardDrive->PartitionSignature
					
					Print("Partition %i: %guid\n", HardDrive->PartitionNumber, GUID)

					if (CompareMemory(GUID, RootPartitionGUID, 16)) {
						Print("Is root partition\n")
						OSPartition := Next
					}
					else if (CompareMemory(GUID, EFISystemPartitionGUID, 16)) {
						Print("Is EFI system partition\n")
						SystemPartition := Next
					}
				}
			}

			Node := Node->NextNode()
		}

		;WaitKey()
	}
	
	SystemTable->BootServices->FreePool(Handles)

	;loop {}
	
	void* FrameBuffer := Graphics->Mode->FrameBufferBase
	
	Print("FrameBuffer @ %x\n", FrameBuffer)
	
	EFIBlockDeviceInstance* BootDisk := NewBlockDevice(null, &EFIBlockDevicePrototype)
	SystemTable->BootServices->HandleProtocol(OSPartition, EFI_BLOCK_IO_PROTOCOL_GUID, BootDisk~>BlockIO As void**)
	
	Ext2* FS := Ext2:New(BootDisk->AsBlockDevice())
	FS->Open()
	RootDirectory := Ext2OpenINodeNumber(FS, 2)

	; Load Trampoline.elf into memory

	i32 TrampolineSize := 0
	void* TrampolineData := null

	if (LoadFile(RootDirectory, "Trampoline.elf", &TrampolineData, &TrampolineSize)) {
		return -1
	}

	; Read Kernel.elf into memory

	i32 KernelSize := 0
	void* KernelData := null

	if (LoadFile(RootDirectory, "Kernel.elf", &KernelData, &KernelSize)) {
		return -1
	}

	; Prep to call into trampoline
	
	i64 TrampolineMaxAddress := 0
	void(BootloaderInfo*) TrampolineEntryPoint := EFILoadELF(SystemTable, TrampolineData, &TrampolineMaxAddress)
	
	Print("Trampoline entry: %x\n", TrampolineEntryPoint)
	
	;SystemTable->BootServices->FreePages(KernelFile, KernelPageCount)
	Free(FS->SuperBlock)
	Free(FS)
	Free(BootDisk)
	
	
	i64 MemoryMapSize := 0
	i64 MemoryDescriptorSize := 0
	SystemTable->BootServices->GetMemoryMapInfo(&MemoryMapSize, &MemoryDescriptorSize)
	
	;Print("Memory map is %x bytes\n", MemoryMapSize)
	;Print("%x bytes per descriptor, %x total\n", MemoryDescriptorSize, MemoryMapSize / MemoryDescriptorSize)
	
	EFI_MEMORY_DESCRIPTOR* MemoryMap := Alloc(MemoryMapSize As i32)
	i64 MemoryMapKey := 0
	
	SystemTable->BootServices->GetMemoryMap(MemoryMapSize, MemoryMap, &MemoryMapKey)
	
	;Print("Memory map key: %x\n", MemoryMapKey)
	;
	;i64 MemoryMapCount := MemoryMapSize / MemoryDescriptorSize
	;
	;for (i32 Index := 0, Index < MemoryMapCount, Index++) {
	;	EFI_MEMORY_DESCRIPTOR* NextMemory := MemoryMap + (Index * MemoryDescriptorSize)
	;	
	;	Print("%x\t ... %x", NextMemory->PhysicalStart, NextMemory->PhysicalStart + (NextMemory->NumberOfPages * 0x1000))
	;	Print("\t -> ")
	;	Print("%x\t ... %x", NextMemory->PhysicalStart, NextMemory->PhysicalStart + (NextMemory->NumberOfPages * 0x1000))
	;	Print(" %s\n", EFIMemoryTypeToString(NextMemory->Type))
	;}
	
	BootloaderInfo BootInfo {
		PhysicalFrameBuffer: FrameBuffer As i64,

		IOAPICBase: IOAPICBase,
		HPETBase: HPETBase,

		PCISegmentGroupCount: SegmentGroupCount,

		TrampolineMaxAddress: TrampolineMaxAddress,

		KernelData: KernelData,
		KernelSize: KernelSize
	}

	MoveMemory(BootInfo~>KernelCommandLine, CommandLineBuffer, CommandLineLength)
	BootInfo~>KernelCommandLine[CommandLineLength] := 0

	MoveMemory(BootInfo~>PCISegmentGroups, SegmentGroups, SegmentGroupCount * #ACPI_MCFG_ENTRY)
	
	MoveMemory(BootInfo~>IRQMappings, IRQMappings, 16 * #i32)
	
	Print("Goodbye EFI!\n")

	WaitKey()
	
	SystemTable->BootServices->ExitBootServices(ImageHandle, MemoryMapKey)
	
	asm {cli}
	
	TrampolineEntryPoint(&BootInfo)
	
	;i32 SizeNeeded := 0
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	;EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	;i32 Count := SizeNeeded / 8
	;
	;PrintString(SystemTable, "There are ")
	;PrintHex(SystemTable, Count)
	;PrintString(SystemTable, " block devices\n")
	;
	;for (i32 Index := 0, Index < Count, Index++) {
	;	EFI_BLOCK_IO_PROTOCOL* HandleBlockIO := null
	;	
	;	SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_BLOCK_IO_PROTOCOL_GUID, &HandleBlockIO As void**)
	;	
	;	if (HandleBlockIO) {
	;		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
	;		
	;		SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)
	;		
	;		i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
	;		
	;		PrintString(SystemTable, "Device ")
	;		PrintHex(SystemTable, Index)
	;		PrintString(SystemTable, ": ")
	;		SystemTable->ConsoleOutput->OutputString(DeviceText)
	;		PrintString(SystemTable, "\n")
	;		
	;		SystemTable->BootServices->FreePool(DeviceText)
	;	}
	;}
	;
	;SystemTable->BootServices->FreePool(Handles)
	
	SystemTable->ConsoleInput->Reset()
	SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)

    return Status
}