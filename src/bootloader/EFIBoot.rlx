i8 DEBUG_EXT2_OPTIMIZATION := false

#Require "./src/utility/EFIApplication.rlx"
#Require "@/Console.rlx"
#Require "$/Memory.rlx"

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/EFIBlockDevice.rlx"

define void SchedulerYield() {
	for (i32 Index := 0, Index < 0x10_0000, Index++) {}
}

#Require "./src/drivers/FAT32.rlx"
#Require "./src/drivers/Ext2.rlx"
#Require "./src/drivers/GPT.rlx"
#Require "./src/utility/ELF.rlx"

#Require "./src/utility/PrintHelpers.rlx"

#Require "./src/bootloader/BootInfo.rlx"

define void* EFILoadELF(EFI_SYSTEM_TABLE* SystemTable, ELFHeader* Header) {
	void* Data := Header
	
	ELFProgramHeader* ProgramHeaders := Header->GetProgramHeaders()

	i64 CodeVirtual := 0
	i64 CodePhysical := 0
	
	for (i32 Index := 0, Index < Header->ProgramHeaderEntryCount, Index++) {
		ELFProgramHeader* Next := ProgramHeaders[Index]
		
		if (Next->Type = ELF_SEGMENT_TYPE_LOAD) {
			void* SectionData := Data + Next->FileOffset
			void* SectionMemory := null + Next->PhysicalAddress
			
			i32 SectionPageCount := (Next->MemorySize / 0x1000) As i32
			
			if (Next->MemorySize % 0x1000) {
				SectionPageCount += 1
			}

			Print("Load... %i -> %x\n", Index, SectionMemory)

			if (Next->Flags & ELF_SEGMENT_FLAGS_EXECUTE) {
				CodeVirtual := Next->VirtualAddress
				CodePhysical := Next->PhysicalAddress
			}
			
			SystemTable->BootServices->AllocatePages(EFI_MEMORY_ALLOCATE_ADDRESS, SectionPageCount, &SectionMemory)
			
			if (Next->MemorySize > Next->FileSize) {
				void* ZeroArea := SectionMemory + Next->FileSize
				i64 ZeroSize := Next->MemorySize - Next->FileSize
				
				SetMemory(ZeroArea, 0, ZeroSize)
			}
			
			MoveMemory(SectionMemory, SectionData, Next->FileSize As i32)
		}
	}
	
	return null + CodePhysical + (Header->EntryPoint - CodeVirtual)
}

#Require "./src/drivers/ACPI.rlx"

#Require "./src/utility/ProgressBar.rlx"

define i64 EFIMain(EFI_HANDLE* ImageHandle, EFI_SYSTEM_TABLE* SystemTable) {
    i64 Status := 0
	
	Print("Hello new EFI world!\n")
	
	;SystemTable->ConsoleInput->Reset()
	;SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)
	
	EFI_DEVICE_PATH_TO_TEXT_PROTOCOL* ToText := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID, &ToText As void**)
	
	EFI_DEVICE_PATH_UTILITIES_PROTOCOL* DevicePathHelpers := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID, &DevicePathHelpers As void**)
	
	if !(ToText) || !(DevicePathHelpers) {
		Print("Can't find to text or device path helper protocol\n")
		return 0
	}
	
	ACPI_RSDP* RSDP := null
	
	for (i32 Index := 0, Index < SystemTable->NumberOfTableEntries, Index++) {
		EFI_CONFIGURATION_TABLE* NextTable := SystemTable->ConfigurationTable[Index]
		
		;Print("%guid: %x ", NextTable~>VendorGUID, NextTable->VendorTable)
		
		if (NextTable~>VendorGUID->Equals(ACPI_RSDP_GUID)) {
			;Print("RSDP")
			RSDP := NextTable->VendorTable
		}
		
		;Print("\n")
	}
	
	if !(RSDP) {
		Print("Couldn't find RSDP, bailing out\n")
		return 0
	}
	
	;Print("\n\n")
	
	;Print("RSDP Signature: %l\n", RSDP->Signature)
	
	i32[16] IRQMappings
	
	for (i32 Index := 0, Index < 16, Index++) {
		IRQMappings[Index] := Index
	}
	
	i64 IOAPICBase := 0
	
	ACPI_TABLE* XSDT := RSDP->XSDTPhysicalAddress As void*
	
	for (i32 Index := 0, Index < XSDT~>Header->EntryCount(), Index++) {
		ACPI_TABLE* NextACPITable := XSDT->EntryPhysicalAddresses[Index] As void*
		
		i32 Signature := NextACPITable~>Header->Signature
		
		;Print("Table %i: %l\n", Index, Signature)
		
		if (Signature = ACPI_TABEL_SIGNATURE_MULTIPLE_APIC_DESCRIPTION) {
			;Print("APIC {\n")
			
			ACPI_APIC_TABLE* APIC := NextACPITable->Data()
			
			;Print("\tLength: %x\n", NextACPITable~>Header->Length)
			;Print("\tLocalAPICPhysicalAddress: %x\n", APIC->LocalAPICPhysicalAddress)
			;Print("\tFlags: %x\n", APIC->Flags)
			
			i32 EntryIndex := 0
			ACPI_APIC_TABLE_ENTRY* Current := APIC->First()
			
			while (Current) {
				;Print("\t%i: %x\n", EntryIndex++, Current->Type)
				
				if (Current->Type = ACPI_APIC_ENTRY_TYPE_LOCAL_APIC) {
					ACPI_LOCAL_APIC* Local := Current->Data()
					
					;Print("\t\tLocal APIC {\n")
					;Print("\t\t\tProcessor ID: %x\n", Local->ProcessorID)
					;Print("\t\t\tID: %x\n", Local->ID)
					;Print("\t\t\tFlags: %x\n", Local->Flags)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_IO_APIC) {
					ACPI_IO_APIC* IO := Current->Data()
					
					IOAPICBase := IO->PhysicalAddress & 0xFFFF_FFFF
					
					;Print("\t\tIO APIC {\n")
					;Print("\t\t\tID: %x\n", IO->ID)
					;Print("\t\t\tPhysicalAddress: %x\n", IO->PhysicalAddress)
					;Print("\t\t\tBase: %x\n", IO->GlobalInterruptBase)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_INTERRUPT_OVERRIDE_SOURCE) {
					ACPI_INTERRUPT_OVERRIDE* Override := Current->Data()
					
					IRQMappings[Override->Source] := Override->GlobalInterruptNumber
					
					;Print("\t\tInterrupt Override {\n")
					;Print("\t\t\tBus: %x\n", Override->Bus)
					;Print("\t\t\tSource: %x\n", Override->Source)
					;Print("\t\t\tGlobalInterruptNumber: %x\n", Override->GlobalInterruptNumber)
					;Print("\t\t\tFlags: %x\n", Override->Flags)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_INTERRUPT_OVERRIDE_SOURCE) {
					ACPI_NMI_SOURCE* NMI := Current->Data()
					
					;Print("\t\tNMI Source {\n")
					;Print("\t\t\tFlags: %x\n", NMI->Flags)
					;Print("\t\t\tGlobalInterruptNumber: %x\n", NMI->GlobalInterruptNumber)
					;Print("\t\t}\n")
				}
				else if (Current->Type = ACPI_APIC_ENTRY_TYPE_LOCAL_APIC_NMI) {
					ACPI_LOCAL_APIC_NMI* LocalNMI := Current->Data()
					
					;Print("\t\tLocal APIC NMI {\n")
					;Print("\t\t\tProcessor ID: %x\n", LocalNMI->ProcessorID)
					;Print("\t\t\tFlags: %x\n", LocalNMI->Flags)
					;Print("\t\t\tLocalInterruptNumber: %x\n", LocalNMI->LocalInterruptNumber)
					;Print("\t\t}\n")
				}
				
				Current := APIC->Next(Current)
			}
			
			;Print("}\n")
		}
		else if (Signature = ACPI_TABEL_SIGNATURE_FIXED_ACPI_DESCRIPTION) {
			ACPI_FADT* FADT := NextACPITable->Data()
			ACPI_DSDT* DSDT := FADT->ExtendedDSDT As void*

			i32 Length := DSDT~>Header->Length

			asm {cli}

			Print("DSDT: ")

			for (i32 Index := 0, Index < Length, Index++) {
				Print("%B|", (DSDT As i8*)[Index])
			}

			Print("\n")

			loop {}
			
			;Print("%hexdump\n", DSDT, DSDT~>Header->Length)
		}
	}
	
	;SystemTable->ConsoleInput->Reset()
	;SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)
	
	if !(IOAPICBase) {
		Print("Couldn't find IO-APIC, bailing out\n")
		return 0
	}
	
	Print("IOAPIC: %x\n", IOAPICBase)
	
	Print("IRQ Mappings: ")
	
	for (i32 Index := 0, Index < 16, Index++) {
		if (IRQMappings[Index] != Index) {
			Print("%x - %x  ", Index, IRQMappings[Index])
		}
	}
	
	EFI_LOADED_IMAGE_PROTOCOL* LoadedImage := null
	SystemTable->BootServices->HandleProtocol(ImageHandle, EFI_LOADED_IMAGE_PROTOCOL_GUID, &LoadedImage As void**)
	
	EFI_DEVICE_PATH_PROTOCOL* LoadedImageDevicePath := null
	SystemTable->BootServices->HandleProtocol(LoadedImage->DeviceHandle, EFI_DEVICE_PATH_PROTOCOL_GUID, &LoadedImageDevicePath As void**)
	
	i16* LoadedImageDevicePathText := ToText->ConvertDevicePathToText(LoadedImageDevicePath, true, true)
	
	Print("Boot Device Path: %w\n", LoadedImageDevicePathText)
	
	SystemTable->BootServices->FreePool(LoadedImageDevicePathText)
	
	EFI_DEVICE_PATH_PROTOCOL* RootDevicePath := DevicePathHelpers->DuplicateDevicePath(LoadedImageDevicePath)
	RootDevicePath->PopNode()
	
	
	i16* RootDevicePathText := ToText->ConvertDevicePathToText(RootDevicePath, true, true)
	
	Print("Boot Device Parent Path: %w\n", RootDevicePathText)
	
	SystemTable->BootServices->FreePool(RootDevicePathText)
	
	i32 SizeNeeded := 0
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	i32 Count := SizeNeeded / 8
	
	i32 ChildIndex := 0
	
	EFI_HANDLE* SystemPartition := null
	EFI_PARTITION_ENTRY* SystemPartitionEntry := null
	
	EFI_HANDLE* OSPartition := null
	EFI_PARTITION_ENTRY* OSPartitionEntry := null
	
	for (i32 Index := 0, Index < Count, Index++) {
		EFI_HANDLE* Next := Handles[Index]
		
		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
		
		SystemTable->BootServices->HandleProtocol(Next, EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)
		
		if (HandlePath->Equals(RootDevicePath)) {
			continue
		}
		
		EFI_DEVICE_PATH_PROTOCOL* HandleParentPath := DevicePathHelpers->DuplicateDevicePath(HandlePath)
		
		HandleParentPath->PopNode()
		
		if (HandleParentPath->Equals(RootDevicePath)) {
			i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
			
			Print("Child #%i:\n\t%w\n", ChildIndex++, DeviceText)
			
			SystemTable->BootServices->FreePool(DeviceText)
			
			EFI_PARTITION_INFO_PROTOCOL* ChildPartitionInfo := null
			
			SystemTable->BootServices->HandleProtocol(Next, EFI_PARTITION_INFO_PROTOCOL_GUID, &ChildPartitionInfo As void**)
			
			if !(ChildPartitionInfo) {
				Print("\tNo partition info\n")
				continue
			}
			
			if (ChildPartitionInfo->Type != EFI_PARTITION_INFO_TYPE_GPT) {
				Print("\tNon-GPT partition\n")
				continue
			}
			
			Print("\tType: %guid\n\tGUID: %guid\n", ChildPartitionInfo~>Entry~>Type, ChildPartitionInfo~>Entry~>GUID)
			
			if (CompareMemory(ChildPartitionInfo~>Entry~>Type, GPT_PARTITION_TYPE_SYSTEM, 16)) {
				SystemPartition := Next
				SystemPartitionEntry := ChildPartitionInfo~>Entry
				
				Print("\tIs system partition\n")
			}
			else if (CompareMemory(ChildPartitionInfo~>Entry~>Type, GPT_PARTITION_TYPE_CUSTOM, 16)) {
				OSPartition := Next
				OSPartitionEntry := ChildPartitionInfo~>Entry
				
				Print("\tIs OS partition\n")
			}
		}
		
		SystemTable->BootServices->FreePool(HandleParentPath)
	}
	
	SystemTable->BootServices->FreePool(Handles)
	
	Print("Switching mode\n")
	
	EFI_GRAPHICS_OUTPUT_PROTOCOL* Graphics := null
	SystemTable->BootServices->LocateProtocol(EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID, &Graphics As void**)
	
	Print("Device has %i modes\n", Graphics->Mode->MaxMode)
	
	for (i32 Index := 0, Index < Graphics->Mode->MaxMode, Index++) {
		EFI_GRAPHICS_OUTPUT_MODE_INFORMATION* Mode := Graphics->QueryMode(Index)
		
		Print("\t%ix%i %x\n", Mode->HorizontalResolution, Mode->VerticalResolution, Mode->PixelFormat)
		
		if (Mode->HorizontalResolution = 1024 && Mode->VerticalResolution = 768) {
			if (Graphics->Mode->CurrentMode != Index) {
				Graphics->SetMode(Index)
			}
			
			break
		}
	}
	
	SystemTable->ConsoleOutput->Reset()
	
	void* FrameBuffer := Graphics->Mode->FrameBufferBase
	
	Print("FrameBuffer @ %x\n", FrameBuffer)
	
	EFIBlockDeviceInstance* BootDisk := NewBlockDevice(null, &EFIBlockDevicePrototype) 
	SystemTable->BootServices->HandleProtocol(OSPartition, EFI_BLOCK_IO_PROTOCOL_GUID, BootDisk~>BlockIO As void**)
	
	Ext2* FS := Alloc(#Ext2)
	FS->Device := BootDisk->AsBlockDevice()
	
	void* Temp := SystemTable->BootServices->AllocatePages(2)
	FS->Initialize(Temp, Temp + 0x800, Temp + 0xC00, Temp + 0x1000, Temp + 0x1400)
	
	RootDirectory := Ext2OpenINodeNumber(FS, 2)
	
	FileHandle* KernelHandle := RootDirectory->Open("Kernel.elf")
	
	if (KernelHandle = null) {
		Print("Could not find `kernel.elf`\n")
		return -1
	}
	
	FileStatus KernelStatus
	KernelHandle->Status(&KernelStatus)
	
	i32 KernelSize := KernelStatus.Size As i32
	i32 KernelPageCount := KernelSize / 0x1000
	
	if (KernelSize % 0x1000) {
		KernelPageCount += 1
	}
	
	void* KernelFile := SystemTable->BootServices->AllocatePages(KernelPageCount)
	
	Print("Reading kernel...\n")
	
	KernelHandle->Read(KernelFile, KernelSize)
	
	Print("\nDone\n")
	
	KernelHandle->Close()
	
	ELFHeader* KernelELF := KernelFile
	
	i64 MaxKernelAddress := 0
	void* Data := null
	i32 Size := 0

	ELFProgramHeader* ProgramHeaders := KernelELF->GetProgramHeaders()
	ELFProgramHeader* PHDR := null
	
	for (i32 Index := 0, Index < KernelELF->ProgramHeaderEntryCount, Index++) {
		ELFProgramHeader* NextProgramHeader := ProgramHeaders[Index]

		if (NextProgramHeader->Type = ELF_SEGMENT_TYPE_PHDR) {
			PHDR := NextProgramHeader
		}
		else if (NextProgramHeader->Type = ELF_SEGMENT_TYPE_LOAD) {
			i64 NextEnd := NextProgramHeader->VirtualAddress + NextProgramHeader->MemorySize
			
			if (NextEnd > MaxKernelAddress) {
				MaxKernelAddress := NextEnd
			}

			if (NextProgramHeader->Flags & ELF_SEGMENT_FLAGS_EXECUTE = 0) {
				if (NextProgramHeader->PhysicalAddress != PHDR->PhysicalAddress) {
					Data := null + NextProgramHeader->PhysicalAddress
					Size := NextProgramHeader->MemorySize As i32
				}
			}
		}
	}
	
	Print("Max kernel address: %x\n", MaxKernelAddress)
	
	void(BootloaderInfo*) KernelEntryPoint := EFILoadELF(SystemTable, KernelELF)
	
	Print("Kernel entry: %x\n", KernelEntryPoint)
	
	SystemTable->BootServices->FreePages(KernelFile, KernelPageCount)
	Free(FS)
	Free(BootDisk)
	SystemTable->BootServices->FreePages(Temp, 2)
	
	
	i64 MemoryMapSize := 0
	i64 MemoryDescriptorSize := 0
	SystemTable->BootServices->GetMemoryMapInfo(&MemoryMapSize, &MemoryDescriptorSize)
	
	;Print("Memory map is %x bytes\n", MemoryMapSize)
	;Print("%x bytes per descriptor, %x total\n", MemoryDescriptorSize, MemoryMapSize / MemoryDescriptorSize)
	
	EFI_MEMORY_DESCRIPTOR* MemoryMap := Alloc(MemoryMapSize As i32)
	i64 MemoryMapKey := 0
	
	SystemTable->BootServices->GetMemoryMap(MemoryMapSize, MemoryMap, &MemoryMapKey)
	
	;Print("Memory map key: %x\n", MemoryMapKey)
	;
	;i64 MemoryMapCount := MemoryMapSize / MemoryDescriptorSize
	;
	;for (i32 Index := 0, Index < MemoryMapCount, Index++) {
	;	EFI_MEMORY_DESCRIPTOR* NextMemory := MemoryMap + (Index * MemoryDescriptorSize)
	;	
	;	Print("%x\t ... %x", NextMemory->PhysicalStart, NextMemory->PhysicalStart + (NextMemory->NumberOfPages * 0x1000))
	;	Print("\t -> ")
	;	Print("%x\t ... %x", NextMemory->PhysicalStart, NextMemory->PhysicalStart + (NextMemory->NumberOfPages * 0x1000))
	;	Print(" %s\n", EFIMemoryTypeToString(NextMemory->Type))
	;}
	
	BootloaderInfo BootInfo {
		PhysicalFrameBuffer: FrameBuffer As i64,
		MaxKernelAddress: MaxKernelAddress,
		IOAPICBase: IOAPICBase,

		Data: Data,
		Size: Size
	}
	
	MoveMemory(BootInfo~>IRQMappings, IRQMappings, 16 * #i32)
	
	Print("Goodbye EFI!\n")
	
	SystemTable->BootServices->ExitBootServices(ImageHandle, MemoryMapKey)
	
	asm {cli}
	
	KernelEntryPoint(&BootInfo)
	
	;i32 SizeNeeded := 0
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	;EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	;i32 Count := SizeNeeded / 8
	;
	;PrintString(SystemTable, "There are ")
	;PrintHex(SystemTable, Count)
	;PrintString(SystemTable, " block devices\n")
	;
	;for (i32 Index := 0, Index < Count, Index++) {
	;	EFI_BLOCK_IO_PROTOCOL* HandleBlockIO := null
	;	
	;	SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_BLOCK_IO_PROTOCOL_GUID, &HandleBlockIO As void**)
	;	
	;	if (HandleBlockIO) {
	;		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
	;		
	;		SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)
	;		
	;		i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
	;		
	;		PrintString(SystemTable, "Device ")
	;		PrintHex(SystemTable, Index)
	;		PrintString(SystemTable, ": ")
	;		SystemTable->ConsoleOutput->OutputString(DeviceText)
	;		PrintString(SystemTable, "\n")
	;		
	;		SystemTable->BootServices->FreePool(DeviceText)
	;	}
	;}
	;
	;SystemTable->BootServices->FreePool(Handles)
	
	SystemTable->ConsoleInput->Reset()
	SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)

    return Status
}