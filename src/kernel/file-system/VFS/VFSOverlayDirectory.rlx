#Require "$/Memory.rlx"

declare IDirectoryPrototype* GetVFSOverlayDirectoryPrototype()

struct VFSOverlayDirectoryEnumerateState {
    i32 Count
    i32 Index
    VFSDirectoryEntry[0] Entries
}

enum VFSOverlayWriteMode {
    AllToOverlay,
    OnlyEphemeralToOverlay
}

struct VFSOverlayDirectory {
    #Include "./src/kernel/file-system/VFS/IDirectory.rlx"
    
    IDirectory* Base
    IDirectory* Overlay

    VFSOverlayWriteMode WriteMode

    define i32 Count() {
        i32 Result := this->Base->Count()

        void* State := this->Overlay->Enumerate()
        VFSDirectoryEntry OverlayEntry

        while (this->Overlay->Next(&State, &OverlayEntry)) {
            VFSDirectoryEntry BaseEntry

            if (this->Base->Lookup(OverlayEntry.Name, &BaseEntry)) {
                if (OverlayEntry.Type = VFSDirectoryEntryType::Hole) {
                    ; Hole entry, removes a result

                    Result -= 1
                }
                
                ; Else, shadowed entry. Don't adjust count
            }
            else if (OverlayEntry.Type != VFSDirectoryEntryType::Hole) {
                ; Unique (existing) entry, +1 result

                Result += 1
            }
        }
        
        return Result
    }
    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        if (this->Overlay->Lookup(Name, Result)) {
            return true
        }
        else if (this->Base->Lookup(Name, Result)) {
            return true
        }

        return false
    }

    define void* Enumerate() {
        i32 BaseCount := this->Base->Count()
        i32 OverlayCount := this->Overlay->Count()

        i32 Size := #VFSOverlayDirectoryEnumerateState + ((BaseCount + OverlayCount) * #VFSDirectoryEntry)
        VFSOverlayDirectoryEnumerateState* State := Alloc(Size)

        void* BaseState := this->Base->Enumerate()
        VFSDirectoryEntry Source

        while (this->Base->Next(&BaseState, &Source)) {
            VFSDirectoryEntry* Destination := State->Entries[State->Count]
            
            MoveMemory(Destination, &Source, #VFSDirectoryEntry)
            State->Count += 1
        }

        void* OverlayState := this->Overlay->Enumerate()
        
        while (this->Overlay->Next(&OverlayState, &Source)) {
            i8 ReplacedBaseEntry := false

            for (i32 Index := 0, Index < BaseCount, Index++) {
                VFSDirectoryEntry* Base := State->Entries[Index]

                if (StringEquals(Source.Name, Base->Name)) {
                    MoveMemory(Base, &Source, #VFSDirectoryEntry)
                    ReplacedBaseEntry := true
                    break
                }
            }

            if !(ReplacedBaseEntry) {
                VFSDirectoryEntry* Destination := State->Entries[State->Count]

                MoveMemory(Destination, &Source, #VFSDirectoryEntry)
                State->Count += 1
            }
        }

        return State
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        VFSOverlayDirectoryEnumerateState* State := *RawState
        i32 Index := State->Index

        if (Index < State->Count) {
            VFSDirectoryEntry* Entry := State->Entries[Index]
            State->Index += 1

            if (Entry->Type = VFSDirectoryEntryType::Hole) {
                return this->Next(RawState, Result)
            }

            MoveMemory(Result, Entry, #VFSDirectoryEntry)

            return true
        }
        else {
            return false
        }
    }

    define i8 IsEphemeral() {
        return this->Overlay->IsEphemeral()
    }

    define IDirectory* CreateDirectory() {
        if (this->WriteMode = VFSOverlayWriteMode::OnlyEphemeralToOverlay) {
            return this->Base->CreateDirectory()
        }
        else if (this->WriteMode = VFSOverlayWriteMode::AllToOverlay) {
            return this->Overlay->CreateDirectory()
        }

        return null
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        if (this->WriteMode = VFSOverlayWriteMode::OnlyEphemeralToOverlay) {
            if (Entry->IsEphemeral()) {
                return this->Overlay->Insert(Entry)
            }
            else {
                return this->Base->Insert(Entry)
            }
        }

        return this->Overlay->Insert(Entry)
    }
    define i8 Remove(i8* Name) {
        VFSDirectoryEntry Entry

        if (this->Overlay->Lookup(Name, &Entry)) {
            return this->Overlay->Remove(Name)
        }
        else if (this->Base->Lookup(Name, &Entry)) {
            VFSDirectoryEntry HoleEntry {
                Name: Name,
                Type: VFSDirectoryEntryType::Hole
            }

            return this->Overlay->Insert(&HoleEntry)
        }
        else {
            return false
        }
    }

    static IDirectory* New(IDirectory* Base, IDirectory* Overlay, VFSOverlayWriteMode WriteMode) {
        self* this := Alloc(#self)

        this->Prototype := GetVFSOverlayDirectoryPrototype()
        this->Base := Base
        this->Overlay := Overlay
        this->WriteMode := WriteMode

        return this As IDirectory*
    }

    static IDirectory* New(IDirectory* Base, IDirectory* Overlay) {
        return self:New(Base, Overlay, VFSOverlayWriteMode::AllToOverlay)
    }
}

IDirectoryPrototype VFSOverlayDirectoryPrototype {
    Count: &VFSOverlayDirectory.Count,
    Lookup: &VFSOverlayDirectory.Lookup,

    Enumerate: &VFSOverlayDirectory.Enumerate,
    Next: &VFSOverlayDirectory.Next,

    IsEphemeral: &VFSOverlayDirectory.IsEphemeral,

    CreateDirectory: &VFSOverlayDirectory.CreateDirectory,

    Insert: &VFSOverlayDirectory.Insert,
    Remove: &VFSOverlayDirectory.Remove
}

define IDirectoryPrototype* GetVFSOverlayDirectoryPrototype() {
    return &VFSOverlayDirectoryPrototype
}