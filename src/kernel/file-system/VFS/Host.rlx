#Require "$/AVLTree.rlx"
#Require "$/Directory.rlx"

declare FileHandlePrototype* GetHostFileHandlePrototype()

struct HostFileInstance {
    #Include "./src/kernel/file-system/HandleInstance.rlx"

    IFile* VFS
    i64 Handle
    i8 ReadOnly

    static FileHandle* New(IFile* VFS, i64 Handle, i8 ReadOnly) {
        self* this := Alloc(#self)
        
        this->Prototype := GetHostFileHandlePrototype()

        this->VFS := VFS
        this->Handle := Handle
        this->ReadOnly := ReadOnly

        return this As void*
    }

    define void Status(FileStatus* Out) {
        FileGetStatus(this->Handle, Out)
    }
    define i32 Read(void* Buffer, i32 Size) {
        return FileRead(this->Handle, Buffer, Size)
    }
    define i32 Write(void* Buffer, i32 Size) {
        if (this->ReadOnly) {
            return 0
        }
        else {
            return FileWrite(this->Handle, Buffer, Size)
        }
    }
    define void Seek(i32 Destination, SeekMode Mode) {
        FileSeek(this->Handle, Destination, Mode As i32)
    }
    define i32 Tell() {
        return FileTell(this->Handle)
    }
    define void Close() {
        this->VFS->Close(this->AsFileHandle())
    }
}

FileHandlePrototype HostFileHandlePrototype {
	Status: &HostFileInstance.Status,
	Read: &HostFileInstance.Read,
	Write: &HostFileInstance.Write,
	Seek: &HostFileInstance.Seek,
	Tell: &HostFileInstance.Tell
}

define FileHandlePrototype* GetHostFileHandlePrototype() {
    return &HostFileHandlePrototype
}

declare IFilePrototype* GetVFSHostFilePrototype()

struct VFSHostFile {
    #Include "./src/kernel/file-system/VFS/IFile.rlx"

    i64 Handle
    i8 ReadOnly

    static IFile* New(i64 Handle, i8 ReadOnly) {
        self* this := Alloc(#self)

        this->Prototype := GetVFSHostFilePrototype()

        this->Handle := Handle
        this->ReadOnly := ReadOnly

        return this As void*
    }

    define i8 IsEphemeral() {
        return false
    }

    define FileHandle* Open() {
        return HostFileInstance:New(this->AsFile(), this->Handle, this->ReadOnly)
    }
    define void Close(FileHandle* Handle) {
        Free(Handle)
    }
}

IFilePrototype VFSHostFilePrototype {
    IsEphemeral: &VFSHostFile.IsEphemeral,
    Open: &VFSHostFile.Open,
    Close: &VFSHostFile.Close
}

define IFilePrototype* GetVFSHostFilePrototype() {
    return &VFSHostFilePrototype
}

declare IDirectoryPrototype* GetVFSHostDirectoryPrototype()

struct VFSHostDirectory {
    #Include "./src/kernel/file-system/VFS/IDirectory.rlx"

    i64 Handle
    i8 ReadOnly

    AVLTree* Cache ; <i8*, VFSDirectoryEntry>

    static IDirectory* New(i64 Handle, i8 ReadOnly) {
        self* this := Alloc(#self)

        this->Prototype := GetVFSHostDirectoryPrototype()
        
        this->Handle := Handle
        this->ReadOnly := ReadOnly

        this->Cache := AVLTree:New(#VFSDirectoryEntry)

        return this As void*
    }

    define void Reset() {
        FileSeek(this->Handle, 0, SEEK_SET)
    }

    define i32 Count() {
        i32 Result := 0

        void* State := StartWalkDirectory(this->Handle)
        DirectoryEntry Entry

        while (WalkDirectoryNext(&State, &Entry)) {
            Result += 1
        }

        this->Reset()

        return Result
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name, DirectoryEntry* ExistingEntry) {
        i64 NameHash := FNV1A(Name)
        VFSDirectoryEntry* ExistingCacheEntry := this->Cache->Get(NameHash)

        if (ExistingCacheEntry) {
            return ExistingCacheEntry
        }
        
        i64 Handle := -1

        if (this->ReadOnly = false) {
            Handle := FileOpenAt(this->Handle, Name, FILE_READ_WRITE)
        }

        if (Handle <= 0) {
            Handle := FileOpenAt(this->Handle, Name, FILE_READ)

            if (Handle <= 0) {
                return null
            }
        }

        VFSDirectoryEntryType Type := VFSDirectoryEntryType::Hole

        if (ExistingEntry) {
            Print("Type = %s\n", nameof:(ExistingEntry->Type))

            if (ExistingEntry->Type = DirectoryEntryType::File || ExistingEntry->Type = DirectoryEntryType::BlockDevice || ExistingEntry->Type = FileStatusType::CharacterDevice) {
                Type := VFSDirectoryEntryType::File
            }
            else if (ExistingEntry->Type = DirectoryEntryType::Directory) {
                Type := VFSDirectoryEntryType::Directory
            }
        }
        else {
            FileStatus Status
            FileGetStatus(Handle, &Status)

            Print("Type = %s\n", nameof:(Status.Type))

            if (Status.Type = FileStatusType::File || Status.Type = FileStatusType::BlockDevice || Status.Type = FileStatusType::CharacterDevice) {
                Type := VFSDirectoryEntryType::File
            }
            else if (Status.Type = FileStatusType::Directory) {
                Type := VFSDirectoryEntryType::Directory
            }
        }

        VFSDirectoryEntry NewCacheEntry {
            Name: CloneMemory(Name, StringLength(Name) + 1),
            Type: Type
        }

        if (Type = VFSDirectoryEntryType::File) {
            NewCacheEntry.File := VFSHostFile:New(Handle, this->ReadOnly)
        }
        else if (Type = VFSDirectoryEntryType::Directory) {
            NewCacheEntry.Directory := VFSHostDirectory:New(Handle, this->ReadOnly)
        }

        this->Cache->Insert(NameHash, &NewCacheEntry)

        return this->Cache->Get(NameHash)
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name) {
        return this->FindOrCacheEntry(Name, null)
    }

    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        VFSDirectoryEntry* Entry := this->FindOrCacheEntry(Name)

        if (Entry) {
            MoveMemory(Result, Entry, #VFSDirectoryEntry)
            return true
        }
        
        return false
    }

    define void* Enumerate() {
        return StartWalkDirectory(this->Handle)
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        DirectoryEntry Entry

        if (WalkDirectoryNext(RawState, &Entry)) {
            Print("Entry: %s\n", Entry.Name)
            VFSDirectoryEntry* Cached := this->FindOrCacheEntry(Entry.Name, &Entry)

            if (Cached) {
                MoveMemory(Result, Cached, #VFSDirectoryEntry)
                return true
            }
        }
        else {
            this->Reset()
        }

        return false
    }

    define i8 IsEphemeral() {
        return false
    }

    define IDirectory* CreateDirectory() {
        ;i32 DirectoryNodeNumber := this->FS->CreateDirectory()

        ;return VFSHostDirectory:New(this->FS, this->FS->ReadINode(DirectoryNodeNumber))

        return null
    }
    define IFile* CreateFile() {
        ;i32 FileNodeNumber := this->FS->CreateDirectory()

        ;return VFSHostFile:New(this->FS, this->FS->ReadINode(FileNodeNumber))

        return null
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        ;this->Children->Insert(FNV1A(Entry->Name), Entry)

        ;if (Entry->Type = VFSDirectoryEntryType::Directory) {
        ;    if (Entry->Directory->Is(GetVFSHostDirectoryPrototype())) {
        ;        VFSHostDirectory* Child := Entry->Directory As void*

        ;       i32 ChildNodeNumber := Child~>Node->INodeNumber

        ;        this->FS->CreateDirectoryEntry(this~>Node, Entry->Name, ChildNodeNumber, DIRECTORY_ENTRY_DIRECTORY)

        ;        this->Cache->Insert(FNV1A(Entry->Name), Entry)
        ;    }
        ;}

        if (Entry->Type = VFSDirectoryEntryType::File) {
            FileClose(FileOpenAt(this->Handle, Entry->Name, FILE_CREATE_NEW))
        }
        else if (Entry->Type = VFSDirectoryEntryType::Directory) {
            MakeDirectoryAt(this->Handle, Entry->Name)
        }
        else {
            return false
        }

        return true
    }
    define i8 Remove(i8* Name) {
        ;this->Children->Remove(FNV1A(Name))

        return false
    }
}

IDirectoryPrototype VFSHostDirectoryPrototype {
    Count: &VFSHostDirectory.Count,
    Lookup: &VFSHostDirectory.Lookup,

    Enumerate: &VFSHostDirectory.Enumerate,
    Next: &VFSHostDirectory.Next,

    IsEphemeral: &VFSHostDirectory.IsEphemeral,

    CreateDirectory: &VFSHostDirectory.CreateDirectory,
    CreateFile: &VFSHostDirectory.CreateFile,

    Insert: &VFSHostDirectory.Insert,
    Remove: &VFSHostDirectory.Remove
}

define IDirectoryPrototype* GetVFSHostDirectoryPrototype() {
    return &VFSHostDirectoryPrototype
}