#Require "$/AVLTree.rlx"
#Require "$/Directory.rlx"

declare FileHandlePrototype* GetHostFileHandlePrototype()

struct HostFileInstance {
    #Include "./src/kernel/file-system/HandleInstance.rlx"

    IVirtualFile* VFS
    i64 Handle

    static FileHandle* New(IVirtualFile* VFS, i64 Handle) {
        self* this := Alloc(#self)
        
        this->Prototype := GetHostFileHandlePrototype()

        this->VFS := VFS
        this->Handle := Handle

        return this As void*
    }

    define void Status(FileStatus* Out) {
        FileGetStatus(this->Handle, Out)
    }
    define i32 Read(void* Buffer, i32 Size) {
        return FileRead(this->Handle, Buffer, Size)
    }
    define i32 Write(void* Buffer, i32 Size) {
        return FileWrite(this->Handle, Buffer, Size)
    }
    define void Seek(i32 Destination, SeekMode Mode) {
        FileSeek(this->Handle, Destination, Mode As i32)
    }
    define i32 Tell() {
        return FileTell(this->Handle)
    }
    define void Close() {
        this->VFS->Close(this->AsFileHandle())
    }
}

FileHandlePrototype HostFileHandlePrototype {
	Status: &HostFileInstance.Status,
	Read: &HostFileInstance.Read,
	Write: &HostFileInstance.Write,
	Seek: &HostFileInstance.Seek,
	Tell: &HostFileInstance.Tell
}

define FileHandlePrototype* GetHostFileHandlePrototype() {
    return &HostFileHandlePrototype
}

declare IVirtualFilePrototype* GetVFSHostFilePrototype()

struct VFSHostFile {
    #Include "./src/kernel/file-system/VFS/IVirtualFile.rlx"

    i64 Handle

    static IVirtualFile* New(i64 Handle) {
        self* this := Alloc(#self)

        this->Prototype := GetVFSHostFilePrototype()

        this->Handle := Handle

        return this As void*
    }

    define i8 IsEphemeral() {
        return false
    }

    define FileHandle* Open() {
        return HostFileInstance:New(this->AsIVirtualFile(), this->Handle)
    }
    define void Close(FileHandle* Handle) {
        Free(Handle)
    }
}

IVirtualFilePrototype VFSHostFilePrototype {
    IsEphemeral: &VFSHostFile.IsEphemeral,
    Open: &VFSHostFile.Open,
    Close: &VFSHostFile.Close
}

define IVirtualFilePrototype* GetVFSHostFilePrototype() {
    return &VFSHostFilePrototype
}

declare IVirtualDirectoryPrototype* GetVFSHostDirectoryPrototype()

struct VFSHostDirectory {
    #Include "./src/kernel/file-system/VFS/IVirtualDirectory.rlx"

    i64 Handle

    AVLTree* Cache ; <i8*, VirtualDirectoryEntry>

    static IVirtualDirectory* New(i64 Handle) {
        self* this := Alloc(#self)

        this->Prototype := GetVFSHostDirectoryPrototype()
        
        this->Handle := Handle

        this->Cache := AVLTree:New(#VirtualDirectoryEntry)

        return this As void*
    }

    define void Reset() {
        FileSeek(this->Handle, 0, SEEK_SET)
    }

    define i32 Count() {
        i32 Result := 0

        void* State := StartWalkDirectory(this->Handle)
        DirectoryEntry Entry

        while (WalkDirectoryNext(&State, &Entry)) {
            Result += 1
        }

        this->Reset()

        return Result
    }

    define VirtualDirectoryEntry* FindOrCacheEntry(i8* Name, DirectoryEntry* ExistingEntry) {
        i64 NameHash := FNV1A(Name)
        VirtualDirectoryEntry* ExistingCacheEntry := this->Cache->Get(NameHash)

        if (ExistingCacheEntry) {
            return ExistingCacheEntry
        }
        
        i64 Handle := FileOpenAt(this->Handle, Name, FILE_READ)

        if (Handle <= 0) {
            return null
        }

        VirtualDirectoryEntryType Type := VirtualDirectoryEntryType::Hole

        if (ExistingEntry) {
            if (ExistingEntry->Type = DirectoryEntryType::File) {
                Type := VirtualDirectoryEntryType::File
            }
            else if (ExistingEntry->Type = DirectoryEntryType::Directory) {
                Type := VirtualDirectoryEntryType::Directory
            }
        }
        else {
            FileStatus Status
            FileGetStatus(Handle, &Status)

            if (Status.Type = FileStatusType::File) {
                Type := VirtualDirectoryEntryType::File
            }
            else if (Status.Type = FileStatusType::Directory) {
                Type := VirtualDirectoryEntryType::Directory
            }
        }

        VirtualDirectoryEntry NewCacheEntry {
            Name: CloneMemory(Name, StringLength(Name) + 1),
            Type: Type
        }

        if (Type = VirtualDirectoryEntryType::File) {
            NewCacheEntry.File := VFSHostFile:New(Handle)
        }
        else if (Type = VirtualDirectoryEntryType::Directory) {
            NewCacheEntry.Directory := VFSHostDirectory:New(Handle)
        }

        this->Cache->Insert(NameHash, &NewCacheEntry)

        return this->Cache->Get(NameHash)
    }

    define VirtualDirectoryEntry* FindOrCacheEntry(i8* Name) {
        return this->FindOrCacheEntry(Name, null)
    }

    define i8 Lookup(i8* Name, VirtualDirectoryEntry* Result) {
        VirtualDirectoryEntry* Entry := this->FindOrCacheEntry(Name)

        if (Entry) {
            MoveMemory(Result, Entry, #VirtualDirectoryEntry)
            return true
        }
        
        return false
    }

    define void* Enumerate() {
        return StartWalkDirectory(this->Handle)
    }
    define i8 Next(void** RawState, VirtualDirectoryEntry* Result) {
        DirectoryEntry Entry

        if (WalkDirectoryNext(RawState, &Entry)) {
            VirtualDirectoryEntry* Cached := this->FindOrCacheEntry(Entry.Name, &Entry)

            if (Cached) {
                MoveMemory(Result, Cached, #VirtualDirectoryEntry)
                return true
            }
        }
        else {
            this->Reset()
        }

        return false
    }

    define i8 IsEphemeral() {
        return false
    }

    define IVirtualDirectory* CreateDirectory() {
        ;i32 DirectoryNodeNumber := this->FS->CreateDirectory()

        ;return VFSHostDirectory:New(this->FS, this->FS->ReadINode(DirectoryNodeNumber))

        return null
    }
    define IVirtualFile* CreateFile() {
        ;i32 FileNodeNumber := this->FS->CreateDirectory()

        ;return VFSHostFile:New(this->FS, this->FS->ReadINode(FileNodeNumber))

        return null
    }

    define i8 Insert(VirtualDirectoryEntry* Entry) {
        ;this->Children->Insert(FNV1A(Entry->Name), Entry)

        ;if (Entry->Type = VirtualDirectoryEntryType::Directory) {
        ;    if (Entry->Directory->Is(GetVFSHostDirectoryPrototype())) {
        ;        VFSHostDirectory* Child := Entry->Directory As void*

        ;       i32 ChildNodeNumber := Child~>Node->INodeNumber

        ;        this->FS->CreateDirectoryEntry(this~>Node, Entry->Name, ChildNodeNumber, DIRECTORY_ENTRY_DIRECTORY)

        ;        this->Cache->Insert(FNV1A(Entry->Name), Entry)
        ;    }
        ;}

        return false
    }
    define i8 Remove(i8* Name) {
        ;this->Children->Remove(FNV1A(Name))

        return false
    }
}

IVirtualDirectoryPrototype VFSHostDirectoryPrototype {
    Count: &VFSHostDirectory.Count,
    Lookup: &VFSHostDirectory.Lookup,

    Enumerate: &VFSHostDirectory.Enumerate,
    Next: &VFSHostDirectory.Next,

    IsEphemeral: &VFSHostDirectory.IsEphemeral,

    CreateDirectory: &VFSHostDirectory.CreateDirectory,

    Insert: &VFSHostDirectory.Insert,
    Remove: &VFSHostDirectory.Remove
}

define IVirtualDirectoryPrototype* GetVFSHostDirectoryPrototype() {
    return &VFSHostDirectoryPrototype
}