IDirectory* VFSRootDirectory := null

define void MountRoot(IDirectory* NewRoot) {
    IDirectory* RootOverlay := VFSDirectory:New()
    IDirectory* Root := VFSOverlayDirectory:New(NewRoot, RootOverlay, VFSOverlayWriteMode::OnlyEphemeralToOverlay)

    VFSRootDirectory := Root
}

enum FilePathAnchor {
    None := 0,
    Root := 1
}

struct FilePath {
    FilePathAnchor Anchor

    i8*[10] Parts
    i32 Count

    i8[256] Buffer

    i8* FileName

    define void Shift() {
        this->Count -= 1
        this->FileName := this->Parts[this->Count - 1]
    }

    define void UnShift() {
        this->Count += 1
        this->FileName := this->Parts[this->Count - 1]
    }

    define void Zero() {
        FastSetMemory8(this, 0, #self)
    }

    define i8* CloneFileName() {
        return CloneMemory(this->FileName, StringLength(this->FileName))
    }

    define i32 Append(i32 Start, i32 End) {
        this->Parts[this->Count++] := this->Buffer + Start
        this->Buffer[End] := 0

        return End + 1
    }

    define self* Seal() {
        this->FileName := this->Parts[this->Count - 1]

        return this
    }

    define void Print() {
        if (this->Anchor = FilePathAnchor::Root) {
            Print("/")
        }

        for (i32 Index := 0, Index < this->Count - 1, Index++) {
            Print("%s/", this->Parts[Index])
        }

        Print("%s", this->FileName)
    }
}

define void ParsePath(i8* Path, i32 Length, FilePath* Out) {
    Out->Zero()

    if (Path[0] = '/') {
        Out->Anchor := FilePathAnchor::Root

        Path += 1
        Length -= 1
    }
    else {
        Out->Anchor := FilePathAnchor::None
    }

    MoveMemory(Out->Buffer, Path, Length)

    i32 Start := 0

    for (i32 Index := 0, Index < Length, Index++) {
        if (Path[Index] = '/') {
            Start := Out->Append(Start, Index)
        }
    }

    Out->Append(Start, Length)

    Out->Seal()
}

define void ParsePath(i8* Path, FilePath* Out) {
    ParsePath(Path, StringLength(Path), Out)
}

define i8 Lookup(IDirectory* At, FilePath* Path, VFSDirectoryEntry* Result) {
    IDirectory* Current := At

    if (Path->Anchor = FilePathAnchor::Root) {
        Current := VFSRootDirectory
    }

    /*if (Path->Count <= 0) {
        Result->Type := VFSDirectoryEntryType::Directory
        Result->Name := "/"
        Result->Directory := Current

        return true
    }*/

    for (i32 Index := 0, Index < Path->Count - 1, Index++) {
        i8* Part := Path->Parts[Index]

        VFSDirectoryEntry Next
        
        if !(Current->Lookup(Part, &Next)) {
            return false
        }

        if (Next.Type != VFSDirectoryEntryType::Directory) {
            return false
        }
        
        Current := Next.Directory
    }

    return Current->Lookup(Path->FileName, Result)
}

define i8 Lookup(IDirectory* At, i8* RawPath, VFSDirectoryEntry* Result) {
    FilePath Path
    ParsePath(RawPath, &Path)

    return Lookup(At, &Path, Result)
}

define i8 Mount(IDirectory* At, i8* RawPath, IDirectory* Root) {
    IDirectory* Current := At

    FilePath Path
    ParsePath(RawPath, &Path)

    if (Path.Anchor = FilePathAnchor::Root) {
        At := VFSRootDirectory
    }

    for (i32 Index := 0, Index < Path->Count - 1, Index++) {
        i8* Part := Path->Parts[Index]
        i8 ShouldCreateNew := true

        VFSDirectoryEntry Next
        if (Current->Lookup(Part, &Next)) {
            if (Next.Type != VFSDirectoryEntryType::Hole) {
                ShouldCreateNew := false
            }
        }

        if (ShouldCreateNew) {
            IDirectory* NewChild := VFSDirectory:New()

            VFSDirectoryEntry NewChildEntry {
                Type: VFSDirectoryEntryType::Directory,
                Name: CloneString(Part),
                Directory: NewChild
            }

            Current->Insert(&NewChildEntry)

            Current := NewChild
        }
        else {
            ; Entry exists, but we need to make sure it is ephemeral

            IDirectory* Entry := Next.Directory

            if (Entry->IsEphemeral()) {
                Current := Entry
            }
            else {
                ; Entry isn't ephemeral, we need to replace it with an overlay based on itself

                IDirectory* Base := Entry
                IDirectory* Overlay := VFSDirectory:New()
                IDirectory* Replacement := VFSOverlayDirectory:New(Base, Overlay, VFSOverlayWriteMode::OnlyEphemeralToOverlay)

                VFSDirectoryEntry OverlayEntry {
                    Type: VFSDirectoryEntryType::Directory,
                    Name: CloneString(Part),
                    Directory: Replacement
                }

                Current->Insert(&OverlayEntry)

                Current := Replacement
            }
        }
    }

    VFSDirectoryEntry NewEntry {
        Type: VFSDirectoryEntryType::Directory,
        Name: CloneString(Path->FileName),
        Directory: Root
    }

    if (Current->Is(GetVFSOverlayDirectoryPrototype())) {
        ; NOTE: Horrible hack

        return (Current As VFSOverlayDirectory*)->Overlay->Insert(&NewEntry)
    }
    else {
        return Current->Insert(&NewEntry)
    }
}

define IDirectory* LookupParentDirectory(IDirectory* At, FilePath* Path) {
    if (Path->Count = 1) {
        if (Path->Anchor = FilePathAnchor::Root) {
            return VFSRootDirectory
        }
        else {
            return At
        }
    }

    Path->Shift()

    VFSDirectoryEntry ParentEntry
    if !(Lookup(At, Path, &ParentEntry)) {
        return null
    }

    Path->UnShift()

    if (ParentEntry.Type != VFSDirectoryEntryType::Directory) {
        return null
    }

    return ParentEntry.Directory
}

define IDirectory* CreateDirectory(IDirectory* At, i8* RawPath) {
    FilePath Path
    ParsePath(RawPath, &Path)

    if (Path.Anchor = FilePathAnchor::Root) {
        At := VFSRootDirectory
    }

    IDirectory* Parent := LookupParentDirectory(At, &Path)
    IDirectory* Result := Parent->CreateDirectory()

    VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::Directory,
        Name: CloneString(Path.FileName),
        Directory: Result
    }

    Parent->Insert(&Entry)

    return Result
}

define IFile* CreateFile(IDirectory* At, i8* RawPath) {
    FilePath Path
    ParsePath(RawPath, &Path)

    if (Path.Anchor = FilePathAnchor::Root) {
        At := VFSRootDirectory
    }

    IDirectory* Parent := LookupParentDirectory(At, &Path)
    IFile* Result := Parent->CreateFile()

    VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::File,
        Name: CloneString(Path.FileName),
        File: Result
    }

    Parent->Insert(&Entry)

    return Result
}