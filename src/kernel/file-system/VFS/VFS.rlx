struct IDirectoryPrototype {
    i32(void*) Count
    i8(void*, i8*, VFSDirectoryEntry*) Lookup

    void*(void*) Enumerate
    i8(void*, void**, VFSDirectoryEntry*) Next

    i8(void*) IsEphemeral

    IDirectory*(void*) CreateDirectory
    IFile*(void*) CreateFile

    i8(void*, VFSDirectoryEntry*) Insert
    i8(void*, i8*) Remove
}

struct IDirectory {
    #Include "./src/kernel/file-system/VFS/IDirectory.rlx"

    define i32 Count() {
        return this->Prototype->Count(this)
    }
    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        return this->Prototype->Lookup(this, Name, Result)
    }

    define void* Enumerate() {
        return this->Prototype->Enumerate(this)
    }
    define i8 Next(void** State, VFSDirectoryEntry* Result) {
        return this->Prototype->Next(this, State, Result)
    }

    define i8 IsEphemeral() {
        return this->Prototype->IsEphemeral(this)
    }

    define IDirectory* CreateDirectory() {
        return this->Prototype->CreateDirectory(this)
    }
    define IFile* CreateFile() {
        return this->Prototype->CreateFile(this)
    }
    
    define i8 Insert(VFSDirectoryEntry* Entry) {
        return this->Prototype->Insert(this, Entry)
    }
    define i8 Remove(i8* Name) {
        return this->Prototype->Remove(this, Name)
    }
}

struct IFilePrototype {
    i8(void*) IsEphemeral
    FileHandle*(void*) Open
    void(void*, FileHandle*) Close
}

struct IFile {
    #Include "./src/kernel/file-system/VFS/IFile.rlx"

    define i8 IsEphemeral() {
        return this->Prototype->IsEphemeral(this)
    }

    define FileHandle* Open() {
        return this->Prototype->Open(this)
    }
    define void Close(FileHandle* Target) {
        this->Prototype->Close(this, Target)
    }
}

enum VFSDirectoryEntryType {
    Directory,
    File,
    Hole
}

struct VFSDirectoryEntry {
    i8* Name
    
    union {
        IDirectory* Directory
        IFile* File
        void* Value
    }

    VFSDirectoryEntryType Type

    define i8 IsEphemeral() {
        if (this->Type = VFSDirectoryEntryType::File) {
            return this->File->IsEphemeral()
        }
        else if (this->Type = VFSDirectoryEntryType::Directory) {
            return this->Directory->IsEphemeral()
        }
        else if (this->Type = VFSDirectoryEntryType::Hole) {
            return true
        }

        return true
    }
}