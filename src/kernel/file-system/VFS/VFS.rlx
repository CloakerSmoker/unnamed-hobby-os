
enum VFSDirectoryEntryType {
    Directory,
    File,
    Hole
}

struct _VFSDirectoryEntry {
    i8* Name
    
    union {
        IDirectory* Directory
        IFile* File
        void* Value
    }

    VFSDirectoryEntryType Type
}

interface IDirectory {
    virtual i32 Count()
    virtual i8 Lookup(i8*, VFSDirectoryEntry*)

    virtual void* Enumerate()
    virtual i8 Next(void**, VFSDirectoryEntry*)

    virtual i8 IsEphemeral()

    virtual IDirectory* CreateDirectory()
    virtual IFile* CreateFile()

    virtual i8 Insert(VFSDirectoryEntry*)

    virtual i8 Insert(i8* Name, IFile* File) {
        _VFSDirectoryEntry Entry {
            Type: VFSDirectoryEntryType::File,
            Name: Name,
            Value: File
        }

        return this->Insert(&Entry As void*)
    }

    virtual i8 Insert(i8* Name, IDirectory* Directory) {
        _VFSDirectoryEntry Entry {
            Type: VFSDirectoryEntryType::Directory,
            Name: Name,
            Value: Directory
        }

        return this->Insert(&Entry As void*)
    }

    virtual i8 Remove(i8*)

    virtual i8 Has(i8* Name) {
        _VFSDirectoryEntry Entry

        return this->Lookup(Name, &Entry As void*)
    }
}

interface IFile {
    virtual i8 IsEphemeral()
    virtual IFileHandle* Open(i32 Flags)

    virtual IFileHandle* Open() {
        return this->Open(0)
    }

    virtual void Close(IFileHandle* Handle) {}
}

struct VFSDirectoryEntry {
    i8* Name
    
    union {
        IDirectory* Directory
        IFile* File
        void* Value
    }

    VFSDirectoryEntryType Type

    define i8 IsEphemeral() {
        if (this->Type = VFSDirectoryEntryType::File) {
            return this->File->IsEphemeral()
        }
        else if (this->Type = VFSDirectoryEntryType::Directory) {
            return this->Directory->IsEphemeral()
        }
        else if (this->Type = VFSDirectoryEntryType::Hole) {
            return true
        }

        return true
    }
}