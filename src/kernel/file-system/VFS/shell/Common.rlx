define void ExecuteLS(i64 ArgC, i8** ArgV) {
    IDirectory* Target := CurrentDirectory

    if (ArgC = 2) {
        i8* Path := ArgV[1]

        VFSDirectoryEntry Entry
        if !(Lookup(CurrentDirectory, Path, &Entry)) {
            Print("'%s' does not exist\n", Path)
            return
        }

        if (Entry.Type != VFSDirectoryEntryType::Directory) {
            Print("'%s' not a directory\n", Path)
            return
        }

        Target := Entry.Directory
    }

    Print("\nListing %i entries:\n", Target->Count())

    void* State := Target->Enumerate()
    i32 Count := 0
    VFSDirectoryEntry Entry

    while (Target->Next(&State, &Entry)) {
        if (Entry.Type = VFSDirectoryEntryType::Directory) {
            Print("%i %s/\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::File) {
            Print("%i %s\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::Hole) {
            Print("%i %s (hole)\n", Count, Entry.Name)
        }

        Count += 1
    }
}

i32 LS_COMMAND_ID := RegisterCommand("ls", &ExecuteLS)

define void ExecuteCD(i64 ArgC, i8** ArgV) {
    if (ArgC = 2) {
        i8* Path := ArgV[1]

        VFSDirectoryEntry Entry
        if !(Lookup(CurrentDirectory, Path, &Entry)) {
            Print("'%s' does not exist\n", Path)
            return
        }

        if (Entry.Type != VFSDirectoryEntryType::Directory) {
            Print("'%s' is not a directory\n", Path)
            return
        }

        CurrentDirectory := Entry.Directory
    }
}

i32 CD_COMMAND_ID := RegisterCommand("cd", &ExecuteCD)

define void ExecuteTouch(i64 ArgC, i8** ArgV) {
    if (ArgC != 2) {
        return
    }

    i8* RawPath := ArgV[1]

    FilePath Path
    ParsePath(RawPath, &Path)

    
    IDirectory* ParentDirectory := LookupParentDirectory(CurrentDirectory, &Path)

    if !(ParentDirectory) {
        Print("'%s' not found\n", RawPath)
        return
    }

    VFSDirectoryEntry OldEntry
    if (ParentDirectory->Lookup(Path.FileName, &OldEntry)) {
        Print("'%s' already exists\n", RawPath)
        return
    }

    VFSDirectoryEntry NewEntry {
        Type: VFSDirectoryEntryType::File,
        Name: CloneString(Path.FileName),
        File: ParentDirectory->CreateFile()
    }
}

i32 TOUCH_COMMAND_ID := RegisterCommand("touch", &ExecuteCD)