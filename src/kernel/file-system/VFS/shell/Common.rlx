define void ExecuteLS(i64 ArgC, i8** ArgV) {
    IDirectory* Target := CurrentDirectory

    if (ArgC = 2) {
        i8* Path := ArgV[1]

        VFSDirectoryEntry Entry
        if !(Lookup(CurrentDirectory, Path, &Entry)) {
            Print("'%s' does not exist\n", Path)
            return
        }

        if (Entry.Type != VFSDirectoryEntryType::Directory) {
            Print("'%s' not a directory\n", Path)
            return
        }

        Target := Entry.Directory
    }

    Print("\nListing %i entries:\n", Target->Count())

    void* State := Target->Enumerate()
    i32 Count := 0
    VFSDirectoryEntry Entry

    while (Target->Next(&State, &Entry)) {
        if (Entry.Type = VFSDirectoryEntryType::Directory) {
            Print("%i %s/\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::File) {
            Print("%i %s\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::Hole) {
            Print("%i %s (hole)\n", Count, Entry.Name)
        }

        Count += 1
    }
}

i32 LS_COMMAND_ID := RegisterCommand("ls", &ExecuteLS)

define void ExecuteCD(i64 ArgC, i8** ArgV) {
    if (ArgC = 2) {
        i8* Path := ArgV[1]

        if (StringEquals(Path, "/")) {
            CurrentDirectory := VFSRootDirectory
            return
        }

        VFSDirectoryEntry Entry
        if !(Lookup(CurrentDirectory, Path, &Entry)) {
            Print("'%s' does not exist\n", Path)
            return
        }

        if (Entry.Type != VFSDirectoryEntryType::Directory) {
            Print("'%s' is not a directory\n", Path)
            return
        }

        CurrentDirectory := Entry.Directory
    }
}

i32 CD_COMMAND_ID := RegisterCommand("cd", &ExecuteCD)

define void ExecuteTouch(i64 ArgC, i8** ArgV) {
    if (ArgC != 2) {
        return
    }

    VFSDirectoryEntryType Type := VFSDirectoryEntryType::File

    if (StringEquals(ArgV[0], "mkdir")) {
        Type := VFSDirectoryEntryType::Directory
    }

    i8* RawPath := ArgV[1]

    FilePath Path
    ParsePath(RawPath, &Path)

    IDirectory* ParentDirectory := LookupParentDirectory(CurrentDirectory, &Path)

    if !(ParentDirectory) {
        Print("'%s' not found\n", RawPath)
        return
    }

    VFSDirectoryEntry OldEntry
    if (ParentDirectory->Lookup(Path.FileName, &OldEntry)) {
        Print("'%s' already exists\n", RawPath)
        return
    }

    VFSDirectoryEntry NewEntry {
        Type: Type,
        Name: CloneString(Path.FileName)
    }

    if (Type = VFSDirectoryEntryType::File) {
        NewEntry.File := ParentDirectory->CreateFile()
    }
    else if (Type = VFSDirectoryEntryType::Directory) {
        NewEntry.Directory := ParentDirectory->CreateDirectory()
    }

    ParentDirectory->Insert(&NewEntry)
}

i32 TOUCH_COMMAND_ID := RegisterCommand("touch", &ExecuteTouch)
i32 MKDIR_COMMAND_ID := RegisterCommand("mkdir", &ExecuteTouch)

define void ExecuteDD(i64 ArgC, i8** ArgV) {
    ; dd bs=512 if=/dev/loop0p1 of=/host/p1.bin count=512

    i32 InputBase := 0
    i32 OutputBase := 0

    i32 BlockSize := -1
    i32 BlockCount := -1

    i8* InputFilePath := null
    i8* OutputFilePath := null

    i8 DryRun := false

    for (i32 OptionIndex := 1, OptionIndex < ArgC, OptionIndex++) {
        
        i8* Option := ArgV[OptionIndex]

        i8* Name := Option
        i8* Value := null

        for (i32 Index := 0, Index < StringLength(Option), Index++) {
            if (Option[Index] = '=') {
                Option[Index] := 0
                Value := &Option[Index + 1]
                break
            }
        }

        if (Value != null) {
            if (StringEquals(Name, "bs")) {
                BlockSize := ParseDataUnit(Value) As i32
            }
            else if (StringEquals(Name, "count")) {
                DataUnit TransferSize
                ParseDataUnit(Value, &TransferSize)

                if (TransferSize.Scale = DataScale::Count) {
                    BlockCount := TransferSize.Value As i32
                }
                else {
                    BlockCount := TransferSize.Get() As i32
                    BlockCount /= BlockSize
                }
            }
            else if (StringEquals(Name, "skip")) {
                InputBase := ParseDataUnit(Value) As i32
            }
            else if (StringEquals(Name, "seek")) {
                OutputBase := ParseDataUnit(Value) As i32
            }
            else if (StringEquals(Name, "if")) {
                InputFilePath := Value
            }
            else if (StringEquals(Name, "of")) {
                OutputFilePath := Value
            }
        }

        if (StringEquals(Name, "dry")) {
            DryRun := true
        }
    }

    ;Print("%i, %i\n", BlockSize, BlockCount)

    if (BlockSize < 0 || BlockCount < 0) {
        Print("Block size and count must be specified\n")
        return
    }
    else if (InputFilePath = null || OutputFilePath = null) {
        Print("Input/output files must be specified\n")
        return
    }

    if (DryRun) {
        Print("Would transfer %i blocks of %x bytes from '%s' to '%s'\n", BlockCount, BlockSize, InputFilePath, OutputFilePath)
        return
    }

    VFSDirectoryEntry InputEntry
    if !(Lookup(CurrentDirectory, InputFilePath, &InputEntry)) {
        Print("'%s' not found\n", InputFilePath)
        return
    }

    if (InputEntry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' not a file\n", InputFilePath)
        return
    }

    IFile* InputFile := InputEntry.File
    IFileHandle* Input := InputFile->Open()
    Input->Seek(InputBase * BlockSize, SeekMode::Set)

    VFSDirectoryEntry OutputEntry
    if !(Lookup(CurrentDirectory, OutputFilePath, &OutputEntry)) {
        i8*[2] FakeTouch {"touch", OutputFilePath}
        ExecuteTouch(2, FakeTouch)

        Lookup(CurrentDirectory, OutputFilePath, &OutputEntry)
    }

    if (OutputEntry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' not a file\n", OutputFilePath)
        return
    }

    IFile* OutputFile := OutputEntry.File
    IFileHandle* Output := OutputFile->Open()
    Output->Seek(OutputBase * BlockSize, SeekMode::Set)

    void* BlockBuffer := Alloc(BlockSize)

    for (i32 Index := 0, Index < BlockCount, Index++) {
        Input->Read(BlockBuffer, BlockSize)
        Output->Write(BlockBuffer, BlockSize)
    }

    ;Input->Close()
    ;Output->Close()
}

i32 DD_COMMAND_ID := RegisterCommand("dd", &ExecuteDD)

define void ExecuteInstall(i64 ArgC, i8** ArgV) {
    if (ArgC != 3) {
        ;return
    }

    i8* RawSourcePath := ArgV[1]
    i8* RawDestinationPath := ArgV[2]

    VFSDirectoryEntry SourceEntry
    if !(Lookup(CurrentDirectory, RawSourcePath, &SourceEntry)) {
        Print("'%s' not found\n", RawSourcePath)
        return
    }

    if (SourceEntry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' not a file\n", RawSourcePath)
        return
    }

    IFile* SourceFile := SourceEntry.File
    IFileHandle* Source := SourceFile->Open()

    Source->Seek(SeekMode::End, 0)
    i32 SourceSize := Source->Tell()
    Source->Seek(SeekMode::Set, 0)

    Print("Installing %i (%x) bytes\n", SourceSize, SourceSize)

    void* SourceData := Alloc(SourceSize)
    Source->Read(SourceData, SourceSize)

    ;SourceFile->Close(Source)

    FilePath DestinationPath
    ParsePath(RawDestinationPath, &DestinationPath)

    IDirectory* Current := CurrentDirectory

    if (DestinationPath.Anchor = FilePathAnchor::Root) {
        Current := VFSRootDirectory
    }

    for (i32 Index := 0, Index < DestinationPath.Count - 1, Index++) {
        i8* Part := DestinationPath.Parts[Index]

        Print("Ensuring %s exists\n", Part)

        VFSDirectoryEntry Next
        
        if !(Current->Lookup(Part, &Next)) {
            Next.Type := VFSDirectoryEntryType::Directory
            Next.Name := CloneString(Part)
            Next.Directory := Current->CreateDirectory()

            Current->Insert(&Next)
        }
        
        Current := Next.Directory
    }
    
    IFile* Destination := Current->CreateFile()

    VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::File,
        Name: CloneString(DestinationPath.FileName),
        File: Destination
    }

    Current->Insert(&Entry)

    IFileHandle* DestinationFile := Destination->Open()

    DestinationFile->Write(SourceData, SourceSize)

    ;Destination->Close(DestinationFile)
}

i32 INSTALL_COMMAND_ID := RegisterCommand("install", &ExecuteInstall)

define void ExecuteHexdump(i64 ArgC, i8** ArgV) {
    if (ArgC != 2) {
        return
    }

    i8* Path := ArgV[1]

    VFSDirectoryEntry Entry
    if !(Lookup(CurrentDirectory, Path, &Entry)) {
        Print("'%s' does not exist\n", Path)
        return
    }

    if (Entry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' is not a file\n", Path)
        return
    }

    IFile* File := Entry.File
    IFileHandle* Handle := File->Open()

    FileStatus Status
    Handle->Status(&Status)

    i32 Size := Status.Size As i32

    Print("'%s' is %i (%x) bytes\n", Path, Size, Size)

    void* Buffer := Alloc(0x2000)

    while (Size > 0) {
        i32 ChunkSize := 0x2000

        if (Size < 0x2000) {
            ChunkSize := Size    
        }

        Handle->Read(Buffer, ChunkSize)
        Print("%hexdump", Buffer, ChunkSize)

        Size -= ChunkSize
    }

    Free(Buffer)
}

i32 HEXDUMP_COMMAND_ID := RegisterCommand("hexdump", &ExecuteHexdump)

define void ExecuteEcho(i64 ArgC, i8** ArgV) {
    Print("%s", ArgV[1])
}

i32 ECHO_COMMAND_ID := RegisterCommand("echo", &ExecuteEcho)