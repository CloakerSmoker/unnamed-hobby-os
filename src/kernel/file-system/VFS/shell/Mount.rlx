
define IDirectory* OpenFAT32(BlockDevice* Device) {
	FAT32Device* FATDevice := Alloc(#FAT32Device)
	FATDevice->Initialize(Device)

	FATDevice->ReadHeader()

    return FAT32Directory:New(FATDevice, FATDevice->Header->RootDirectoryCluster)
}

define IDirectory* OpenExt2(BlockDevice* Device) {
    Ext2* FS := Alloc(#Ext2)
	FS->Device := Device
	
	void* SB := Alloc(2048)
	void* TI := Alloc(1024)
	void* TB1 := Alloc(1024)
	void* TB2 := Alloc(1024)
	void* BMP := Alloc(1024)
	
	FS->Initialize(SB, TI, TB1, TB2, BMP)

    Ext2INode* RootINode := CloneMemory(FS->ReadINode(2), #Ext2INode)
    return VFSExt2Directory:New(FS, RootINode)
}

define void ExecuteMount(i64 ArgC, i8** ArgV) {
    if (ArgC != 4) {
        return
    }

    i8* Type := ArgV[1]
    i8* DevicePath := ArgV[2]
    i8* DestinationPath := ArgV[3]

    VFSDirectoryEntry Entry
    if !(Lookup(CurrentDirectory, DevicePath, &Entry)) {
        Print("'%s' does not exist\n", DevicePath)
        return
    }

    if (Entry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' not a file\n", DevicePath)
        return
    }

    IFile* File := Entry.File

    if !(File->Is(GetVFSBlockDeviceFilePrototype())) {
        Print("'%s' not a block device", DevicePath)
        return
    }

    VFSBlockDeviceFile* BlockDeviceFile := File As void*
    BlockDeviceFileHandle* BlockDeviceHandle := BlockDeviceFile->Handle As void*
    BlockDevice* Device := BlockDeviceHandle->Device

    IDirectory* DeviceRoot := null

    if (StringEquals(Type, "ext2")) {
        DeviceRoot := OpenExt2(Device)
    }
    else if (StringEquals(Type, "fat32")) {
        DeviceRoot := OpenFAT32(Device)
    }
    else {
        Print("'%s' unknown FS type\n", DevicePath)
        return
    }

    if (StringEquals(DestinationPath, "/")) {
        MountRoot(DeviceRoot)
        CurrentDirectory := VFSRootDirectory
    }
    else {
        Mount(CurrentDirectory, DestinationPath, DeviceRoot)
    }
}

i32 MOUNT_COMMAND_ID := RegisterCommand("mount", &ExecuteMount)
