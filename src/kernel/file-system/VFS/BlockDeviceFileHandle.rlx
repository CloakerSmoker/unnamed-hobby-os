
class BlockDeviceFileHandle implements IFileHandle, derives INew {
    BlockDevice* Device
    i32 BlockSize

    i32 Offset

    define void New(BlockDevice* Device) {
        this->Device := Device
        this->BlockSize := Device->GetBytesPerBlock() As i32
    }

    define void Status(FileStatus* Out) {
        ;FileGetStatus(this->Handle, Out)
    }

    define i32 Read(void* Buffer, i32 Size) {
        if (Size % this->BlockSize != 0) {
            Throw(HANDLE_ERROR_BAD_PARAMETER)
        }

        i32 BlockCount := Size / this->BlockSize

        this->Device->Read(this->Offset, BlockCount, Buffer)
        this->Offset += BlockCount

        return Size
    }
    define i32 Write(void* Buffer, i32 Size) {
        if (Size % this->BlockSize != 0) {
            Throw(HANDLE_ERROR_BAD_PARAMETER)
        }

        i32 BlockCount := Size / this->BlockSize

        this->Device->Write(this->Offset, BlockCount, Buffer)
        this->Offset += BlockCount

        return Size
    }
    define void Seek(i32 Destination, SeekMode Mode) {
        if (Destination % this->BlockSize != 0) {
            Throw(HANDLE_ERROR_BAD_PARAMETER)
        }

        i32 Block := Destination / this->BlockSize

        if (Mode = SeekMode::Set) {
            this->Offset := Block
        }
        else if (Mode = SeekMode::Offset) {
            this->Offset += Block
        }
    }
    define i32 Tell() {
        return this->Offset
    }
    define void Close() {
        
    }
}

class VFSBlockDeviceFile implements IFile, derives INew {
    IFileHandle* Handle

    define void New(IFileHandle* Handle) {
        this->Handle := Handle
    }

    define i8 IsEphemeral() {
        return false
    }

    define IFileHandle* Open(i32 Flags) {
        return this->Handle
    }
    define void Close(IFileHandle* Handle) {
        
    }
}
