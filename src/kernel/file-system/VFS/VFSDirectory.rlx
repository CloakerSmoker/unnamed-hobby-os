#Require "$/AVLTree.rlx"

declare IDirectoryPrototype* GetVFSDirectoryPrototype()

struct VFSDirectoryEnumerateState {
    i32 Index
    i32 Count
}

struct VFSDirectory {
    #Include "./src/kernel/file-system/VFS/IDirectory.rlx"

    AVLTree* Children ; <VFSDirectoryEntry*>

    static IDirectory* New() {
        self* this := Alloc(#self)

        this->Prototype := GetVFSDirectoryPrototype()
        this->Children := AVLTree:New(#VFSDirectoryEntry)

        return this As IDirectory*
    }

    define i32 Count() {
        return this->Children->Count()
    }
    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        VFSDirectoryEntry* Found := this->Children->Get(FNV1A(Name))

        if (Found) {
            MoveMemory(Result, Found, #VFSDirectoryEntry)
            return true
        }
        else {
            return false
        }
    }

    define void* Enumerate() {
        VFSDirectoryEnumerateState State {
            Count: this->Count(),
            Index: 0
        }

        return *(&State As i64*) As void*
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        VFSDirectoryEnumerateState* State := RawState As void*
        i32 Index := State->Index

        if (Index < State->Count) {
            VFSDirectoryEntry* Entry := this->Children->At(Index)

            MoveMemory(Result, Entry, #VFSDirectoryEntry)
            
            State->Index += 1

            return true
        }
        else {
            return false
        }
    }

    define i8 IsEphemeral() {
        return true
    }

    define IDirectory* CreateDirectory() {
        return VFSDirectory:New()
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        this->Children->Insert(FNV1A(Entry->Name), Entry)

        return true
    }
    define i8 Remove(i8* Name) {
        this->Children->Remove(FNV1A(Name))

        return true
    }
}

IDirectoryPrototype VFSDirectoryPrototype {
    Count: &VFSDirectory.Count,
    Lookup: &VFSDirectory.Lookup,
    Enumerate: &VFSDirectory.Enumerate,
    Next: &VFSDirectory.Next,
    IsEphemeral: &VFSDirectory.IsEphemeral,
    CreateDirectory: &VFSDirectory.CreateDirectory,
    Insert: &VFSDirectory.Insert,
    Remove: &VFSDirectory.Remove
}

define IDirectoryPrototype* GetVFSDirectoryPrototype() {
    return &VFSDirectoryPrototype
}