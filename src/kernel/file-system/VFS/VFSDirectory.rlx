#Require "$/AVLTree.rlx"

#Require "./src/kernel/file-system/VFS/VFSFile.rlx"

struct VFSDirectoryEnumerateState {
    i32 Index
    i32 Count
}

class VFSDirectory implements IDirectory, derives INew {
    AVLTree* Children ; <VFSDirectoryEntry*>

    define void New() {
        this->Children := AVLTree:New(#VFSDirectoryEntry)
    }

    define i32 Count() {
        return this->Children->Count()
    }
    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        VFSDirectoryEntry* Found := this->Children->Get(FNV1A(Name))

        if (Found) {
            MoveMemory(Result, Found, #VFSDirectoryEntry)
            return true
        }
        else {
            return false
        }
    }

    define void* Enumerate() {
        VFSDirectoryEnumerateState State {
            Count: this->Count(),
            Index: 0
        }

        return *(&State As i64*) As void*
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        VFSDirectoryEnumerateState* State := RawState As void*
        i32 Index := State->Index

        if (Index < State->Count) {
            VFSDirectoryEntry* Entry := this->Children->At(Index)

            MoveMemory(Result, Entry, #VFSDirectoryEntry)
            
            State->Index += 1

            return true
        }
        else {
            return false
        }
    }

    define i8 IsEphemeral() {
        return true
    }

    define IDirectory* CreateDirectory() {
        return VFSDirectory:New()
    }

    define IFile* CreateFile() {
        return VFSFile:New(VFSFileHandle:New())
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        this->Children->Insert(FNV1A(Entry->Name), Entry)

        return true
    }
    define i8 Remove(i8* Name) {
        this->Children->Remove(FNV1A(Name))

        return true
    }
}