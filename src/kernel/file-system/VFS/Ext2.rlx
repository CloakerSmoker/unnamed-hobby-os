#Require "$/AVLTree.rlx"

i8 DEBUG_EXT2_OPTIMIZATION := false

#Require "./src/drivers/file-system/Ext2.rlx"

class VFSExt2File implements IFile, derives INew {
    Ext2* FS
    Ext2INode Node

    define void New(Ext2* FS, Ext2INode* Node) {
        this->FS := FS
        MoveMemory(this~>Node, Node, #Ext2INode)
    }

    define i8 IsEphemeral() {
        return false
    }

    define IFileHandle* Open(i32 Flags) {
        return this->FS->OpenINode(this~>Node)
    }
}

struct VFSExt2DirectoryEnumerateState {
    i32 Handle
}

class VFSExt2Directory implements IDirectory, derives INew {
    Ext2* FS
    Ext2INode Node

    AVLTree* Cache ; <i8*, VFSDirectoryEntry>

    define void New(Ext2* FS, Ext2INode* Node) {
        this->FS := FS
        MoveMemory(this~>Node, Node, #Ext2INode)

        this->Cache := AVLTree:New(#VFSDirectoryEntry)
    }

    define i32 Count() {
        i32 Result := 0

        i32 Handle := this->FS->StartWalkDirectory(this~>Node)

        loop {
            Ext2DirectoryEntry* Next := this->FS->WalkDirectoryNext(this~>Node, &Handle)

            if (Next = null) {
                break
            }

            Result += 1
        }

        return Result
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name, Ext2DirectoryEntry* ExistingEntry) {
        i64 NameHash := FNV1A(Name)
        VFSDirectoryEntry* ExistingCacheEntry := this->Cache->Get(NameHash)

        if (ExistingCacheEntry) {
            return ExistingCacheEntry
        }
        
        Ext2DirectoryEntry* Entry := ExistingEntry

        if (Entry = null) {
            Entry := this->FS->FindDirectoryEntryByName(this~>Node, Name)
        }

        VFSDirectoryEntry NewCacheEntry {
            Name: CloneMemory(Name, StringLength(Name) + 1)
        }

        if (Entry = null) {
            NewCacheEntry.Type := VFSDirectoryEntryType::Hole
        }
        else {
            Ext2INode* Node := this->FS->ReadINode(Entry->INode)

            if (Node->IsDirectory()) {
                NewCacheEntry.Type := VFSDirectoryEntryType::Directory
                NewCacheEntry.Directory := VFSExt2Directory:New(this->FS, Node)
            }
            else if (Node->IsFile()) {
                NewCacheEntry.Type := VFSDirectoryEntryType::File
                NewCacheEntry.File := VFSExt2File:New(this->FS, Node)
            }
            else {
                return null
            }
        }

        this->Cache->Insert(NameHash, &NewCacheEntry)

        return this->Cache->Get(NameHash)
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name) {
        return this->FindOrCacheEntry(Name, null)
    }

    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        VFSDirectoryEntry* Entry := this->FindOrCacheEntry(Name)

        if (Entry) {
            if (Entry->Type != VFSDirectoryEntryType::Hole) {
                MoveMemory(Result, Entry, #VFSDirectoryEntry)
                return true
            }
        }
        
        return false
    }

    define void* Enumerate() {
        VFSExt2DirectoryEnumerateState State {
            Handle: this->FS->StartWalkDirectory(this~>Node)
        }

        return *(&State As i64*) As void*
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        VFSExt2DirectoryEnumerateState* State := RawState As void*

        Ext2DirectoryEntry* Next := this->FS->WalkDirectoryNext(this~>Node, State~>Handle)

        if (Next) {
            i8[100] NameBuffer

            MoveMemory(NameBuffer, Next->Name, Next->NameLength)
            NameBuffer[Next->NameLength] := 0

            VFSDirectoryEntry* Cached := this->FindOrCacheEntry(NameBuffer, Next)

            if (Cached) {
                if (Cached->Type = VFSDirectoryEntryType::Hole) {
                    return this->Next(RawState, Result)
                }
                else {
                    MoveMemory(Result, Cached, #VFSDirectoryEntry)
                    return true
                }
            }
        }
        
        return false
    }

    define i8 IsEphemeral() {
        return false
    }

    define IDirectory* CreateDirectory() {
        i32 DirectoryNodeNumber := this->FS->CreateDirectory()

        return VFSExt2Directory:New(this->FS, this->FS->ReadINode(DirectoryNodeNumber))
    }
    define IFile* CreateFile() {
        i32 FileNodeNumber := this->FS->CreateFile()

        return VFSExt2File:New(this->FS, this->FS->ReadINode(FileNodeNumber))
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        ;this->Children->Insert(FNV1A(Entry->Name), Entry)

        i8 Type := 0
        i32 ChildNodeNumber := 0

        if (Entry->Type = VFSDirectoryEntryType::Directory) {
            if (Entry->Directory->TypeID() != typeid:(VFSExt2Directory)) {
                return false
            }
                
            Type := DIRECTORY_ENTRY_DIRECTORY
            VFSExt2Directory* Directory := Entry->Directory
            ChildNodeNumber := Directory~>Node->INodeNumber
        }
        else if (Entry->Type = VFSDirectoryEntryType::File) {
            if (Entry->File->TypeID() != typeid:(VFSExt2File)) {
                return false
            }
            
            Type := DIRECTORY_ENTRY_FILE
            VFSExt2File* File := Entry->File
            ChildNodeNumber := File~>Node->INodeNumber
        }

        this->FS->CreateDirectoryEntry(this~>Node, Entry->Name, ChildNodeNumber, Type)
        this->Cache->Insert(FNV1A(Entry->Name), Entry)

        return true
    }
    define i8 Remove(i8* Name) {
        ;this->Children->Remove(FNV1A(Name))

        return true
    }
}
