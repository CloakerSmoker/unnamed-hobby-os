#Require "./src/drivers/file-system/FAT32.rlx"

declare IDirectoryPrototype* GetFAT32DirectoryPrototype()

struct FAT32DirectoryEnumerateState {
    i32 Handle
}

struct FAT32Directory {
    #Include "./src/kernel/file-system/VFS/IDirectory.rlx"

    FAT32Device* FS
    i32 Cluster

    AVLTree* Cache ; <i8*, VFSDirectoryEntry>

    static IDirectory* New(FAT32Device* FS, i32 Cluster) {
        self* this := Alloc(#self)

        this->Prototype := GetFAT32DirectoryPrototype()

        this->FS := FS
        this->Cluster := Cluster
        this->Cache := AVLTree:New(#VFSDirectoryEntry)
        
        return this As void*
    }

    define i32 Count() {
        i32 Count := 0
        i32 State := this->FS->StartWalkDirectory(this->Cluster)

        loop {
            FAT32DirectoryEntry* Next := this->FS->WalkDirectoryNext(this->Cluster, &State)

            if (Next = null) {
                break
            }

            Count += 1
        }

        return Count
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name, FAT32DirectoryEntry* ExistingEntry) {
        i64 NameHash := FNV1A(Name)
        VFSDirectoryEntry* ExistingCacheEntry := this->Cache->Get(NameHash)

        if (ExistingCacheEntry) {
            return ExistingCacheEntry
        }
        
        FAT32DirectoryEntry* Entry := ExistingEntry

        if (Entry = null) {
            Entry := this->FS->FindDirectoryEntryByName(this->Cluster, Name)
        }

        VFSDirectoryEntry NewCacheEntry {
            Name: CloneMemory(Name, StringLength(Name) + 1)
        }

        if (Entry = null) {
            NewCacheEntry.Type := VFSDirectoryEntryType::Hole
        }
        else {
            if (Entry->IsDirectory()) {
                NewCacheEntry.Type := VFSDirectoryEntryType::Directory
                NewCacheEntry.Directory := FAT32Directory:New(this->FS, Entry->GetFirstCluster())
            }
            else if (Entry->IsFile()) {
                NewCacheEntry.Type := VFSDirectoryEntryType::File
            }
            else {
                return null
            }
        }

        this->Cache->Insert(NameHash, &NewCacheEntry)

        return this->Cache->Get(NameHash)
    }

    define VFSDirectoryEntry* FindOrCacheEntry(i8* Name) {
        return this->FindOrCacheEntry(Name, null)
    }

    define i8 Lookup(i8* Name, VFSDirectoryEntry* Result) {
        VFSDirectoryEntry* Entry := this->FindOrCacheEntry(Name)

        if (Entry) {
            if (Entry->Type != VFSDirectoryEntryType::Hole) {
                MoveMemory(Result, Entry, #VFSDirectoryEntry)
                return true
            }
        }

        return false
    }

    define void* Enumerate() {
        FAT32DirectoryEnumerateState State {
            Handle: this->FS->StartWalkDirectory(this->Cluster)
        }

        return *(&State As i64*) As void*
    }
    define i8 Next(void** RawState, VFSDirectoryEntry* Result) {
        FAT32DirectoryEnumerateState* State := RawState As void*

        FAT32DirectoryEntry* Next := this->FS->WalkDirectoryNext(this->Cluster, State~>Handle)

        if (Next) {
            i8[128] NameBuffer
            Next->GetName(NameBuffer)

            VFSDirectoryEntry* Cached := this->FindOrCacheEntry(NameBuffer, Next)

            if (Cached) {
                if (Cached->Type = VFSDirectoryEntryType::Hole) {
                    return this->Next(RawState, Result)
                }
                else {
                    MoveMemory(Result, Cached, #VFSDirectoryEntry)
                    return true
                }
            }
        }
        
        return false
    }

    define i8 IsEphemeral() {
        return false
    }

    define IDirectory* CreateDirectory() {
        i32 DirectoryClusterNumber := this->FS->AllocateCluster()

        return FAT32Directory:New(this->FS, DirectoryClusterNumber)
    }
    define IFile* CreateFile() {
        i32 FileClusterNumber := this->FS->AllocateCluster()

        return null
    }

    define i8 Insert(VFSDirectoryEntry* Entry) {
        ;this->Children->Insert(FNV1A(Entry->Name), Entry)

        Print("PANIC: FAT32 WRITE\n")

        return true
    }
    define i8 Remove(i8* Name) {
        ;this->Children->Remove(FNV1A(Name))

        return true
    }
}

IDirectoryPrototype FAT32DirectoryPrototype {
    Count: &FAT32Directory.Count,
    Lookup: &FAT32Directory.Lookup,
    Enumerate: &FAT32Directory.Enumerate,
    Next: &FAT32Directory.Next,
    IsEphemeral: &FAT32Directory.IsEphemeral,
    Insert: &FAT32Directory.Insert,
    Remove: &FAT32Directory.Remove
}

define IDirectoryPrototype* GetFAT32DirectoryPrototype() {
    return &FAT32DirectoryPrototype
}