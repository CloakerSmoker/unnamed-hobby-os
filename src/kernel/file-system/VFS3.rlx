#Require "$/Console.rlx"
#Require "$/AVLTree.rlx"
#Require "$/Debug.rlx"

define void SchedulerYield() {}

define void Info(i8* Format, ... Args) {
    RawPrint(Format, Args)
}

#Require "./src/kernel/file-system/VFS/VFS.rlx"
#Require "./src/kernel/file-system/VFS/VFSDirectory.rlx"
#Require "./src/kernel/file-system/VFS/VFSOverlayDirectory.rlx"

#Require "./src/kernel/file-system/VFS/Ext2.rlx"
#Require "./src/kernel/file-system/VFS/FAT32.rlx"
#Require "./src/kernel/file-system/VFS/Host.rlx"

#Require "./src/kernel/file-system/VFS/Root.rlx"

define void ls(IDirectory* Directory) {
    Print("\nListing %i entries:\n", Directory->Count())

    void* State := Directory->Enumerate()
    i32 Count := 0
    VFSDirectoryEntry Entry

    while (Directory->Next(&State, &Entry)) {
        if (Entry.Type = VFSDirectoryEntryType::Directory) {
            Print("%i %s/\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::File) {
            Print("%i %s\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::Hole) {
            Print("%i %s (hole)\n", Count, Entry.Name)
        }

        Count += 1
    }
}

define void TreeIndent(i32 Depth) {
    for (i32 Index := 0, Index < Depth, Index++) {
        Print("    ")
    }
}

define void tree(IDirectory* Directory, i32 Depth) {
    void* State := Directory->Enumerate()
    VFSDirectoryEntry Entry
    i32 Count := 0

    while (Directory->Next(&State, &Entry)) {
        TreeIndent(Depth)

        if (Entry.Type = VFSDirectoryEntryType::Directory) {
            Print("%i %s/\n", Count, Entry.Name)

            if (Entry.Name[0] != '.') {
                tree(Entry.Directory, Depth + 1)
            }
        }
        else if (Entry.Type = VFSDirectoryEntryType::File) {
            Print("%i %s\n", Count, Entry.Name)
        }
        else if (Entry.Type = VFSDirectoryEntryType::Hole) {
            Print("%i %s (hole)\n", Count, Entry.Name)
        }

        Count += 1
    }
}

define void tree(IDirectory* Directory) {
    tree(Directory, 0)
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/FileBlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

define IDirectory* OpenFAT32(i8* Path) {
    BlockDevice* Device := InstantiateBlockDeviceChainFromPath(Path)

	FAT32Device* FATDevice := Alloc(#FAT32Device)
	FATDevice->Initialize(Device)

	FATDevice->ReadHeader()

    return FAT32Directory:New(FATDevice, FATDevice->Header->RootDirectoryCluster)
}

define IDirectory* OpenExt2(i8* Path) {
    BlockDevice* Device := InstantiateBlockDeviceChainFromPath(Path)

    Ext2* FS := Alloc(#Ext2)
	FS->Device := Device
	
	void* SB := Alloc(2048)
	void* TI := Alloc(1024)
	void* TB1 := Alloc(1024)
	void* TB2 := Alloc(1024)
	void* BMP := Alloc(1024)
	
	FS->Initialize(SB, TI, TB1, TB2, BMP)

    Ext2INode* RootINode := CloneMemory(FS->ReadINode(2), #Ext2INode)
    return VFSExt2Directory:New(FS, RootINode)
}

define IDirectory* OpenHostDirectory(i8* Path) {
    i64 Handle := FileOpen(Path, FILE_READ)

    return VFSHostDirectory:New(Handle)
}

define void Main(i32 ArgC, i8** ArgV) {
    Print("Hello!\n")

    IDirectory* FAT32Root := OpenFAT32(ArgV[1])
    IDirectory* Ext2Root := OpenExt2(ArgV[2])
    IDirectory* HostRoot := OpenHostDirectory(ArgV[3])

    ;tree(FAT32Root)

    MountRoot(Ext2Root)

    VFSDirectoryEntry EFIEntry
    FAT32Root->Lookup("EFI", &EFIEntry)

    Mount("efi", EFIEntry.Directory)

    tree(VFSRootDirectory)

    Mount("host", HostRoot)

    ;Mount("bin/mount/nuts", VFSExt2Directory:New(FS, RootINode))

    ;ls(VFSRootDirectory)

    VFSDirectoryEntry Entry
    if !(Lookup("nuts", &Entry)) {
        ;CreateDirectory("nuts")
    }

    Mount("mount", Ext2Root)
 
    ;Print("%s, %i\n", Entry.Name, Entry.Type)

    CreateDirectory("mount/123test")

    Print("Final State:\n")

    tree(VFSRootDirectory)

/*    ls(RootDirectory)

    VFSDirectoryEntry Result
    RootDirectory->Lookup("nuts.elf", &Result)

    ls(RootDirectory)

    Print("Cache size: %i\n", (RootDirectory As VFSExt2Directory*)->Cache->Count())*/

/*    IDirectory* Base := VFSDirectory:New()
    IDirectory* Overlay := VFSDirectory:New()

    VFSDirectoryEntry Entry {
        Name: "nuts",
        Type: VFSDirectoryEntryType::File,
        File: IFile:New("test file 1")
    }

    Print("Type: %x\n", Entry.Type)

    Base->Insert(&Entry)

    IDirectory* Directory := VFSOverlayDirectory:New(Base, Overlay)

    ls(Directory)

    VFSDirectoryEntry NegativeEntry {
        Name: "nuts",
        Type: VFSDirectoryEntryType::Hole
    }

    Overlay->Insert(&NegativeEntry)

    ls(Directory)

    VFSDirectoryEntry Entry2 {
        Name: "nuts",
        Type: VFSDirectoryEntryType::File,
        File: IFile:New("override test file")
    }

    Overlay->Insert(&Entry2)

    ls(Directory)

    Overlay->Remove("nuts")

    ls(Directory)

    Directory->Remove("nuts")

    ls(Directory)
    ls(Base)*/
}