
#Require "./src/utility/AVLTree.rlx"

struct MagicFileMinorRange {
	i32 First
	i32 Count
}

struct MagicFilePrototype {
	FileHandlePrototype* Prototype
	i8 MultipleInstances

	FileHandle* Instance
	
	i32 Major
	
	union {
		i32 Minor
		MagicFileMinorRange MinorRange
	}

	define FileHandle* GetInstance() {
		if (this->Instance && !this->MultipleInstances) {
			return this->Instance
		}
		else {
			this->Instance := NewHandle(this->Prototype, this->Major, this->Minor)

			return this->Instance
		}
	}
	
	MagicFilePrototype* Next
	
	define void Status(FileStatus* Out) {
		Out->Mode := 0o777 | FILE_STATUS_MODE_IS_CHARACTER_DEVICE
		
		; TODO: this is a FileHandlePrototype and not a MagicFilePrototype so below won't work
		;Out->Device := ((this->Major As i64) << 32) | this->Minor
	}
}

MagicFilePrototype* FirstMagicPrototype := null

define i32 RegisterMagicFile(MagicFilePrototype* Prototype) {
	FileHandlePrototype* File := Prototype->Prototype
	
	if (File->Status = null || File->Status = &FileHandlePrototype.DefaultStatus) {
		File->Status := &MagicFilePrototype.Status
	}
	
	if !(FirstMagicPrototype) {
		FirstMagicPrototype := Prototype
	}
	else {
		Prototype->Next := FirstMagicPrototype
		FirstMagicPrototype := Prototype
	}
	
	return 10
}

define MagicFilePrototype* FindMagicFilePrototype(i32 Major, i32 Minor) {
	MagicFilePrototype* Current := FirstMagicPrototype
	
	while (Current) {
		if (Current->Major = Major) {
			i32 Start := Current~>MinorRange->First
			i32 End := Start + Current~>MinorRange->Count
			
			if (Start <= Minor && Minor <= End) {
				return Current
			}
		}
		
		Current := Current->Next
	}
	
	return null
}