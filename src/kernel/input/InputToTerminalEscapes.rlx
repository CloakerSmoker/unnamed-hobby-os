
#Require "./src/kernel/input/Keys.rlx"

struct InputToTerminalEscapesStream {
	void* State
	void(void*, i8*, i32) WriteOutput
	
	define void Output(void* Characters, i32 Count) {
		this->WriteOutput(this->State, Characters, Count)
	}
	
	define void OutputXTerm(i8 Modifiers, i8 Character) {
		i8[10] OutputBuffer
		
		if (Modifiers) {
			Modifiers++
			
			; TODO: Switch back to this once host tools can use new Print()
			;i32 Length := FormatString(OutputBuffer, 10, "\e[1;%i%c", Modifiers, Character)
			;this->Output->Write(OutputBuffer, Length)
			
			this->Output("\e[1;", 4)
			
			i8 Temp := NumberToCharacter(Modifiers)
			this->Output(&Temp, 1)
			
			this->Output(&Character, 1)
			
		}
		else {
			this->Output("\e[", 2)
			this->Output(&Character, 1)
		}
	}
	
	define void OutputVT(i8 Modifiers, i8 Code) {
		i8[10] OutputBuffer
		
		if (Modifiers) {
			Modifiers++
			
			; TODO: Same as above
			;i32 Length := FormatString(OutputBuffer, 10, "\e[%c;%i~", Code, Modifiers)
			;this->Output(OutputBuffer, Length)
			
			this->Output("\e[", 2)
			this->Output(&Code, 1)
			this->Output(";", 1)
			
			i8 Temp := NumberToCharacter(Modifiers)
			this->Output(&Temp, 1)
			
			this->Output("~", 1)
		}
		else {
			this->Output("\e[", 2)
			this->Output(&Code, 1)
			this->Output("~", 1)
		}
	}
	
	define void OnInput(i8 Modifiers, i32 KeyCode) {
		if (KEY_ASCII_BASE <= KeyCode && KeyCode <= KEY_ASCII_LAST) {
			i8 AToZ := ('a' <= KeyCode && KeyCode <= 'z')
			
			if (Modifiers & KEY_MODIFIER_SHIFT = KEY_MODIFIER_SHIFT) {
				; shift + lowercase_letter = uppercase_letter

				Modifiers ^= KEY_MODIFIER_SHIFT
				
				if (AToZ) {
					KeyCode ^= 0x20
					
					AToZ := false
				}
				else if ('0' <= KeyCode && KeyCode <= '9') {
					i8* ShiftedNumbers := i8[')', '!', '@', '#', '$', '%', '^', '&', '*', '(']
					KeyCode := ShiftedNumbers[KeyCode - '0']
				}
				else if (',' <= KeyCode && KeyCode <= '/') {
					i8* ShiftedMisc := i8['<', '_', '>', '?']
					KeyCode := ShiftedMisc[KeyCode - ',']
				}
				else if (KeyCode = ''') {
					KeyCode := '"'
				}
				else if (KeyCode = ';') {
					KeyCode := ':'
				}
				else if (KeyCode = '[') {
					KeyCode := '{'
				}
				else if (KeyCode = ']') {
					KeyCode := '}'
				}
				else if (KeyCode = '=') {
					KeyCode := '+'
				}
				else if (KeyCode = '\') {
					KeyCode := '|'
				}
			}
			
			if (Modifiers = 0) {
				this->Output(&KeyCode, 1)
			}
			else if (Modifiers & KEY_MODIFIER_ALT = Modifiers) {
				this->Output("\e[", 2)
				this->Output(&KeyCode, 1)
			}
			else if (Modifiers & KEY_MODIFIER_CONTROL = Modifiers && AToZ) {
				i8 Character := (KeyCode - 'a' + 1) As i8
				
				this->Output(&Character, 1)
			}
			else {
				Modifiers++
				
				; TODO: You know the drill
				;i8[10] OutputBuffer
				;i32 Length := FormatString(OutputBuffer, 10, "\e[%i%c", Modifiers, KeyCode)
				;this->Output(OutputBuffer, Length)
				
				this->Output("\e[", 2)
				
				i8 Temp := NumberToCharacter(Modifiers)
				this->Output(&Temp, 1)
				
				this->Output(&KeyCode, 1)
			}
		}
		else {
			if (KEY_UP <= KeyCode && KeyCode <= KEY_LEFT) {
				i8 XTermArrow := ((KeyCode - KEY_UP) + 'A') As i8
				
				this->OutputXTerm(Modifiers, XTermArrow)
			}
			else if (KeyCode = KEY_END) {
				this->OutputXTerm(Modifiers, 'F')
			}
			else if (KeyCode = KEY_HOME) {
				this->OutputXTerm(Modifiers, 'H')
			}
			else if (KeyCode = KEY_INSERT) {
				this->OutputVT(Modifiers, '2')
			}
			else if (KeyCode = KEY_DELETE) {
				this->OutputVT(Modifiers, '3')
			}
			else if (KeyCode = KEY_PAGE_UP) {
				this->OutputVT(Modifiers, '5')
			}
			else if (KeyCode = KEY_PAGE_DOWN) {
				this->OutputVT(Modifiers, '6')
			}
		}
	}
	
}