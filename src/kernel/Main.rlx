

#Require "$/MemoryBase.rlx"
#Require "$/StringBase.rlx"

declare void TerminateAfterUnhandledException(i64)

#Require "$/ExceptionBase.rlx"

#Require "./src/utility/x64.rlx"

declare void Info(i8*, ...)
declare void Print(i8*, ...)

#Require "./src/bootloader/BootInfo.rlx"
#Require "./src/trampoline/Info.rlx"

TrampolineInfo* Trampoline
;KernelInfo* Kernel
BootloaderInfo* BootInfo

#Require "./src/kernel/core/Paging.rlx"
#Require "$/Memory.rlx"
#Require "$/String.rlx"

; Config extracts

void* BOOT_FONT_FON := i8[#File "./misc/fonts/OlivettiThin_8x14.fon"]

;#PhysicalImageBase 0x20_0000
;i64 PHYSICAL_ADDRESS_OF_KERNEL := 0x20_0000

#ImageBase 0x7F00_0000_0000
void* ADDRESS_OF_KERNEL       := 0x7F00_0000_0000 As void*

; end

#Require "./src/kernel/Config.rlx"

define void PrintCharacter(i8 Character) {
	; Pre-terminal print function
}
define void PrintCharacters(i8* Character, i32 Count) {
	; Pre-terminal print function
}

#Require "$/Print.rlx"

#Require "./src/kernel/core/PageHeap.rlx"
;#Require "./src/kernel/core/Heap.rlx"
#Require "./src/kernel/core/PalHeap.rlx"

PageHeap* PhysicalMemory
AddressSpaceManager* KernelAddressSpace
PalHeap* KernelHeap

define void PreMain(TrampolineInfo* Info) {
	; Called before main by the bootloader

	Trampoline := Info
	BootInfo := Info~>BootInfo

	PhysicalMemory := Trampoline->PhysicalMemory
	KernelAddressSpace := Trampoline~>VirtualMemory
	KernelHeap := Trampoline~>Heap
}

define i64 VirtualToPhysical(void* RawVirtual) {
	i64 VirtualAddress := RawVirtual As i64
	i64 Lower := VirtualAddress & 0xFFF

	return KernelAddressSpace->VirtualToPhysical(RawVirtual) | Lower
}

define void* KernelHeapAllocate(i64 Tag, i32 Size) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Allocate(%l, %x) = ", Tag, Size)
		void* Result := KernelHeap->Allocate(Size)
		Info("%x ", Result)

		AllocatorUsage Usage
		Usage.Zero()
		KernelHeap->GetUsage(&Usage)
		
		Info("(Usage Percent: %i%%)\n", GetUsagePercent(&Usage))

		;KernelHeap->DumpAllocations()

		return Result
	}
	else {
		return KernelHeap->Allocate(Size)
	}
}
define void* KernelHeapExtendAllocation(void* Memory, i32 Size) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Extend(%x, %x) = ", Memory, Size)
		void* Result := KernelHeap->Extend(Memory, Size)
		Info("%x\n", Result)
		return Result
	}
	else {
		return KernelHeap->Extend(Memory, Size)
	}
}
define void KernelHeapFree(void* Memory) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Free(%x)\n", Memory)
		KernelHeap->Free(Memory)
	}
	else {
		KernelHeap->Free(Memory)
	}
}

PageHeap* KernelPageAllocator

#Require "./src/utility/PrintHelpers.rlx"
#Require "./src/utility/DebugOutput.rlx"

#Require "./src/kernel/graphics/PixelBuffer.rlx"
#Require "./src/kernel/graphics/Font.rlx"

PixelBuffer* PrimaryDisplay

#Require "./src/kernel/core/Descriptors.rlx"

#Require "./src/utility/Exception.rlx"

declare void SchedulerYield()

#Require "./src/kernel/core/Interrupts.rlx"

#Require "./src/kernel/time/Tick.rlx"
#Require "./src/kernel/time/Sleep.rlx"

#Require "./src/drivers/HPET.rlx"
HPETDriver::HPET* HPET := null
#Require "./src/kernel/time/sources/HPET.rlx"

#Require "./src/drivers/PIT.rlx"
#Require "./src/kernel/time/sources/PIT.rlx"

#Require "./src/kernel/core/Devices.rlx"

#Require "./src/kernel/multitasking/Tasks.rlx"
#Require "./src/kernel/multitasking/Scheduler.rlx"
#Require "./src/kernel/multitasking/Timers.rlx"
#Require "./src/kernel/user-mode/Process.rlx"

#Require "./src/kernel/graphics/LoadFON.rlx"
#Require "./src/kernel/graphics/BMPOutput.rlx"

; Terminal print functions

#Require "./src/kernel/terminal/Terminal.rlx"
#Require "./src/kernel/terminal/Input.rlx"
#Require "./src/kernel/terminal/Renderer.rlx"

IFileHandle* KernelTerminal

define void KernelPrintCharacter(PrintOutputAdapterPrototype* this, i8 Character) {
	KernelTerminal->Write(&Character, 1)
}
define void KernelPrintCharacters(PrintOutputAdapterPrototype* this, i8* Characters, i32 Count) {
	KernelTerminal->Write(Characters, Count)
}

PrintOutputAdapterPrototype KernelPrinter {
	PrintCharacter: &KernelPrintCharacter,
	PrintCharacters: &KernelPrintCharacters
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/ATABlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

#Require "./src/kernel/file-system/VFS/VFS.rlx"
#Require "./src/kernel/file-system/VFS/VFSDirectory.rlx"
#Require "./src/kernel/file-system/VFS/VFSOverlayDirectory.rlx"
#Require "./src/kernel/file-system/VFS/Root.rlx"

#Require "./src/kernel/file-system/VFS/Device.rlx"

#Require "./src/kernel/file-system/VFS/Ext2.rlx"
#Require "./src/kernel/file-system/VFS/FAT32.rlx"

#Require "./src/kernel/file-system/VFS/DirectoryFileHandle.rlx"
#Require "./src/kernel/file-system/VFS/BlockDeviceFileHandle.rlx"
#Require "./src/kernel/file-system/VFS/ZeroDevice.rlx"

#Require "./src/kernel/graphics/FrameBufferFileHandle.rlx"

IDirectory* VFSDevicesDirectory := null

#Require "./src/kernel/file-system/KernelShell.rlx"

#Require "./src/kernel/system-calls/SystemCalls.rlx"

#Require "./src/kernel/core/Shell.rlx"

#Require "./src/drivers/PCI/PCI.rlx"
#Require "./src/drivers/PCI/PCIe.rlx"

;#Require "./src/drivers/networking/E1000.rlx"

#Require "./src/kernel/networking/Stack.rlx"

#Require "./src/kernel/networking/Loopback.rlx"
#Require "./src/drivers/networking/E1000.rlx"

#Require "./src/drivers/ICH9/AHCI.rlx"
#Require "./src/drivers/block-device/ICH9/PortBlockDevice.rlx"

ICH9::AHCI::Controller* SATAController := null

#Require "./src/drivers/USB/EHCI/EHCI.rlx"

define void VisitPCIeFunction(i32 Bus, i32 Slot, i32 Function, PCIeDevice* Device) {
	Print("%x/%x/%x:\n\t%pcie-product\n\t%pcie-purpose\n", Bus, Slot, Function, Device, Device)

	if (Device->Status & PCI_STATUS_REGISTER_HAS_CAPABILITIES) {
		Print("\tHas Capabilities: ")
		;Print("\tCaps @ %x\n", Device->CapabilitiesPointer)
		;Print("\tOffset %x + %x\n", Device, (Device~>CapabilitiesPointer As i64) - (Device As i64))
		;Print("\tOffset %x + %x\n", Device, (Device~>FirstCapability As i64) - (Device As i64))

		PCICapability* Current := Device->FirstPCICapability()

		loop {
			Print("%x ", Current->ID & 0xFF)

			if (Current->Next = 0) {
				break
			}

			Current := Device->NextPCICapability(Current)
		}

		Print("\n")

		if (Device->ClassCode = PCI_CLASS_CODE_NETWORK_CONTROLLER && Device->SubClass = PCI_SUBCLASS_NETWORK_ETHERNET) {
			;Print("Network interface\n", Device->VendorID, Device->DeviceID)
			
			if (Device->VendorID = PCI_VENDOR_INTEL && Device->DeviceID = PCI_DEVICE_INTEL_82574L) {
				Print("Found E1000\n")

				;if (false) {

				Device->EnableMSI(19)

				E1000* Adapter := Alloc('E1000', #E1000)
				Adapter->Initialize(Device)
				Adapter->Setup()

				Network->AddInterface(MakeNetworkInterfaceFromE1000(Adapter))
				;}
			}
		}
		else if (Device->ClassCode = PCI_CLASS_CODE_MASS_STORAGE_CONTROLLER && Device->SubClass = PCI_SUBCLASS_SATA_CONTROLLER) {
			Print("SATA Controller found:\n%hexdump\n", Device, 0x40)

			Info("SATA Controller %x:%x\n", Device->VendorID, Device->DeviceID)
			Info("Supports MSI? %i\n", Device->CanUseMSI())

			;if (false) {
			Info("SATA MAP: %b\n", *((Device + 0x90) As i16*))

			SATAController := Alloc(#ICH9::AHCI::Controller)
			SATAController->Initialize(Device)
			;}
		}
	}

	if (Device->Is(PCI_CLASS_CODE_SERIAL_BUS_CONTROLLER, PCI_SUBCLASS_USB_CONTROLLER, PCI_INTERFACE_EHCI)) {
		Print("\tFound EHCI controller!\n")

		EHCIController* Controller := EHCIController:New(Device)

		Print("\t%i ports present\n", Controller->PortCount)

		Controller->Configure()

		Print("\tConfigured\n")

		for (i32 Index := 0, Index < Controller->PortCount, Index++) {
			PortStatus Status := *Controller->GetPort(Index)

			Print("PortStatus %i @ %x\n", Index, Status)

			if (Status->CurrentConnectStatus) {
				Print("\tPort %i connected\n", Index)
			}
		}

		SleepMS(200000)
	}
}

Task _KernelSetupTask
Task* KernelSetupTask := &_KernelSetupTask

;#Require "./src/kernel/graphics/DoubleBuffer.rlx"

#Require "./src/kernel/networking/Stack.rlx"

;#Require "./src/kernel/networking/DHCP.rlx"

#Require "./src/kernel/networking/Main.rlx"

define void InitializeTerminal() {
	DefaultTerminalInput := new TerminalInputStreamHandle()

	IFileHandle* PCSpeaker := new PCSpeakerHandle()
	TerminalRendererHandle* Renderer := new TerminalRendererHandle(PCSpeaker, PrimaryDisplay, BootFont, TERMINAL_FOREGROUND, TERMINAL_BACKGROUND)
	Renderer->SetCursorTimer()
	DefaultTerminalOutput := Renderer
	
	KernelTerminal := new TerminalHandle(DefaultTerminalInput, DefaultTerminalOutput)
}

define void PopulateDevicesDirectory(IDirectory* DevicesDirectory) {
	; Virtual Devices: /dev/zero

    DevicesDirectory->Insert("zero", ZeroDeviceFile:New())

	; Serial ports: /dev/ttySX

	for (i32 Index := 0, Index < 4, Index++) {
		DevicesDirectory->Insert(FormatString("ttyS%i", Index), new VFSDeviceSingletonFile(new SerialPortHandle(Index)))
	}

	; Terminal: /dev/tty0

	DevicesDirectory->Insert("tty0", VFSDeviceSingletonFile:New(KernelTerminal))

	; Framebuffer: /dev/fb0

	DevicesDirectory->Insert("fb0", new VFSDeviceSingletonFile(new FrameBufferFileHandle(PrimaryDisplay)))

	; /dev/disk

	IDirectory* DiskDirectory := DevicesDirectory->CreateDirectory()
	DevicesDirectory->Insert("disk", DiskDirectory)

	; /dev/disk/gpt

	IDirectory* GPTDirectory := DiskDirectory->CreateDirectory()
	DiskDirectory->Insert("gpt", GPTDirectory)

	; SATA Devices: /dev/sataX
	; (and maybe: /dev/gpt/{partuuid})

	i32 PopulatedPortCount := SATAController->Ports->Count()

	for (i32 Index := 0, Index < PopulatedPortCount, Index++) {
		ICH9::AHCI::DevicePort* Port := SATAController->Ports->At(Index)

		if (Port->Type = SATA::DeviceType::SATA) {
			Port->EnableInterrupts()
			Port->StartCommands()

			Port->Identify()

			Print("SATA Device %i is a %s, SN: %s\n", Port->Index, Port->Model, Port->SerialNumber)

			BlockDevice* Device := ICH9::AHCI::PortBlockDevice:New(Port)
			IFileHandle* Handle := BlockDeviceFileHandle:New(Device)
			IFile* File := VFSBlockDeviceFile:New(Handle)

			DevicesDirectory->Insert(FormatString("sata%i", Index), File)

			GPTDevice* GPT := GPTDevice:New(Device)

			GPT->ReadHeader(1)

			if !(CompareMemory(GPT->Header->Signature, "EFI PART", 8)) {
				Free(GPT)
				continue
			}

			for (i32 Partition := 0, Partition < GPT->Header->PartitionEntryCount, Partition++) {
				GPTPartitionEntry* NextPartition := GPT->ReadPartitionEntry(Partition)

				if (NextPartition->StartingLBA = 0 && NextPartition->EndingLBA = 0) {
					continue
				}

				i8* FileName := FormatString("sata%ip%i", Index, Partition)

				if (DevicesDirectory->Has(FileName)) {
					Free(FileName)
					continue
				}

				i8* GUIDName := FormatString("%guid", NextPartition~>PartitionGUID)

				BlockDevice* PartitionDevice := GPTBlockDevice:New(Device, NextPartition)
				IFileHandle* PartitionHandle := BlockDeviceFileHandle:New(PartitionDevice)
				IFile* PartitionFile := VFSBlockDeviceFile:New(PartitionHandle)

				DevicesDirectory->Insert(FileName, PartitionFile)
				GPTDirectory->Insert(GUIDName, PartitionFile)
			}
		}
	}
}

define void VFSRunShellTask() {
    VFSExecuteShellCommand("execute /doom/doom.elf -iwad /doom/DOOM.WAD")
	;VFSRunShell(KernelTerminal)
}

#Require "./src/kernel/file-system/VFS/DirectoryFileHandle.rlx"

define void ExecuteExecute(i32 ArgC, i8** ArgV) {
    i8* Path := ArgV[1]

    VFSDirectoryEntry Entry
    if !(Lookup(CurrentDirectory, Path, &Entry)) {
        Print("'%s' does not exist\n", Path)
        return
    }

    if (Entry.Type != VFSDirectoryEntryType::File) {
        Print("'%s' not a file\n", Path)
        return
    }

    IFile* InputFile := Entry.File
    IFileHandle* Input := InputFile->Open()

	Input->Seek(SeekMode::End, 0)
	i32 Size := Input->Tell()
	Input->Seek(SeekMode::Set, 0)

	void* Buffer := Alloc(Size)
	Input->Read(Buffer, Size)

	i8*[1] Environment {"USER=root"}

	ExecuteParameters Parameters {
		WorkingDirectory: new GenericDirectoryFileHandle(CurrentDirectory),

		StandardInput: DefaultTerminalInput,
		StandardOutput: DefaultTerminalOutput,
		StandardError: DefaultTerminalOutput,

		ArgumentCount: ArgC - 1,
		Arguments: &ArgV[1],

		EnvironmentCount: 1,
		Environment: Environment
	}

	Execute(Buffer, &Parameters)
}

i32 EXECUTE_COMMAND_ID := RegisterCommand("execute", &ExecuteExecute)

struct OpenFSErrors {
	i8* NoEntry
	i8* NotABlockDevice
}

OpenFSErrors OpenRootErrors {
	NoEntry: "Could not find real root device. Good luck, you're on your own.",
	NotABlockDevice: "Real root device is not a block device. Good luck, you're on your own."
}

OpenFSErrors OpenEFISystemErrors {
	NoEntry: "Could not find EFI system device. Something's very broken.",
	NotABlockDevice: "EFI system device is not a block device. What?"
}

define IDirectory* OpenFSFromPath(OpenFSErrors* Errors, i8* Path, IDirectory*(BlockDevice*) OpenDevice) {
	VFSDirectoryEntry DeviceEntry

	if !(Lookup(null, Path, &DeviceEntry)) {
		Panic(Errors->NoEntry)
	}

    IFile* File := DeviceEntry.File

    if (File->TypeID() != typeid:(VFSBlockDeviceFile)) {
        Panic(Errors->NotABlockDevice)
    }

    VFSBlockDeviceFile* BlockDeviceFile := File
    BlockDeviceFileHandle* BlockDeviceHandle := BlockDeviceFile->Handle
    BlockDevice* RootDevice := BlockDeviceHandle->Device

	return OpenDevice(RootDevice)
}

define void MountPartitions(i8* RootPartitionGUID, i8* EFISystemPartitionGUID) {
	i8* EFISystemPartitionPath := FormatString("/dev/disk/gpt/%s", EFISystemPartitionGUID)
	i8* RootPartitionPath := FormatString("/dev/disk/gpt/%s", RootPartitionGUID)

	IDirectory* EFISystemRootDirectory := OpenFSFromPath(&OpenEFISystemErrors, EFISystemPartitionPath, &OpenFAT32)
	IDirectory* RootDirectory := OpenFSFromPath(&OpenRootErrors, RootPartitionPath, &OpenExt2)

	MountRoot(RootDirectory)
	Mount(null, "/efi", EFISystemRootDirectory)
}

define void NetworkSetupTask() {
	NetworkInterface* Interface := Network->Interfaces->At(1)

    SetStaticIP(Interface, "10.0.2.2/24", "10.0.2.15", "10.0.2.3")

    Interface->SetKnobToggle("Ethernet.SpewInOut", true)
    Interface->SetKnobToggle("ARP.SpewInOut", true)
	Interface->SetKnobToggle("ARP.SpewCache", true)
    Interface->SetKnobToggle("ARP.SpewGateway", true)
}

; Dummy to ensure a function isn't optimized away
define void DO_NOT_OPTIMIZE_AWAY(void* Function) asm { ret }

define void Main(TrampolineInfo* Info) {
	DO_NOT_OPTIMIZE_AWAY(&PreMain)

	DisableInterrupts()

	CurrentTask := KernelSetupTask

	i64 ArgC := 0
	i8*[10] ArgV

	ParseCommandLine(BootInfo~>KernelCommandLine, &ArgC, ArgV)

	i8* RootPartitionGUID := null
	i8* EFISystemPartitionGUID := null
	
	for (i32 Index := 0, Index < ArgC, Index++) {
		i8* Next := ArgV[Index]

		if (StringEquals(Next, "--efi-system-guid")) {
			EFISystemPartitionGUID := ArgV[++Index]
		}
		else if (StringEquals(Next, "--root-guid")) {
			RootPartitionGUID := ArgV[++Index]
		}
	}

	;KernelAddressSpace->PrintMappings()

	Info("Root Partition       GUID: %s\n", RootPartitionGUID)
	Info("EFI System Partition GUID: %s\n", EFISystemPartitionGUID)
	
	i64 KernelPages := PhysicalMemory->Allocate(NUMBER_OF_KERNEL_PAGES)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_PAGES, KernelPages / PAGE_SIZE, NUMBER_OF_KERNEL_PAGES, PAGE_PRESENT | PAGE_WRITE)
	FastZeroMemory(ADDRESS_OF_KERNEL_PAGES, NUMBER_OF_KERNEL_PAGES * PAGE_SIZE)
	KernelPageAllocator := PageHeap:Adopt(ADDRESS_OF_KERNEL_PAGES, NUMBER_OF_KERNEL_PAGES)
	
	Info("Built kernel virtual allocator\n")
	
	LoadBootFont()
	
	Info("Loaded font\n")
	
	; Remap the next available `FRAMEBUFFER_SIZE` bytes of virtual memory to 0xE000_0000 (or wherever int10 says)
	i32 FrameBufferPageCount := SizeToPageCount(FRAMEBUFFER_SIZE)
	KernelAddressSpace->MapRange(ADDRESS_OF_FRAME_BUFFER, BootInfo->PhysicalFrameBuffer / PAGE_SIZE, FrameBufferPageCount)
	
	Info("Mapped the framebuffer\n")
	
	Scheduler->Initialize()

	PixelBuffer* FrameBuffer := Alloc(#PixelBuffer)
	FrameBuffer->Initialize(ADDRESS_OF_FRAME_BUFFER, RGB32, SCREEN_WIDTH, SCREEN_HEIGHT)

	PrimaryDisplay := FrameBuffer
	InitializeTerminal()
	Printer := &KernelPrinter
	
	Print("BOOT: Screen *probably* works\n")
	
	KernelAddressSpace->Map(0 As void*, 0, PAGE_NOT_PRESENT)
	
	Print("BOOT: Unmapped page 0\n")
	
	SetCR4(GetCR4() | CR4_ENABLE_FS_GS_BASE)
	
	void* InterruptStackTop    := ADDRESS_OF_KERNEL_STACK + (10 * PAGE_SIZE)
	void* InterruptStackBottom := ADDRESS_OF_KERNEL_STACK
	KernelAddressSpace->UnmapRange(InterruptStackBottom, 1)
	
	SetupGDT(InterruptStackTop)
	
	Print("BOOT: Setup GDT and TSS\n")
	
	SetupInterrupts()
	SetupKeyboard()
	
	if (BootInfo->HPETBase && HPET_CAN_PROVIDE_SYSTEM_CLOCK) {
		Print("TIME: HPET is present and enabled, attempting to use as system clock\n")

		if (ConfigureHPETSystemClock(SYSTEM_CLOCK_HZ)) {
			SYSTEM_CLOCK_RUNNING := true
			Print("TIME: HPET selected/configured as system clock\n")
		}
		else {
			Print("TIME: HPET does not meet requirements for system clock\n")
		}
	}

	if !(SYSTEM_CLOCK_RUNNING) {
		ConfigurePITSystemClock(SYSTEM_CLOCK_HZ)
		SYSTEM_CLOCK_RUNNING := true
		Print("TIME: PIT selected/configured as system clock\n")
	}

	Print("TIME: System clock is running\n")

	SetupTimers()
	RegisterSerialInterrupts()
	
	Print("Set up PIT/timers/serial\n")
	
	SetupSystemCalls()

	MountRoot(VFSDirectory:New())

	VFSDevicesDirectory := VFSDirectory:New()
	Mount(null, "/dev", VFSDevicesDirectory)

	Print("Created /dev\n")

	Network := NetworkStack:New()

	Network->AddInterface(MakeLoopbackNetworkInterface(IPv4("127.0.0.1")))

	Print("Created loopback interface\n")

	Print("Enumerating PCIe devices:\n")

	;loop {}

	;i32 Y := StringLength(RootPartitionGUID) / 0

	;loop {}

	InitializePCIe(&VisitPCIeFunction)

	Print("Done enumerating PCIe\n")
	;loop {}

	;/*
	if (SATAController = null) {
		Panic("No SATA disk controller detected, hanging...\n")
	}

	MountRoot(VFSDirectory:New())

	VFSDevicesDirectory := VFSDirectory:New()
	Mount(null, "/dev", VFSDevicesDirectory)

	PopulateDevicesDirectory(VFSDevicesDirectory)
	MountPartitions(RootPartitionGUID, EFISystemPartitionGUID)

	;NetworkSetupTask()

	Task* NetworkThread := Scheduler->AddLightTask(&NetworkSetupTask)
	NetworkThread->State := TASK_CAN_RUN

	Task* ShellThread := Scheduler->AddLightTask(&VFSRunShellTask)
	ShellThread->State := TASK_CAN_RUN

	;StartScheduler()
	;*/

	;/*
	;SetupNetworking()
	
	/*
	Task* NetworkThread := Scheduler->AddLightTask(null)
	NetworkThread~>Context->Call(&SocketListener)
	NetworkThread->State := TASK_CAN_RUN

	Task* NetworkThread2 := Scheduler->AddLightTask(null)
	NetworkThread2~>Context->Call(&SocketClient)
	NetworkThread2->State := TASK_CAN_RUN
	;*/

	/*
	Task* NetworkThread2 := Scheduler->AddLightTask(null)
	NetworkThread2~>Context->Call(&TestNetworking)
	NetworkThread2->State := TASK_CAN_RUN
	;*/

	StartScheduler()
	;*/
	
	/*
	if !(DiskController->IsInitialized) {
		Print("Didn't find disk controller, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	DiskController->DetectDevices()
	
	i32 FirstDiskIndex := DiskController->FindFirstDiskIndex()
	
	if (FirstDiskIndex < -1) {
		Print("Didn't find any disks, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	for (i32 Index := 0, Index < 4, Index++) {
		ATADevice* Disk := DiskController->Disk(Index)
		
		Print("\thd%c - ", 'a' + Index)
		
		if (Disk) {
			Print("%s:%s, %x blocks\n", Disk->Model, Disk->Serial, Disk->MaxLBA)
		}
		else {
			Print("not present\n")
		}
	}
	*/
	
	/*

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	Info("E1000 Command: %b\n", FirstE1000->PCIe->Command)
	
	FirstE1000->Setup()

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	Info("E1000 Command: %b\n", FirstE1000->PCIe->Command)
	
	void* Buffer := KernelPageAllocator->AllocateVirtual(2)
	
	PacketBuffer* Packet := Alloc(#PacketBuffer)

	Packet->Initialize(Buffer)
	
	i8* MulticastMAC := i8[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
	MACAddress* MyMAC := FirstE1000->MAC As void*
	i32 MyIP := 0x01020304

	Print("My MAC is: %mac\n", MyMAC)
	
	Print("Status %x\nCommand %x\n", FirstE1000->Read(E1000_REGISTER_STATUS), FirstE1000->Read(E1000_REGISTER_CTRL))

	EthernetHeader* Ethernet := EnterEthernetHeader(Packet)

	MoveMemory(Ethernet~>SourceMAC, MyMAC, 6)
	MoveMemory(Ethernet~>DestinationMAC, MulticastMAC, 6)

	Ethernet->EtherType := ETHERTYPE_IPV4

	IPV4Header* IPV4 := EnterIPV4Header(Packet)

	DHCPTest(Packet, Ethernet, IPV4)

	ExitIPV4Header(Packet, IPV4)

	ExitEthernetHeader(Packet, Ethernet)
	
	;Info("%hexdump\n", Packet->Base, Packet->Size)

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	
	FirstE1000->Send(Packet->Base, Packet->Size)

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)

	loop {}
	*/

	/*
	
	Print("BOOT: Mounting disk\n")
	
	i8[2] DiskIndexString
	
	DiskIndexString[0] := ('0' + FirstDiskIndex) As i8
	DiskIndexString[1] := 0
	
	BlockDevice* BootDisk := NewBlockDevice(null, &ATABlockDevicePrototype, DiskIndexString)
	BlockDevice* OSPatition := NewBlockDevice(BootDisk, &GPTPartitionBlockDevicePrototype, "1")
	
	;BlockDevice* FSDevice := InstantiateBlockDeviceChainFromPath("ATAPIO(0)>GPT(1)")
	
	void* Ext2Scratch := KernelPageAllocator->AllocateVirtual(2)
	
	FS := KernelHeapAllocate('RootFS', #Ext2)
	FS->Device := OSPatition
	
	FS->Initialize(Ext2Scratch, Ext2Scratch + 0x800, Ext2Scratch + 0xC00, Ext2Scratch + 0x1000, Ext2Scratch + 0x1400)
	RootDirectory := Ext2OpenINodeNumber(FS, 2)
	
	Print("BOOT: About to replace myself with /dev/console wish me luck\n")
	Info("Test\n")
	
	FileHandle* NewKernelConsole := RootDirectory->Open("dev/console")
	
	Print("NewKernelConsole = %x\n", NewKernelConsole)
	
	KernelTerminal->Close()
	KernelTerminal := NewKernelConsole
	
	Print("Hello /dev/console!\n")
	
	KernelTerminal->DeviceControl(TERMINAL_RENDERER_START_CURSOR_TIMER, null)
	
	SetupShell()
	
	StartScheduler()

	*/
	
	Panic("Kernel returned from Main()")
}
