

#Require "./src/kernel/Config.rlx"

#Require "$/MemoryBase.rlx"
#Require "$/StringBase.rlx"

declare void TerminateAfterUnhandledException(i64)

#Require "$/ExceptionBase.rlx"

#Require "./src/utility/x64.rlx"

declare void Info(i8*, ...)
declare void Print(i8*, ...)

#Require "./src/bootloader/BootInfo.rlx"

KernelInfo RawKernelInfo
KernelInfo* Kernel := &RawKernelInfo

BootloaderInfo RawBootInfo
BootloaderInfo* BootInfo := &RawBootInfo

#Require "./src/kernel/core/Paging.rlx"
#Require "$/Memory.rlx"
#Require "$/String.rlx"

define void PrintCharacter(i8 Character) {
	; Pre-terminal print function
}
define void PrintCharacters(i8* Character, i32 Count) {
	; Pre-terminal print function
}

#Require "$/Print.rlx"

#Require "./src/utility/PrintHelpers.rlx"
#Require "./src/utility/DebugOutput.rlx"

#Require "./src/kernel/graphics/PixelBuffer.rlx"
#Require "./src/kernel/graphics/Font.rlx"

PixelBuffer* PrimaryDisplay := null

#Require "./src/kernel/core/PageHeap.rlx"
;#Require "./src/kernel/core/Heap.rlx"
#Require "./src/kernel/core/PalHeap.rlx"

PalHeap RawKernelHeap
PalHeap* _KernelHeap := &RawKernelHeap

PageHeap* KernelPageAllocator := null

define void* KernelHeapAllocate(i64 Tag, i32 Size) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Allocate(%l, %x) = ", Tag, Size)
		void* Result := _KernelHeap->Allocate(Size)
		Info("%x ", Result)

		AllocatorUsage Usage
		Usage.Zero()
		_KernelHeap->GetUsage(&Usage)
		
		Info("(Usage Percent: %i%%)\n", GetUsagePercent(&Usage))

		;_KernelHeap->DumpAllocations()

		return Result
	}
	else {
		return _KernelHeap->Allocate(Size)
	}
}
define void* KernelHeapExtendAllocation(void* Memory, i32 Size) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Extend(%x, %x) = ", Memory, Size)
		void* Result := _KernelHeap->Extend(Memory, Size)
		Info("%x\n", Result)
		return Result
	}
	else {
		return _KernelHeap->Extend(Memory, Size)
	}
}
define void KernelHeapFree(void* Memory) {
	if (DEBUG_HEAP_ALLOC_FREE) {
		Info("Free(%x)\n", Memory)
		_KernelHeap->Free(Memory)
	}
	else {
		_KernelHeap->Free(Memory)
	}
}

#Require "./src/kernel/core/Descriptors.rlx"

#Require "./src/utility/Exception.rlx"

declare void SchedulerYield()

#Require "./src/kernel/core/Interrupts.rlx"
#Require "./src/kernel/core/Devices.rlx"

#Require "./src/kernel/multitasking/Tasks.rlx"
#Require "./src/kernel/multitasking/Scheduler.rlx"
#Require "./src/kernel/multitasking/Timers.rlx"
#Require "./src/kernel/user-mode/Process.rlx"

#Require "./src/kernel/graphics/LoadFON.rlx"
#Require "./src/kernel/graphics/BMPOutput.rlx"

; Terminal print functions

#Require "./src/kernel/terminal/Terminal.rlx"
#Require "./src/kernel/terminal/Input.rlx"
#Require "./src/kernel/terminal/Renderer.rlx"

FileHandle* KernelTerminal

define void KernelPrintCharacter(PrintOutputAdapterPrototype* this, i8 Character) {
	KernelTerminal->Write(&Character, 1)
}
define void KernelPrintCharacters(PrintOutputAdapterPrototype* this, i8* Characters, i32 Count) {
	KernelTerminal->Write(Characters, Count)
}

PrintOutputAdapterPrototype KernelPrinter {
	PrintCharacter: &KernelPrintCharacter,
	PrintCharacters: &KernelPrintCharacters
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/ATABlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

#Require "./src/kernel/file-system/VFS/VFS.rlx"
#Require "./src/kernel/file-system/VFS/VFSDirectory.rlx"
#Require "./src/kernel/file-system/VFS/VFSOverlayDirectory.rlx"
#Require "./src/kernel/file-system/VFS/Root.rlx"

#Require "./src/kernel/file-system/VFS/Device.rlx"

#Require "./src/kernel/file-system/VFS/Ext2.rlx"
#Require "./src/kernel/file-system/VFS/FAT32.rlx"

#Require "./src/kernel/file-system/VFS/BlockDeviceFileHandle.rlx"
#Require "./src/kernel/file-system/VFS/ZeroDevice.rlx"

IDirectory* VFSDevicesDirectory := null

#Require "./src/kernel/file-system/KernelShell.rlx"

#Require "./src/kernel/system-calls/SystemCalls.rlx"

#Require "./src/kernel/core/Shell.rlx"

#Require "./src/drivers/PCI/PCI.rlx"
#Require "./src/drivers/PCI/PCIe.rlx"

;#Require "./src/drivers/networking/E1000.rlx"

declare void BootStrap()

define void RawBootStrap(void* Stack) asm {
	mov, rsp, rdi
	mov, rbp, 0
	
	call, @BootStrap

stop:
	jmp, stop
}

define void* EarlyPhysicalToVirtual(void* Where) {
	return ADDRESS_OF_KERNEL + ((Where As i64) - PHYSICAL_ADDRESS_OF_KERNEL)	
}

; Dummy parameters are 100% needed since the kernel is compiled as a linux program
;  and the compiler automatically sets argc/argv when Main takes <=2 parameters

define void Main(BootloaderInfo* RawInfo, i32 Dummy1, i32 Dummy2) {
	; First, null out the IDT to allow for qemu to catch interrupts instead of TianoCore

	asm {
		xor, rax, rax
		push, rax
		push, rax
		mov, rax, rsp
		lidt, {rax} As i64*
		pop, rax
		pop, rax
	}

	MoveMemory(BootInfo, RawInfo, #BootloaderInfo)
	MoveMemory(Kernel, RawInfo~>Kernel, #KernelInfo)
	
	if (BootInfo->Relocated) {
		RawBootStrap(ADDRESS_OF_KERNEL_STACK + (PAGE_SIZE * 40))
	}
	else {
		StopSound()

		Info("Main, FrameBuffer @ %x\n", RawInfo->PhysicalFrameBuffer)

		KernelInfo* EarlyKernel := RawInfo~>Kernel
		
		EarlyKernel->FrameBufferPages := RawInfo->PhysicalFrameBuffer
		
		;PhysicalMemory->AddReserved(0, 0x10_0000) ; < 1mb, bootloader reserved
		;PhysicalMemory->Add(0x10_0000, 0x350_0000) ; free memory
		
		i32 KernelSize := (RawInfo->MaxKernelAddress - (ADDRESS_OF_KERNEL As i64)) As i32
		
		EarlyKernel->Size := KernelSize
		EarlyKernel->PageCount := SizeToPageCount(KernelSize) + 1
		
		i64 KernelLoadPages  := PhysicalMemory->Reserve(PHYSICAL_ADDRESS_OF_KERNEL, EarlyKernel->PageCount) ; Reserve the memory the kernel lives in
		i64 PageFramesPages  := PhysicalMemory->Allocate(PAGE_COUNT_FOR_1MB)
		i64 KernelStackPages := PhysicalMemory->Allocate(40)
		i64 KernelHeapPages  := PhysicalMemory->Allocate(PAGE_COUNT_FOR_2MB)
		i64 KernelPages      := PhysicalMemory->Allocate(NUMBER_OF_KERNEL_PAGES)
		
		EarlyKernel->Pages           := KernelLoadPages
		EarlyKernel->PageFramesPages := PageFramesPages
		EarlyKernel->StackPages      := KernelStackPages
		EarlyKernel->HeapPages       := KernelHeapPages
		EarlyKernel->KernelPages     := KernelPages
		
		AddressSpaceManager* BootStrapAddressSpace := 0x14_0000 As void*
		
		BootStrapAddressSpace->Initialize(0x15_0000 As void*, 0x15_0000, 0x40)
		
		BootStrapAddressSpace->MapRange(0x10_0000 As void*, 0x100, 0x10)
		BootStrapAddressSpace->MapRange(0x15_0000 As void*, 0x150, 0x45)
		BootStrapAddressSpace->MapRange(ADDRESS_OF_KERNEL, KernelLoadPages / PAGE_SIZE, EarlyKernel->PageCount)
		
		BootStrapAddressSpace->MapRange(ADDRESS_OF_PAGE_FRAMES, PageFramesPages / PAGE_SIZE, PAGE_COUNT_FOR_1MB)
		BootStrapAddressSpace->MapRange(ADDRESS_OF_KERNEL_STACK, KernelStackPages / PAGE_SIZE, 40)
		
		; Preserve BootInfo/KernelInfo

		void* RoundedInfo := RawInfo & 0x7FFF_FFFF_FFFF_F000
		i64 InfoPages := (RoundedInfo As i64) / PAGE_SIZE

		BootStrapAddressSpace->MapRange(RoundedInfo, InfoPages, 2)

		; Preserve SetCR3 (so it can jump to the relocated kernel)

		void* PhysicalSetCR3 := &SetCR3
		i64 PhysicalSetCR3Page := (PhysicalSetCR3 As i64) / PAGE_SIZE

		BootStrapAddressSpace->MapRange(PhysicalSetCR3, PhysicalSetCR3Page, 1)

		; Figure out where `Main()` will end up, and wipe globals
		;  (so to the relocated kernel, it is as if it was loaded directly to
		;    the destination)

		void* VirtualMain := EarlyPhysicalToVirtual(&Main)

		Info("Wiping globals (%x, %x)", RawInfo->Data, RawInfo->Size)
		Info("(and then) Calling virtual main at %x\n", VirtualMain)
		;breakpoint:()

		; Zero all globals so everything reinitializes
		FastSetMemory8(RawInfo->Data, 0, RawInfo->Size)

		RawInfo->Relocated := true

		BootStrapAddressSpace->Takeover(VirtualMain, RawInfo, ADDRESS_OF_KERNEL_STACK + (PAGE_SIZE * 40))
	}
}

declare void MainContinuation()

define void RawMainContinuation(void* Stack) asm {
	mov, rsp, rdi
	mov, rbp, 0
	
	call, @MainContinuation

stop:
	jmp, stop
}

define void BootStrap() {
	Info("Switched\n")
	
	KernelAddressSpace->Initialize(ADDRESS_OF_PAGE_FRAMES, Kernel->PageFramesPages, BYTES_IN_1MB / PAGE_SIZE)
	
	KernelAddressSpace->MapRange(0x10_0000 As void*, 0x10_0000 / PAGE_SIZE, 0x10)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL, PHYSICAL_ADDRESS_OF_KERNEL / PAGE_SIZE, Kernel->PageCount)
	
	KernelAddressSpace->MapRange(ADDRESS_OF_PAGE_FRAMES, Kernel->PageFramesPages / PAGE_SIZE, PAGE_COUNT_FOR_1MB)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_STACK, Kernel->StackPages / PAGE_SIZE, 40)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_HEAP, Kernel->HeapPages / PAGE_SIZE, BYTES_IN_2MB / PAGE_SIZE)
	
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_PAGES, Kernel->KernelPages / PAGE_SIZE, NUMBER_OF_KERNEL_PAGES)
	
	void* Stack := ADDRESS_OF_KERNEL_STACK + (PAGE_SIZE * 40)

	KernelAddressSpace->Takeover(&RawMainContinuation, Stack, Stack)
}

NetworkStack* Network := null

#Require "./src/kernel/networking/Stack.rlx"

#Require "./src/kernel/networking/Loopback.rlx"
#Require "./src/drivers/networking/E1000.rlx"

#Require "./src/drivers/ICH9/AHCI.rlx"
#Require "./src/drivers/block-device/ICH9/PortBlockDevice.rlx"

ICH9::AHCI::Controller* SATAController := null

define void VisitPCIeFunction(i32 Bus, i32 Slot, i32 Function, PCIeDevice* Device) {
	Print("%x/%x/%x: ", Bus, Slot, Function)
	PCIClassCodes->Print(Device->ClassCode, Device->SubClass, Device->Interface)
	Print("\n")

	if (Device->Status & PCI_STATUS_REGISTER_HAS_CAPABILITIES) {
		;Print("\tCaps @ %x\n", Device->CapabilitiesPointer)
		;Print("\tOffset %x + %x\n", Device, (Device~>CapabilitiesPointer As i64) - (Device As i64))
		;Print("\tOffset %x + %x\n", Device, (Device~>FirstCapability As i64) - (Device As i64))

		Info("%x/%x/%x\n", Bus, Slot, Function)

		PCICapability* Current := Device->FirstPCICapability()

		loop {
			Info("\tHas capability %x\n", Current->ID & 0xFF)

			if (Current->Next = 0) {
				break
			}

			Current := Device->NextPCICapability(Current)
		}

		;Print("%x %x\n", Device->ClassCode, Device->SubClass)

		if (Device->ClassCode = PCI_CLASS_CODE_NETWORK_CONTROLLER && Device->SubClass = PCI_SUBCLASS_NETWORK_ETHERNET) {
			Print("Network interface %x:%x\n", Device->VendorID, Device->DeviceID)
			
			if (Device->VendorID = PCI_VENDOR_INTEL && Device->DeviceID = PCI_DEVICE_INTEL_82574L) {
				Print("Found E1000\n")

				Device->EnableMSI(19)

				E1000* Adapter := Alloc('E1000', #E1000)
				Adapter->Initialize(Device)
				Adapter->Setup()

				Network->AddInterface(MakeNetworkInterfaceFromE1000(Adapter))
			}
		}
		else if (Device->ClassCode = PCI_CLASS_CODE_MASS_STORAGE_CONTROLLER && Device->SubClass = PCI_SUBCLASS_SATA_CONTROLLER) {
			Info("SATA Controller found:\n%hexdump\n", Device, 0x40)

			Info("SATA Controller %x:%x\n", Device->VendorID, Device->DeviceID)
			Info("Supports MSI? %i\n", Device->CanUseMSI())

			Info("SATA MAP: %b\n", *((Device + 0x90) As i16*))

			SATAController := Alloc(#ICH9::AHCI::Controller)
			SATAController->Initialize(Device)
		}
	}
}

Task _KernelSetupTask
Task* KernelSetupTask := &_KernelSetupTask

#Require "./src/kernel/graphics/DoubleBuffer.rlx"

#Require "./src/kernel/networking/Utility.rlx"
#Require "./src/kernel/networking/Ethernet.rlx"
#Require "./src/kernel/networking/ARP.rlx"
#Require "./src/kernel/networking/IPV4.rlx"
#Require "./src/kernel/networking/ICMP.rlx"
#Require "./src/kernel/networking/UDP.rlx"

;#Require "./src/kernel/networking/DHCP.rlx"

#Require "./src/kernel/networking/Main.rlx"

define void InitializeTerminal() {
	DefaultTerminalInput := NewHandle(&TerminalInputStreamPrototype)
	DefaultTerminalOutput := NewHandle(&TerminalRendererPrototype, PrimaryDisplay, BootFont, TERMINAL_FOREGROUND, TERMINAL_BACKGROUND)
	
	KernelTerminal := NewHandle(&TerminalFilePrototype, TERMINAL_MAJOR, TERMINAL_MINOR)
}

define void PopulateDevicesDirectory(IDirectory* DevicesDirectory) {
	; Virtual Devices: /dev/zero

	VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::File,
        Name: "zero",
        File: ZeroDeviceFile:New()
    }

    DevicesDirectory->Insert(&Entry)

	; Serial ports: /dev/ttySX

	for (i32 Index := 0, Index < 4, Index++) {
		VFSDirectoryEntry SerialEntry {
			Type: VFSDirectoryEntryType::File,
			Name: FormatString("ttyS%i", Index),
			File: VFSDeviceSingletonFile:New(SerialPortFileHandle:New(Index))
		}

		DevicesDirectory->Insert(&SerialEntry)
	}

	; Terminal: /dev/tty0

	VFSDirectoryEntry TerminalEntry {
		Type: VFSDirectoryEntryType::File,
		Name: "tty0",
		File: VFSDeviceSingletonFile:New(KernelTerminal)
	}

	DevicesDirectory->Insert(&TerminalEntry)

	; SATA Devices: /dev/sataX

	i32 PopulatedPortCount := SATAController->Ports->Count()

	for (i32 Index := 0, Index < PopulatedPortCount, Index++) {
		ICH9::AHCI::DevicePort* Port := SATAController->Ports->At(Index)

		if (Port->Type = SATA::DeviceType::SATA) {
			Port->EnableInterrupts()
			Port->StartCommands()

			Port->Identify()

			Print("SATA Device %i is a %s, SN: %s\n", Port->Index, Port->Model, Port->SerialNumber)

			BlockDevice* Device := ICH9::AHCI::PortBlockDevice:New(Port)
			FileHandle* Handle := BlockDeviceFileHandle:New(Device)
			IFile* File := VFSBlockDeviceFile:New(Handle)

			VFSDirectoryEntry SATAEntry {
				Type: VFSDirectoryEntryType::File,
				Name: FormatString("sata%i", Index),
				File: File
			}

			DevicesDirectory->Insert(&SATAEntry)
		}
	}
}

define void VFSRunShellTask() {
	VFSRunShell(KernelTerminal)
}

define void MainContinuation() {
	CurrentTask := KernelSetupTask
	
	DisableInterrupts()
	
	Info("Paging initialized, AddressSpaceManager in control\n")
	
	KernelPageAllocator := PageHeap:Adopt(ADDRESS_OF_KERNEL_PAGES As i64, NUMBER_OF_KERNEL_PAGES)
	
	Info("Built kernel virtual allocator\n")
	
	LoadBootFont()
	
	Info("Loaded font\n")
	
	; Remap the next available `FRAMEBUFFER_SIZE` bytes of virtual memory to 0xE000_0000 (or wherever int10 says)
	i32 FrameBufferPageCount := SizeToPageCount(FRAMEBUFFER_SIZE)
	KernelAddressSpace->MapRange(ADDRESS_OF_FRAME_BUFFER, Kernel->FrameBufferPages / PAGE_SIZE, FrameBufferPageCount)
	
	Info("Mapped the framebuffer\n")
	
	_KernelHeap->Initialize(ADDRESS_OF_KERNEL_HEAP, BYTES_IN_2MB)
	_KernelHeap->Bootstrap()
	Info("Initialized heap (%x - %x)\n", ADDRESS_OF_KERNEL_HEAP, ADDRESS_OF_KERNEL_HEAP + BYTES_IN_2MB)

	PixelBuffer* FrameBuffer := Alloc(#PixelBuffer)
	FrameBuffer->Initialize(ADDRESS_OF_FRAME_BUFFER, RGB32, SCREEN_WIDTH, SCREEN_HEIGHT)

	PrimaryDisplay := FrameBuffer
	InitializeTerminal()
	Printer := &KernelPrinter
	
	Print("BOOT: Screen *probably* works\n")
	
	KernelAddressSpace->Map(0 As void*, 0, PAGE_NOT_PRESENT)
	
	Print("BOOT: Unmapped page 0\n")
	
	SetCR4(GetCR4() | CR4_ENABLE_FS_GS_BASE)
	
	void* InterruptStackTop    := ADDRESS_OF_KERNEL_STACK + (10 * PAGE_SIZE)
	void* InterruptStackBottom := ADDRESS_OF_KERNEL_STACK
	KernelAddressSpace->UnmapRange(InterruptStackBottom, 1)
	Kernel->InterruptStack := InterruptStackTop
	
	SetupGDT()
	
	Print("BOOT: Setup GDT and TSS\n")
	
	SetupInterrupts()
	
	SetPITMode(PIT_100HZ)
	SetupTimers()
	RegisterSerialInterrupts()
	
	Print("Set up PIT/timers/serial\n")
	
	EnableInterrupts()
	
	SetupSystemCalls()

	MountRoot(VFSDirectory:New())

	VFSDevicesDirectory := VFSDirectory:New()
	Mount(null, "/dev", VFSDevicesDirectory)

	Network := NetworkStack:New()

	Network->AddInterface(MakeLoopbackNetworkInterface(IPv4("127.0.0.1")))

	InitializePCIe(&VisitPCIeFunction)

	/*
	if (SATAController = null) {
		Panic("No SATA disk controller detected, hanging...\n")
	}

	MountRoot(VFSDirectory:New())

	VFSDevicesDirectory := VFSDirectory:New()
	Mount(null, "/dev", VFSDevicesDirectory)

	PopulateDevicesDirectory(VFSDevicesDirectory)

	Task* ShellThread := Scheduler->AddLightTask(&VFSRunShellTask)

	ShellThread->State := TASK_CAN_RUN

	StartScheduler()
	;*/

	;/*
	;SetupNetworking()
	
	/*
	Task* NetworkThread := Scheduler->AddLightTask(null)
	NetworkThread~>Context->Call(&SocketListener)
	NetworkThread->State := TASK_CAN_RUN

	Task* NetworkThread2 := Scheduler->AddLightTask(null)
	NetworkThread2~>Context->Call(&SocketClient)
	NetworkThread2->State := TASK_CAN_RUN
	;*/

	Task* NetworkThread2 := Scheduler->AddLightTask(null)
	NetworkThread2~>Context->Call(&TestNetworking)
	NetworkThread2->State := TASK_CAN_RUN

	StartScheduler()
	;*/
	
	/*
	if !(DiskController->IsInitialized) {
		Print("Didn't find disk controller, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	DiskController->DetectDevices()
	
	i32 FirstDiskIndex := DiskController->FindFirstDiskIndex()
	
	if (FirstDiskIndex < -1) {
		Print("Didn't find any disks, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	for (i32 Index := 0, Index < 4, Index++) {
		ATADevice* Disk := DiskController->Disk(Index)
		
		Print("\thd%c - ", 'a' + Index)
		
		if (Disk) {
			Print("%s:%s, %x blocks\n", Disk->Model, Disk->Serial, Disk->MaxLBA)
		}
		else {
			Print("not present\n")
		}
	}
	*/
	
	/*

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	Info("E1000 Command: %b\n", FirstE1000->PCIe->Command)
	
	FirstE1000->Setup()

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	Info("E1000 Command: %b\n", FirstE1000->PCIe->Command)
	
	void* Buffer := KernelPageAllocator->AllocateVirtual(2)
	
	PacketBuffer* Packet := Alloc(#PacketBuffer)

	Packet->Initialize(Buffer)
	
	i8* MulticastMAC := i8[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
	MACAddress* MyMAC := FirstE1000->MAC As void*
	i32 MyIP := 0x01020304

	Print("My MAC is: %mac\n", MyMAC)
	
	Print("Status %x\nCommand %x\n", FirstE1000->Read(E1000_REGISTER_STATUS), FirstE1000->Read(E1000_REGISTER_CTRL))

	EthernetHeader* Ethernet := EnterEthernetHeader(Packet)

	MoveMemory(Ethernet~>SourceMAC, MyMAC, 6)
	MoveMemory(Ethernet~>DestinationMAC, MulticastMAC, 6)

	Ethernet->EtherType := ETHERTYPE_IPV4

	IPV4Header* IPV4 := EnterIPV4Header(Packet)

	DHCPTest(Packet, Ethernet, IPV4)

	ExitIPV4Header(Packet, IPV4)

	ExitEthernetHeader(Packet, Ethernet)
	
	;Info("%hexdump\n", Packet->Base, Packet->Size)

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)
	
	FirstE1000->Send(Packet->Base, Packet->Size)

	Info("E1000 Status: %b\n", FirstE1000->PCIe->Status)

	loop {}
	*/

	/*
	
	Print("BOOT: Mounting disk\n")
	
	i8[2] DiskIndexString
	
	DiskIndexString[0] := ('0' + FirstDiskIndex) As i8
	DiskIndexString[1] := 0
	
	BlockDevice* BootDisk := NewBlockDevice(null, &ATABlockDevicePrototype, DiskIndexString)
	BlockDevice* OSPatition := NewBlockDevice(BootDisk, &GPTPartitionBlockDevicePrototype, "1")
	
	;BlockDevice* FSDevice := InstantiateBlockDeviceChainFromPath("ATAPIO(0)>GPT(1)")
	
	void* Ext2Scratch := KernelPageAllocator->AllocateVirtual(2)
	
	FS := KernelHeapAllocate('RootFS', #Ext2)
	FS->Device := OSPatition
	
	FS->Initialize(Ext2Scratch, Ext2Scratch + 0x800, Ext2Scratch + 0xC00, Ext2Scratch + 0x1000, Ext2Scratch + 0x1400)
	RootDirectory := Ext2OpenINodeNumber(FS, 2)
	
	Print("BOOT: About to replace myself with /dev/console wish me luck\n")
	Info("Test\n")
	
	FileHandle* NewKernelConsole := RootDirectory->Open("dev/console")
	
	Print("NewKernelConsole = %x\n", NewKernelConsole)
	
	KernelTerminal->Close()
	KernelTerminal := NewKernelConsole
	
	Print("Hello /dev/console!\n")
	
	KernelTerminal->DeviceControl(TERMINAL_RENDERER_START_CURSOR_TIMER, null)
	
	SetupShell()
	
	StartScheduler()

	*/
	
	Panic("Kernel returned from Main()")
}
