
#Require "./src/kernel/networking/Endianess.rlx"

i16 ETHERTYPE_ARP := 0x0806

struct EthernetHeader {
    MACAddress Destination
    MACAddress Source
    i16 EtherType
    i8[0] Payload

    define void FlipEndianess() {
        this->EtherType := NetworkShort(this->EtherType)
    }
}

i32 PACKET_DATA_ETHERNET := RegisterPacketData("Ethernet Header")

#Require "$/AVLTree.rlx"

declare NetworkProtocolPrototype* GetEthernetProtocolPrototype()

struct EthernetPacketOptions {
    i16 EtherType
    MACAddress* Destination
}

struct EthernetLayer {
    NetworkInterface* Interface
    NetworkProtocol* AsProtocol

    AVLTree* EtherTypeHandlers ; <i16, NetworkProtocol>

    declare void Ingest(NetworkPacket*)

    static self* New(NetworkInterface* Interface) {
        self* this := Alloc(#self)

        this->Interface := Interface

        this->AsProtocol := Interface->AddProtocol("Ethernet", GetEthernetProtocolPrototype(), this)

        Interface->ReceiveProtocol := this->AsProtocol

        this->EtherTypeHandlers := AVLTree:New(#NetworkProtocol*)

        return this
    }

    define void AddEtherType(i64 Type, NetworkProtocol* Protocol) {
        this->EtherTypeHandlers->InsertPointer(Type, Protocol)
    }

    define NetworkPacket* Enter(EthernetPacketOptions* Options) {
        NetworkPacket* Packet := NetworkPacket:New(PAGE_SIZE * 8)

        EthernetHeader* Header := Packet->Mark(PACKET_DATA_ETHERNET, #EthernetHeader)

        Info("Building Ethernet packet %mac -> %mac\n", this->Interface->MAC, Options->Destination)

        Header->EtherType := Options->EtherType
        Header~>Source->Set(this->Interface->MAC)
        Header~>Destination->Set(Options->Destination)

        return Packet
    }

    define void Send(NetworkPacket* Packet) {
        Packet->End()

        EthernetHeader* Header := Packet->Get(PACKET_DATA_ETHERNET)

        Info("Sending Ethernet packet %mac -> %mac\n", Header~>Source, Header~>Destination)

        Info("%hexdump\n", Packet->Buffer, Packet->Size)

        Header->FlipEndianess()
        this->Interface->DoSend(Packet)
        Header->FlipEndianess()
    }

    define void Ingest(NetworkPacket* Packet) {
        EthernetHeader* Header := Packet->Mark(PACKET_DATA_ETHERNET, #EthernetHeader)

        Header->FlipEndianess()

        Info("Received Ethernet packet %mac -> %mac\n", Header~>Source, Header~>Destination)

        if !(Header~>Destination->Equals(this->Interface->MAC)) {
            Info(" - Destination MAC is not our MAC, discarding\n")

            return
        }

        NetworkProtocol* Protocol := this->EtherTypeHandlers->GetPointer(Header->EtherType)

        if !(Protocol) {
            Info("Packet from %mac has unknown ethertype %x\n", Header->Source, Header->EtherType)
            return
        }

        Protocol->Ingest(Packet)
    }
}

NetworkProtocolPrototype EthernetProtocolPrototype {
    Enter: &EthernetLayer.Enter,
    Send: &EthernetLayer.Send,
    Ingest: &EthernetLayer.Ingest
}

define NetworkProtocolPrototype* GetEthernetProtocolPrototype() {
    return &EthernetProtocolPrototype
}