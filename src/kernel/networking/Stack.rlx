
#Require "./src/kernel/networking/Utility.rlx"
#Require "./src/kernel/networking/Parse.rlx"

declare WellKnownProtocols* AttachWellKnownProtocols(NetworkInterface*)

enum NetworkInterfaceKnobType {
    Toggle,
    Integer
}

struct NetworkInterfaceKnob {
    NetworkInterfaceKnobType Type

    union {
        i8 ToggleValue
        i32 IntegerValue
        i64 FullValue
    }
}

struct NetworkInterface {
    i8* Name

    MACAddress* MAC

    i32 Gateway
    i32 Mask
    MACAddress* GatewayMAC

    i32 IP
    i32 MTU
    i32 DNS

    AVLTree* Knobs ; <FNV1A(Name), NetworkInterfaceKnob>

    AVLTree* Protocols ; <FNV1A(Name), NetworkProtocol*>
    WellKnownProtocols* WellKnownProtocols

    NetworkProtocol* SendProtocol
    NetworkProtocol* ReceiveProtocol

    static self* New(i8* Name) {
        self* this := Alloc(#self)
        
        this->Name := Name
        this->Protocols := AVLTree:New(#void*)

        this->Knobs := AVLTree:New(#NetworkInterfaceKnob)

        this->MTU := 1400

        return this
    }

    define NetworkInterfaceKnob* DefineKnob(i8* Name, NetworkInterfaceKnobType Type) {
        i64 Hash := FNV1A(Name)

        NetworkInterfaceKnob Knob {
            Type: Type,
            FullValue: 0
        }

        this->Knobs->Insert(Hash, &Knob)

        return this->Knobs->Get(Hash)
    }

    define NetworkInterfaceKnob* GetKnob(i8* Name) {
        return this->Knobs->Get(FNV1A(Name))
    }

    define void SetKnobToggle(i8* Name, i8 Value) {
        NetworkInterfaceKnob* Knob := this->Knobs->Get(FNV1A(Name))

        if (Knob->Type = NetworkInterfaceKnobType::Toggle) {
            Knob->ToggleValue := Value
        }
    }

    define void SetKnobInteger(i8* Name, i32 Value) {
        NetworkInterfaceKnob* Knob := this->Knobs->Get(FNV1A(Name))

        if (Knob->Type = NetworkInterfaceKnobType::Integer) {
            Knob->IntegerValue := Value
        }
    }

    define void Info(i8* Format, ... Args) {
        i8[200] Buffer

        i32 Length := FormatString(Buffer, 200, "[%s] %s\n", this->Name, Format)
        Buffer[Length] := 0

        RawInfo(Buffer, Args)
    }

    define NetworkProtocol* AddProtocol(i8* Name, NetworkProtocolPrototype* Prototype, void* State) {
        NetworkProtocol* Protocol := NetworkProtocol:New(Prototype, State)

        this->Protocols->InsertPointer(FNV1A(Name), Protocol)

        return Protocol
    }

    define NetworkProtocol* AddEphemeralProtocol(NetworkProtocolPrototype* Prototype, void* State) {
        return NetworkProtocol:New(Prototype, State)
    }

    define NetworkProtocol* GetProtocol(i8* Name) {
        return this->Protocols->GetPointer(FNV1A(Name))
    }

    define void DoSend(NetworkPacket* Packet) {
        this->SendProtocol->Ingest(Packet)
    }

    define void OnReceive(NetworkPacket* Packet) {
        this->ReceiveProtocol->Ingest(Packet)
    }

    define void AttachWellKnownProtocols() {
        this->WellKnownProtocols := AttachWellKnownProtocols(this)
    }

    define i32 DeviceControl(i32 Function, void* Parameter) {
        return 0
    }
}

declare void AddNetworkRoute(i32, i64, NetworkInterface*)

#Require "./src/kernel/networking/Utility.rlx"
#Require "./src/kernel/networking/Ethernet.rlx"
#Require "./src/kernel/networking/ARP.rlx"
#Require "./src/kernel/networking/IPV4.rlx"
#Require "./src/kernel/networking/ICMP.rlx"
#Require "./src/kernel/networking/UDP.rlx"
#Require "./src/kernel/networking/TCP.rlx"

;#Require "./src/kernel/networking/DHCP.rlx"
;#Require "./src/kernel/networking/DNS.rlx"

struct WellKnownProtocols {
    EthernetLayer* Ethernet
    ARPLayer* ARP
    IPV4Layer* IP

    ICMPLayer* ICMP

    UDPLayer* UDP
    TCPLayer* TCP

    ;DHCPClient* DHCP
    ;DNSLayer* DNS

    static self* Attach(NetworkInterface* Interface) {
        self* this := Alloc(#self)

        this->Ethernet := EthernetLayer:New(Interface)
        this->ARP := ARPLayer:New(Interface, this->Ethernet->AsProtocol)
        this->IP := IPV4Layer:New(Interface, this->Ethernet->AsProtocol)

        this->ICMP := ICMPLayer:New(Interface, this->IP->AsProtocol)

        this->UDP := UDPLayer:New(Interface, this->IP->AsProtocol)
        this->TCP := TCPLayer:New(Interface, this->IP->AsProtocol)

        ;this->DHCP := DHCPClient:New(Interface, this->UDP->AsProtocol)
        ;this->DNS := DNSLayer:New(Interface)

        return this
    }
}

define WellKnownProtocols* AttachWellKnownProtocols(NetworkInterface* Interface) {
    if (Interface->WellKnownProtocols) {
        return Interface->WellKnownProtocols
    }

    return WellKnownProtocols:Attach(Interface)
}

struct NetworkRoute {
    i32 Prefix
    i32 Mask
    NetworkInterface* Interface
}

struct NetworkStack {
    PointerArray* Interfaces ; <NetworkInterface*>

    NetworkRoute* DefaultRoute
    PointerArray* Routes ; <NetworkRoute*>

    static self* New() {
        self* this := Alloc(#self)
        
        this->Interfaces := PointerArray:New()
        this->Routes := PointerArray:New()

        return this
    }

    define i32 AddInterface(NetworkInterface* Interface) {
        Interface->AttachWellKnownProtocols()

        i32 Index := this->Interfaces->Count()
        this->Interfaces->Push(Interface)
        return Index
    }

    define void AddRoute(i64 Prefix, i64 Mask, NetworkInterface* Interface) {
        NetworkRoute* Route := Alloc(#NetworkRoute)

        Route->Prefix := Prefix As i32
        Route->Mask := Mask As i32
        Route->Interface := Interface

        if (Mask = 0) {
            this->DefaultRoute := Route
        }
        else {
            this->Routes->Push(Route)
        }
    }

    define i8 AddRoute(i8* AddressWithCIDR, NetworkInterface* Interface) {
        i32 Address := 0
        i32 CIDR := 0

        if !(ParseIPv4CIDR(AddressWithCIDR, &Address, &CIDR)) {
            return false
        }

        i32 Mask := MaskFromCIDR(CIDR)

        this->AddRoute(Address, Mask, Interface)

        return true
    }

    define void DumpRoutes() {
        if (this->DefaultRoute) {
            Info("default -> %ipv4 via dev %s\n", this->DefaultRoute->Interface->Gateway, this->DefaultRoute->Interface->Name)
        }

        i32 Count := this->Routes->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            NetworkRoute* Route := this->Routes->At(Index)

            Info("%ipv4 %ipv4 -> %ipv4 via dev %s\n", Route->Prefix, Route->Mask, Route->Interface->Gateway, Route->Interface->Name)
        }
    }

    static i8 FindFirstBitSet(i64 Number) asm {
        bsr, rax, rdi
        ret
    }

    define NetworkRoute* Lookup(i32 Address) {
        NetworkRoute* BestMatch := this->DefaultRoute
        i32 BestMatchLength := 0

        i32 Count := this->Routes->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            NetworkRoute* Route := this->Routes->At(Index)

            Info("Match %ipv4 & %ipv4 (%ipv4) against %ipv4 (%s)\n", Address, Route->Mask, Address & Route->Mask, Route->Prefix, Route->Interface->Name)

            if ((Address & Route->Mask) = Route->Prefix) {
                i32 Length := self:FindFirstBitSet(Route->Mask)

                if (Length > BestMatchLength) {
                    BestMatch := Route
                }
            }
        }

        Info("Matched to %s\n", BestMatch->Interface->Name)

        return BestMatch
    }

    define TCPSocket* CreateTCP() {
        return TCPSocket:New()
    }
    ;define TCPSocketHandle* CreateTCPHandle() {
    ;    return TCPSocketHandle:New()
    ;}

    define TCPError Bind(i32 Address, i16 Port, TCPSocket* Socket) {
        NetworkRoute* Route := this->Lookup(Address)
        TCPLayer* TCP := Route->Interface->WellKnownProtocols->TCP

        return TCP->Bind(Port, Socket)
    }
    
    define TCPError Connect(TCPSocket* Socket, i32 Address, i16 Port) {
        NetworkRoute* Route := this->Lookup(Address)
        TCPLayer* TCP := Route->Interface->WellKnownProtocols->TCP

        return TCP->Connect(Socket, Address, Port)
    }

    define UDPSocket* CreateUDP() {
        return UDPSocket:New()
    }
    ;define UDPSocketHandle* CreateUDPHandle() {
    ;    return UDPSocketHandle:New()
    ;}

    define UDPError Bind(i32 Address, i16 Port, UDPSocket* Socket) {
        NetworkRoute* Route := this->Lookup(Address)
        UDPLayer* UDP := Route->Interface->WellKnownProtocols->UDP

        return UDP->Bind(Port, Socket)
    }
}

NetworkStack* Network := null

define void AddNetworkRoute(i32 Prefix, i64 Mask, NetworkInterface* Interface) {
    Network->AddRoute(Prefix, Mask As i32, Interface)
}

#Require "./src/kernel/networking/TCPSocketHandle.rlx"
#Require "./src/kernel/networking/UDPSocketHandle.rlx"

#Require "./src/kernel/networking/Parse.rlx"

define void SetStaticIP(NetworkInterface* Interface, i8* RawGateway, i8* RawMe, i8* RawDNS) {
    i32 Gateway := 0
    i32 CIDR := 0
    ParseIPv4CIDR(RawGateway, &Gateway, &CIDR)

    i32 Mask := MaskFromCIDR(CIDR)

    i32 Me := 0
    ParseIPv4(RawMe, &Me)

    i32 DNS := 0
    ParseIPv4(RawDNS, &DNS)

    Interface->Gateway := Gateway
    Interface->Mask := Mask

    Interface->IP := Me

    Interface->DNS := DNS

    AddNetworkRoute(Interface->Gateway & Mask, Mask, Interface)
    AddNetworkRoute(0, 0, Interface)

    ARPLayer* ARP := Interface->GetProtocol("ARP")->this
    ARP->Announce()

    Interface->GatewayMAC := ARP->Lookup(Gateway)
}
