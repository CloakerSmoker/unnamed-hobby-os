
#Require "./src/kernel/networking/IPV4.rlx"

i8 IPV4_PROTOCOL_UDP := 17

struct UDPHeader {
    i16 SourcePort
    i16 DestinationPort
    i16 Length
    i16 Checksum

    define void FlipEndianess() {
        this->SourcePort := NetworkShort(this->SourcePort)
        this->DestinationPort := NetworkShort(this->DestinationPort)
        this->Length := NetworkShort(this->Length)
    }
}

struct UDPChecksumHeader {
    i32 SourceIP
    i32 DestinationIP
    i8 Zero
    i8 Protocol
    i16 UDPLength
}

declare NetworkProtocolPrototype* GetUDPProtocolPrototype()

i32 PACKET_DATA_UDP_HEADER := RegisterPacketData("UDP Header")

struct UDPPacketOptions {
    i32 Destination
    i16 SourcePort
    i16 DestinationPort
}

enum UDPError {
    Ok := 0,
    PortBusy := 1
}

declare NetworkProtocolPrototype* GetUDPSocketProtocolPrototype()

i16 NextUDPConnectionPort := 49152 As i16

struct UDPSocket {
    NetworkInterface* Interface
    NetworkProtocol* Transport

    NetworkProtocol* AsProtocol

    i16 LocalPort

    NetworkPacket* LastRecieved

    static self* New() {
        return Alloc(#self)
    }

    define void BindInterface(NetworkInterface* Interface, NetworkProtocol* Transport) {
        this->Interface := Interface
        this->Transport := Transport

        this->AsProtocol := Interface->AddEphemeralProtocol(GetUDPSocketProtocolPrototype(), this)
    }

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* IP := Packet->Get(PACKET_DATA_IPV4_HEADER)

        if (this->LastRecieved) {
            this->LastRecieved->Free()
        }

        this->LastRecieved := Packet->Clone()
    }

    define i32 Poll(i32 Mask) {
        i32 Result := 0

        if (Mask & POLL_FOR_READ) {
            if (this->LastRecieved != null) {
                Result |= POLL_CAN_READ
            }
        }

        if (Mask & POLL_FOR_WRITE) {
            Result |= POLL_CAN_WRITE
        }

        return Result
    }

    define void SendTo(NetworkAddress* Address, void* Data, i32 Size) {
        UDPPacketOptions Options {
            SourcePort: this->LocalPort,
            Destination: Address->IPv4,
            DestinationPort: Address->Port
        }

        NetworkPacket* Packet := this->Transport->Enter(&Options)

        MoveMemory(Packet->Bump(Size), Data, Size)

        this->Transport->Send(Packet)
    }

    define i32 RecieveFrom(NetworkAddress* OutAddress, void* Buffer, i32 MaxSize) {
        NetworkPacket* Packet := this->LastRecieved
        IPV4Header* IPv4 := Packet->Get(PACKET_DATA_IPV4_HEADER)
        UDPHeader* UDP := Packet->Get(PACKET_DATA_UDP_HEADER)

        OutAddress->Type := NetworkAddressType::IPv4
        OutAddress->IPv4 := IPv4->Source
        OutAddress->Port := UDP->SourcePort

        void* Data := Packet->GetEnd(PACKET_DATA_UDP_HEADER)
        i32 DataOffset := Packet->Tell() - Packet->GetEndOffset(PACKET_DATA_UDP_HEADER)

        i32 DataSize := UDP->Length - DataOffset - #UDPHeader
        i32 Result := MaxSize

        if (DataSize < MaxSize) {
            Result := DataSize   
        }

        MoveMemory(Buffer, Data, Result)

        Packet->Free()
        this->LastRecieved := null

        return Result
    }
}

NetworkProtocolPrototype UDPSocketProtocolPrototype {
    Ingest: &UDPSocket.Ingest
}

define NetworkProtocolPrototype* GetUDPSocketProtocolPrototype() {
    return &UDPSocketProtocolPrototype
}

struct UDPLayer {
    NetworkInterface* Interface
    NetworkProtocol* Transport

    NetworkProtocol* AsProtocol

    AVLTree* Sockets ; <i16, NetworkProtocol*>

	static self* New(NetworkInterface* Interface, NetworkProtocol* Transport) {
		self* this := Alloc(#self)

		this->Interface := Interface
		this->Transport := Transport

		this->AsProtocol := Interface->AddProtocol("UDP", GetUDPProtocolPrototype(), this)

        IPV4Layer* IPV4 := Transport->this

        IPV4->AddProtocol(IPV4_PROTOCOL_UDP, this->AsProtocol)

        this->Sockets := AVLTree:New(#NetworkProtocol*)

		return this
	}

    define NetworkPacket* Enter(UDPPacketOptions* Options) {
        IPV4PacketOptions IPOptions {
            Destination: Options->Destination,
            ProtocolNumber: IPV4_PROTOCOL_UDP
        }

        NetworkPacket* Packet := this->Transport->Enter(&IPOptions)

        UDPHeader* Header := Packet->Mark(PACKET_DATA_UDP_HEADER, #UDPHeader)

        Header->SourcePort := Options->SourcePort
        Header->DestinationPort := Options->DestinationPort

        return Packet
    }

    define void Send(NetworkPacket* Packet) {
        UDPHeader* Header := Packet->Get(PACKET_DATA_UDP_HEADER)

        Header->Length := (Packet->Tell() - Packet->GetOffset(PACKET_DATA_UDP_HEADER)) As i16

        Header->FlipEndianess()

        this->Transport->Send(Packet)
    }

    define i16 Checksum(NetworkPacket* Packet) {
        IPV4Header* IPV4 := Packet->Get(PACKET_DATA_IPV4_HEADER)
        UDPHeader* UDP := Packet->Get(PACKET_DATA_UDP_HEADER)

        UDPChecksumHeader PseudoHeader {
            SourceIP: IPV4->Source,
            DestinationIP: IPV4->Destination,
            Zero: 0,
            Protocol: IPV4->Protocol,
            UDPLength: UDP->Length
        }

        Info("UDPLength: %x\n", UDP->Length)

        i64 State := RFC1071ChecksumStart()

        State := RFC1071ChecksumUpdate(State, &PseudoHeader, #UDPChecksumHeader)

        i16 OldChecksum := UDP->Checksum
        UDP->Checksum := 0

        State := RFC1071ChecksumUpdate(State, UDP, #UDPHeader)

        UDP->Checksum := OldChecksum

        i32 Size := UDP->Length - #UDPHeader
        void* Data := Packet->GetEnd(PACKET_DATA_UDP_HEADER)

        State := RFC1071ChecksumUpdate(State, Data, Size)

        return RFC1071ChecksumFinish(State)
    }

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* IPV4 := Packet->Get(PACKET_DATA_IPV4_HEADER)
        UDPHeader* UDP := Packet->Mark(PACKET_DATA_UDP_HEADER, #UDPHeader)

        UDP->FlipEndianess()

        NetworkProtocol* Handler := this->Sockets->GetPointer(UDP->DestinationPort)

        Info("UDP: Packet checksum: Given = %x, Calculated = %x\n", UDP->Checksum, this->Checksum(Packet))

        if (Handler = null) {
            Info("UDP: Dropping packet from %ipv4:%i -> %ipv4:%i due to unknown destination port\n", IPV4->Source, UDP->SourcePort, IPV4->Destination, UDP->DestinationPort)
            return
        }

        Handler->Ingest(Packet)
    }

    define UDPError Bind(i16 LocalPort, UDPSocket* Socket) {
        if (this->Sockets->Has(LocalPort)) {
            return UDPError::PortBusy
        }

        Socket->LocalPort := LocalPort

        this->Sockets->InsertPointer(LocalPort, Socket->AsProtocol)

        return UDPError::Ok
    }
}

NetworkProtocolPrototype UDPProtocolPrototype {
    Enter: &UDPLayer.Enter,
    Send: &UDPLayer.Send,
    Ingest: &UDPLayer.Ingest
}

define NetworkProtocolPrototype* GetUDPProtocolPrototype() {
    return &UDPProtocolPrototype
}

/*
define UDPHeader* EnterUDPHeader(PacketBuffer* Buffer, IPV4Header* IPV4) {
    IPV4->Protocol := IPV4_PROTOCOL_UDP

    return Buffer->Bump(#UDPHeader)
}

define void ExitUDPHeader(PacketBuffer* Buffer, UDPHeader* Header) {
    i16 Length := Buffer->Tell(Header)

    Header->Length := Length
    Header->FlipEndianess()

    i16 Checksum := RFC1071Checksum(Header, Length)

    ;Header->Checksum := Checksum
}
*/