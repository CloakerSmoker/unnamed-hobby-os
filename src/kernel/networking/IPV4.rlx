
i16 ETHERTYPE_IPV4 := 0x800

i8 IPV4_FLAG_HAS_FOLLOWING_FRAGMENTS := 1
i8 IPV4_FLAG_DO_NOT_FRAGMENT := 2

i32 IPV4_BROADCAST_ADDRESS := 0xFF_FF_FF_FF As i32

struct IPV4HeaderHashable {
    i32 Source
    i32 Destination
    i16 Identification
    i8 Protocol
    i8 _
}

struct IPV4Header {
    union {
        bits As i8 {
            [4:7] Version
            [0:3] IHL
        }

        i8 Version_IHL
    }

    union {
        bits As i8 {
            [0:5] DSCP
            [5:7] ECN
        }

        i8 DSCP_ECN
    }

    i16 TotalLength
    i16 Identification

    union {
        bits As i16 {
            [13:15] Flags
            [0:12] FragmentOffset
        }

        i16 Flags_FragmentOffset
    }

    i8 TimeToLive
    i8 Protocol
    i16 HeaderChecksum
    i32 Source
    i32 Destination

    define i64 Hash() {
        IPV4HeaderHashable HashableFields {
            Identification: this->Identification,
            Source: this->Source,
            Destination: this->Destination,
            Protocol: this->Protocol
        }

        return FNV1A(&HashableFields, #IPV4HeaderHashable)
    }

    define void Initialize() {
        this->Version := 4
        this->IHL := 5

        this->TimeToLive := 250 As i8
    }

    define void FlipEndianess() {
        this->TotalLength := NetworkShort(this->TotalLength)
        this->Identification := NetworkShort(this->Identification)
        this->Flags_FragmentOffset := NetworkShort(this->Flags_FragmentOffset)
        this->Source := NetworkInt(this->Source)
        this->Destination := NetworkInt(this->Destination)
    }
}

i32 PACKET_DATA_IPV4_HEADER := RegisterPacketData("IPv4 Header")

struct IPV4PacketOptions {
    i32 Destination,
    i8 ProtocolNumber
}

declare NetworkProtocolPrototype* GetIPV4ProtocolPrototype()

struct IPV4Layer {
    NetworkInterface* Interface
    NetworkProtocol* LinkLayer

    NetworkProtocol* AsProtocol

    ARPLayer* ARP
    i16 NextPacketID

    AVLTree* InflightFragments ; <i16, PointerArray*>
    AVLTree* ProtocolHandlers ; <i8, NetworkProtocol*>

    static self* New(NetworkInterface* Interface, NetworkProtocol* LinkLayer) {
        self* this := Alloc(#self)

        this->Interface := Interface
        this->LinkLayer := LinkLayer

        this->AsProtocol := Interface->AddProtocol("IPV4", GetIPV4ProtocolPrototype(), this)

        this->ARP := Interface->GetProtocol("ARP")->this
        this->NextPacketID := 0x1234

        EthernetLayer* Ethernet := Interface->GetProtocol("Ethernet")->this
        Ethernet->AddEtherType(ETHERTYPE_IPV4, this->AsProtocol)

        this->InflightFragments := AVLTree:New(#void*)
        this->ProtocolHandlers := AVLTree:New(#void*)        

        return this
    }

    define void AddProtocol(i8 ProtocolNumber, NetworkProtocol* Handler) {
        this->ProtocolHandlers->InsertPointer(ProtocolNumber, Handler)
    }

    define NetworkPacket* Enter(IPV4PacketOptions* Options) {
        MACAddress* DestinationMAC := this->ARP->Lookup(Options->Destination)

        EthernetPacketOptions EthernetOptions {
            EtherType: ETHERTYPE_IPV4,
            Destination: DestinationMAC
        }

        NetworkPacket* Packet := this->LinkLayer->Enter(&EthernetOptions)

        IPV4Header* Header := Packet->Mark(PACKET_DATA_IPV4_HEADER, #IPV4Header)

        Header->Version := 4
        Header->IHL := 5

        Header->TimeToLive := 64

        Header->Source := this->Interface->IP
        Header->Destination := Options->Destination

        Header->Identification := this->NextPacketID++

        Header->Protocol := Options->ProtocolNumber

        return Packet
    }

    define void SendSingle(NetworkPacket* Packet, IPV4Header* Header) {
        Header->TotalLength := Packet->Size As i16

        Header->FlipEndianess()

        Header->HeaderChecksum := RFC1071Checksum(Header, #IPV4Header)
        this->LinkLayer->Send(Packet)

        Header->FlipEndianess()
    }

    define void Send(NetworkPacket* Packet) {
        Packet->End()

        IPV4Header* Header := Packet->Get(PACKET_DATA_IPV4_HEADER)
        i32 NonIPSize := Packet->GetOffset(PACKET_DATA_IPV4_HEADER)
        i32 HeadersSize := Packet->GetEndOffset(PACKET_DATA_IPV4_HEADER)

        i32 MTU := (this->Interface->MTU / 8) * 8
        
        i16 MaximumFragmentDataSize := (MTU - #IPV4Header) As i16
        i16 MaximumFragmentSize := MTU As i16

        Info("IPv4: Maximum Fragment Size: %x\n", MaximumFragmentDataSize)

        i32 RemainingDataSize := Packet->Size - HeadersSize

        Info("IPv4: Packet Body Data Size: %x\n", RemainingDataSize)

        void* Data := Packet->Buffer + HeadersSize
        i32 FragmentOffset := 0

        while ((HeadersSize + RemainingDataSize) > this->Interface->MTU) {
            ; While the packet is larger than the MTU

            Header->Flags |= IPV4_FLAG_HAS_FOLLOWING_FRAGMENTS
            Header->FragmentOffset := (FragmentOffset / 8) As i16
            
            Packet->Size := MaximumFragmentSize

            this->SendSingle(Packet, Header)

            Info("IPv4: Send fragment [%x-%x]\n", FragmentOffset, FragmentOffset + MaximumFragmentDataSize)

            RemainingDataSize -= MaximumFragmentDataSize
            FragmentOffset += MaximumFragmentDataSize
            
            MoveMemory(Data, Data + FragmentOffset, RemainingDataSize)
        }

        Header->Flags &= ~IPV4_FLAG_HAS_FOLLOWING_FRAGMENTS
        Header->FragmentOffset := (FragmentOffset / 8) As i16

        Packet->Size := RemainingDataSize + #IPV4Header

        Info("IPv4: Send final fragment [%x-%x]\n", FragmentOffset, FragmentOffset + RemainingDataSize)

        this->SendSingle(Packet, Header)
    }

    define NetworkPacket* AssembleFragments(PointerArray* PreviousFragments, NetworkPacket* FinalFragment) {
        IPV4Header* Header := FinalFragment->Get(PACKET_DATA_IPV4_HEADER)
        i64 Hash := Header->Hash()

        i32 HeadersSize := FinalFragment->GetEndOffset(PACKET_DATA_IPV4_HEADER)
        i32 TotalSize := HeadersSize

        PreviousFragments->Push(FinalFragment)

        for (i32 Index := 0, Index < PreviousFragments->Count(), Index++) {
            NetworkPacket* Fragment := PreviousFragments->At(Index)
            IPV4Header* Header := Fragment->Get(PACKET_DATA_IPV4_HEADER)

            i32 DataOffset := Fragment->GetEndOffset(PACKET_DATA_IPV4_HEADER)
            i32 FragmentDataSize := Fragment->Size - DataOffset

            Info("IPv4: Fragmented packet %x: Fragment %i is %x bytes\n", Hash, Index, FragmentDataSize)
            TotalSize += FragmentDataSize
        }

        Info("IPv4: Fragmented packet %x: Total size is %x bytes\n", Hash, TotalSize)

        i32 Pages := TotalSize / PAGE_SIZE

        if (TotalSize % PAGE_SIZE) {
            Pages += 1
        }

        void* FullBuffer := KernelPageAllocator->AllocateVirtual(Pages)

        MoveMemory(FullBuffer, FinalFragment->Buffer, HeadersSize)
        i32 FragmentOffset := HeadersSize

        for (i32 Index := 0, Index < PreviousFragments->Count(), Index++) {
            NetworkPacket* Fragment := PreviousFragments->At(Index)

            i32 DataOffset := Fragment->GetEndOffset(PACKET_DATA_IPV4_HEADER)
            i32 DataSize := Fragment->Size - DataOffset

            MoveMemory(FullBuffer + FragmentOffset, Fragment->Buffer + DataOffset, DataSize)

            FragmentOffset += DataSize
        }

        PreviousFragments->Pop() ; remove the network interface owned "final" packet before freeing

        for (i32 Index := 0, Index < PreviousFragments->Count(), Index++) {
            NetworkPacket* Fragment := PreviousFragments->At(Index)

            Fragment->Free()
        }

        PreviousFragments->Free()

        return NetworkPacket:New(FinalFragment, FullBuffer, FragmentOffset)
    }

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* Header := Packet->Mark(PACKET_DATA_IPV4_HEADER, #IPV4Header)

        i16 ProvidedChecksum := Header->HeaderChecksum
        Header->HeaderChecksum := 0

        i16 CalculatedChecksum := RFC1071Checksum(Header, #IPV4Header)

        if (CalculatedChecksum != ProvidedChecksum) {
            Info("IPv4: Dropping packet from %ipv4 for bad header checksum\n", Header->Source)
            return
        }

        Header->FlipEndianess()
        i64 Hash := Header->Hash()

        Info("IPv4: Recieved packet with fragment hash %x\n", Hash)

        PointerArray* PreviousFragments := this->InflightFragments->GetPointer(Hash)

        if (Header->Flags & IPV4_FLAG_HAS_FOLLOWING_FRAGMENTS) {
            if (PreviousFragments = null) {
                PreviousFragments := PointerArray:New()

                this->InflightFragments->InsertPointer(Hash, PreviousFragments)
            }

            PreviousFragments->Push(Packet->Clone())

            return
        }

        if (PreviousFragments != null) {
            this->InflightFragments->Remove(Header->Identification)

            Packet := this->AssembleFragments(PreviousFragments, Packet)
        }

        Header := Packet->Get(PACKET_DATA_IPV4_HEADER)
        Packet->Seek(Packet->GetEndOffset(PACKET_DATA_IPV4_HEADER))

        NetworkProtocol* Protocol := this->ProtocolHandlers->GetPointer(Header->Protocol)

        if (Protocol = null) {
            Info("IPv4: Unknown protocol %x in packet from %ipv4\n", Header->Protocol, Header->Source)
            return
        }

        Protocol->Ingest(Packet)
    }
}

NetworkProtocolPrototype IPV4ProtocolPrototype {
    Enter: &IPV4Layer.Enter,
    Send: &IPV4Layer.Send,
    Ingest: &IPV4Layer.Ingest
}

define NetworkProtocolPrototype* GetIPV4ProtocolPrototype() {
    return &IPV4ProtocolPrototype
}

define void DoIPV4AddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
    i32 Address := Parameters[*ParameterIndex] As i32
    i8* Bytes := &Address As void*

    this->Print("%i.%i.%i.%i", Bytes[3], Bytes[2], Bytes[1], Bytes[0])

    *ParameterIndex += 1
}

PrintFormatPrototype IPV4AddressFormatPrototype {
	Name: "ipv4",
	Format: &DoIPV4AddressPrint
}

i32 IPV4_ADDRESS_FORMAT_PROTOTYPE_ID := AddPrintFormat(&IPV4AddressFormatPrototype)

/*
define IPV4Header* EnterIPV4Header(PacketBuffer* Buffer) {
    IPV4Header* Result := Buffer->Bump(#IPV4Header)

    Result->Initialize()

    return Result
}

define void ExitIPV4Header(PacketBuffer* Buffer, IPV4Header* Header) {
    Header->TotalLength := Buffer->Tell(Header)
    Header->FlipEndianess()

    i16 Checksum := RFC1071Checksum(Header, #IPV4Header)

    Header->HeaderChecksum := Checksum
}
*/