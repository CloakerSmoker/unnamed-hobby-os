
i8 IPV4_PROTOCOL_TCP := 6

struct TCPCounters {
    i32 Final
    i32 Synchronize
    i32 Reset
    i32 Push
    i32 Acknowledge
    i32 Urgent
    i32 CongestionExperienced
    i32 PeerSupportsECN
    i32 CongestionWindowReduced

    i32 Packets
}

enum TCPFlags As i8 {
    Final := 1
    Synchronize := 2
    Reset := 4
    Push := 8
    Acknowledge := 16
    Urgent := 32
}

define void DoTCPFlagsPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
    i8 Flags := Parameters[*ParameterIndex] As i8

    i32 Set := 0

    for (i32 Index := 0, Index < 8, Index++) {
        i8 Value := (1 << Index) As i8

        if (Flags & Value) {
            if (Set++ != 0) {
                this->Print(" ")
            }

            this->Print("%s", nameof:(Value As TCPFlags))
        }
    }

    *ParameterIndex += 1
}

PrintFormatPrototype TCPFlagsFormatPrototype {
	Name: "tcp-flags",
	Format: &DoTCPFlagsPrint
}

i32 TCP_FLAGS_FORMAT_PROTOTYPE_ID := AddPrintFormat(&TCPFlagsFormatPrototype)

struct TCPHeader {
    i16 SourcePort
    i16 DestinationPort

    i32 SequenceNumber
    i32 AcknowledgementNumber

    bits As i8 {
        [4:7] DataOffset
        [0] AccurateECN
    }

    bits As i8 {
        [0] Final
        [1] Synchronize
        [2] Reset
        [3] Push
        [4] Acknowledge
        [5] Urgent
        [6] CongestionExperienced
        [6] PeerSupportsECN
        [7] CongestionWindowReduced
        [0:7] Flags
    }

    i16 WindowSize
    i16 Checksum
    i16 UrgentPointer

    define void FlipEndianess() {
        this->SourcePort := NetworkShort(this->SourcePort)
        this->DestinationPort := NetworkShort(this->DestinationPort)
        this->SequenceNumber := NetworkInt(this->SequenceNumber)
        this->AcknowledgementNumber := NetworkInt(this->AcknowledgementNumber)
        this->WindowSize := NetworkShort(this->WindowSize)
        this->UrgentPointer := NetworkShort(this->UrgentPointer)
    }

    define i32 Size() {
        return this->DataOffset * 4
    }
}

struct TCPPacketOptions {
    i16 SourcePort

    i32 Destination
    i16 DestinationPort
}

i32 PACKET_DATA_TCP_HEADER := RegisterPacketData("TCP Header")
i32 PACKET_DATA_TCP_BODY := RegisterPacketData("TCP Body")

declare NetworkProtocolPrototype* GetTCPSocketProtocolPrototype()

;i8 TCP_SOCKET_STATE_NONE := 0
i8 TCP_SOCKET_STATE_LISTEN := 1
i8 TCP_SOCKET_STATE_SYNCHRONIZE_SENT := 2
i8 TCP_SOCKET_STATE_SYNCHRONIZE_RECEIVED := 3
i8 TCP_SOCKET_STATE_ESTABLISHED := 4

i8 TCP_SOCKET_STATE_FIN_WAIT_1 := 5
i8 TCP_SOCKET_STATE_FIN_WAIT_2 := 6
i8 TCP_SOCKET_STATE_TIME_WAIT := 7

i8 TCP_SOCKET_STATE_CLOSE_WAIT := 8
i8 TCP_SOCKET_STATE_CLOSE_LAST_ACK := 9

i8 TCP_SOCKET_STATE_CLOSED := 10
i8 TCP_SOCKET_STATE_REFUSED := 11
i8 TCP_SOCKET_STATE_CLOSING := 12

i8 TCP_SOCKET_STATE_ACCEPT_WAIT := 13

enum TCPError {
    Ok,
    PortBusy,
    NotBound,
    InvalidState,
    NothingToAccept
}

struct TCPFrame {
    void* Data
    i32 Size

    union {
        i8 Flags
        
        bits As i8 {
            [0] Final
            [1] Synchronize
            [2] Reset
            [3] Push
            [4] Acknowledge
            [5] Urgent
            [6] CongestionExperienced
            [6] PeerSupportsECN
            [7] CongestionWindowReduced
        }
    }

    i32 AcknowledgementNumber
    i32 SequenceNumber
    i32 NextSequenceNumber

    i32 FrameNumber

    i8 SendCount
    i8 DropCount
    i64 LastSentAt

    i32 SentAtWindowSize

    TCPFrame* Next

    define i32 LastByteSequenceNumber() {
        return this->NextSequenceNumber - 1
    }

    define i32 SequenceSize() {
        return this->NextSequenceNumber - this->SequenceNumber - 1
    }
}

struct TCPSocket {
    ; Bidirectional

    NetworkInterface* Interface
    NetworkProtocol* Transport
    NetworkProtocol* AsProtocol

    i16 LocalPort
    i32 RemoteAddress
    i16 RemotePort

    i8 State

    i64 RoundTripSum
    i64 RoundTripCount

    define i64 GuessRoundTripTime() {
        return this->RoundTripSum / this->RoundTripCount
    }

    i32 SequenceNumberBase
    i32 NextSequenceNumber

    i32 RemoteWindowSize
    i32 LastAcknowledgeNumberSent

    i32 MaximumSegmentSize

    TCPFrame* OldestFrame
    TCPFrame* NewestFrame

    i32 RemoteSequenceBase

    void* RecieveWindow
    i32 RecieveWindowTail
    i32 RecieveWindowSize

    define i32 RecieveWindowCapacity() {
        return this->RecieveWindowSize - this->RecieveWindowTail - 1
    }

    AVLTree* Children ; <i64, TCPSocket*>

    static self* New() {
        self* this := Alloc(#self)

        this->Children := AVLTree:New(#void*)

        this->SequenceNumberBase := 0x1000_0000
        this->NextSequenceNumber := 0
        this->RemoteWindowSize := 1
        this->MaximumSegmentSize := 1200

        this->RoundTripSum := 200
        this->RoundTripCount := 1

        this->State := TCP_SOCKET_STATE_CLOSED

        return this
    }

    define void BindInterface(NetworkInterface* Interface, NetworkProtocol* Transport) {
        this->Interface := Interface
        this->Transport := Transport

        this->AsProtocol := this->Interface->AddEphemeralProtocol(GetTCPSocketProtocolPrototype(), this)
    }

    define void Free() {
        if (this->State != TCP_SOCKET_STATE_CLOSED) {
            Panic("Attempt to free a TCP socket that is not closed")
        }

        Free(this->AsProtocol)

        this->Children->Free()
        Free(this->Children)

        if (this->RecieveWindow) {
            Free(this->RecieveWindow)
        }
    }

    TCPCounters SendCounters
    TCPCounters RecieveCounters

    define void UpdateCounters(TCPCounters* Counters, TCPHeader* TCP) {
        Counters->Final += TCP->Final
        Counters->Synchronize += TCP->Synchronize
        Counters->Reset += TCP->Reset
        Counters->Push += TCP->Push
        Counters->Acknowledge += TCP->Acknowledge
        Counters->Urgent += TCP->Urgent
        Counters->CongestionExperienced += TCP->CongestionExperienced
        Counters->CongestionWindowReduced += TCP->CongestionWindowReduced

        Counters->Packets += 1
    }

    TCPHeader* CurrentHeader

    define void IngestInfo(i8* Format, ... Args) {
        i8[200] Buffer
        i32 Length := RawFormatString(Buffer, 200, Format, Args)
        Buffer[Length] := 0

        this->Interface->Info("TCP(%ipv4:%net-port <-> :%net-port) IN %i [%tcp-flags] %s", this->RemoteAddress, this->RemotePort, this->LocalPort, this~>RecieveCounters->Packets, this->CurrentHeader->Flags, Buffer)
    }

    define void EgressInfo(TCPFrame* Frame, i8* Format, ... Args) {
        i8[200] Buffer
        i32 Length := RawFormatString(Buffer, 200, Format, Args)
        Buffer[Length] := 0

        ;Info("RawInfo(%s)\n", Buffer)

        this->Interface->Info("TCP(%ipv4:%net-port <-> :%net-port) OUT %i [%tcp-flags] %s", this->RemoteAddress, this->RemotePort, this->LocalPort, Frame->FrameNumber, Frame->Flags, Buffer)
    }

    define NetworkPacket* Enter(void* Options) {
        TCPPacketOptions TCPOptions {
            SourcePort: this->LocalPort,
            Destination: this->RemoteAddress,
            DestinationPort: this->RemotePort
        }

        NetworkPacket* Packet := this->Transport->Enter(&TCPOptions)

        return Packet
    }

    define void SendNow(TCPFrame* Frame) {
        NetworkPacket* Packet := this->Enter(null)
        TCPHeader* Header := Packet->Get(PACKET_DATA_TCP_HEADER)

        ;Info("SendNow %i, next = %i\n", Frame->SequenceNumber, Frame->NextSequenceNumber)

        Header->Flags := Frame->Flags
        Header->AcknowledgementNumber := Frame->AcknowledgementNumber
        Header->SequenceNumber := this->SequenceNumberBase + Frame->SequenceNumber
        Header->WindowSize := this->RecieveWindowCapacity() As i16

        if (Frame->Size) {
            Header->Push := true

            Packet->Seek(Packet->GetEndOffset(PACKET_DATA_TCP_HEADER))
            
            void* Body := Packet->Mark(PACKET_DATA_TCP_BODY, Frame->Size)
            MoveMemory(Body, Frame->Data, Frame->Size)
        }
        
        Frame->LastSentAt := GetUptimeMS()

        this->UpdateCounters(this~>SendCounters, Header)

        /*
        if (this~>SendCounters->Packets % 4 = 3) {
            this->EgressInfo(Frame, "Injected drop")
            return
        }
        ;*/

        /*
        if (this~>SendCounters->Push = 1) {
            ; Drop the very first PSH to ensure that we retransmit it
            return
        }
        ;*/

        /*
        if (Header->Push && this~>SendCounters->Push <= 2) {
            ; Drop the first 2 PSH-s
            return
        }
        ;*/

        this->Transport->Send(Packet)
    }

    define i32 NextFrameSequenceNumber() {
        if (this->NewestFrame) {
            return this->NewestFrame->NextSequenceNumber
        }
        else {
            return this->NextSequenceNumber
        }
    }

    i32 LastFrameNumber

    define TCPFrame* EnterFrame() {
        TCPFrame* Result := Alloc(#TCPFrame)

        Result->FrameNumber := this->LastFrameNumber++
        Result->SequenceNumber := this->NextFrameSequenceNumber()

        return Result
    }

    define void QueueFrame(TCPFrame* Frame) {
        if (this->NewestFrame) {
            this->NewestFrame->Next := Frame
        }
        else if (this->OldestFrame = null) {
            this->OldestFrame := Frame
        }
        
        this->NewestFrame := Frame

        i32 DataSize := Frame->Size
        i32 PhantomSize := Frame->Synchronize ;Frame->Acknowledge || 

        Frame->NextSequenceNumber := Frame->SequenceNumber + DataSize + PhantomSize
    }

    define void DumpQueue() {
        TCPFrame* Current := this->OldestFrame

        while (Current) {
            Info("Frame %i - %i (%i bytes of data), %b\n", Current->SequenceNumber, Current->NextSequenceNumber, Current->Size, Current->Flags)

            Current := Current->Next
        }
    }

    define void SendPump() {
        ; First: figure out what the remote has gotten
        ; Second: figure out what we can send
        ; Third: send it

        ;/*

        if !(this->OldestFrame) {
            return
        }

        DisableInterrupts()

        ;Info("SendPump: ")

        i64 Now := GetUptimeMS()
        i64 RTT := this->GuessRoundTripTime() + 10

        ;Info("RTT(%i), WND(%i)\n", RTT, this->RemoteWindowSize)

        ;this->DumpQueue()

        TCPFrame* Current := this->OldestFrame

        while (Current) {
            if (Current->SendCount > 0 && Current->SendCount != Current->DropCount) {
                ; If segment has been sent at least once, and hasn't already been marked
                ;  as dropped in all previous transmissions, check the timeout

                i64 CurrentRTT := RTT

                for (i32 Index := 0, Index < Current->SendCount, Index++) {
                    CurrentRTT *= 2
                }

                i64 Timeout := Current->LastSentAt + CurrentRTT

                if (Timeout < Now) {
                    this->EgressInfo(Current, "DROPPED. Was expected to arrive within %ims, has been %ims", CurrentRTT, Now - Current->LastSentAt)

                    Current->DropCount += 1
                }
            }
            else {
                break
            }

            Current := Current->Next
        }

        i32 Budget := this->RemoteWindowSize

        TCPFrame* Current := this->OldestFrame

        while (Current && Budget != 0) {
            i32 Size := Current->SequenceSize()

            if (Current->SendCount != Current->DropCount) {
                ; Packet has been sent but is not known to be dropped yet
                ; As long as the window has space, we can keep sending following
                ;  segments
            }
            else if (Size <= Budget) {
                ;Info("Send %i, SIZE(%i), TRY(%i)\n", Current->SequenceNumber, Size, Current->SendCount)

                if (Current->SendCount) {
                    this->EgressInfo(Current, "Retransmit Try %i, Data(%i)", Current->SendCount, Current->Size)
                }
                else {
                    this->EgressInfo(Current, "Send, Data(%i)", Current->Size)
                }

                Current->SendCount += 1

                this->SendNow(Current)

                Budget -= Size
            }
            else {
                break
            }

            Current := Current->Next
        }
        ;*/

        EnableInterrupts()
    }

    Timer* QuantumTimer

    define void Quantum() {
        loop {
            ;Info("Quantum\n")
			this->SendPump()
			
			SchedulerBlock()
		}
    }

    define void SetSendPumpTimer() {
        Task* QuantumTask := Scheduler->AddLightTask(null)

        QuantumTask~>Context->CallMethod(this, &self.Quantum)

        this->QuantumTimer := SetTimer(20, QuantumTask)
    }

    define void AbortSendPump() {
        ; Disable send pump timer, pause task

        this->QuantumTimer->Disable()
        this->QuantumTimer->Task->Pause()
    }

    define void ResetSendPump() {
        ; Abort pump timer/task, reset to clean state

        this->AbortSendPump()

        Task* QuantumTask := this->QuantumTimer->Task

        QuantumTask~>Context->CallMethod(this, &self.Quantum)

        this->QuantumTimer->Enable()
    }

    define void QueueDataFrame(void* Data, i32 Size) {
        TCPFrame* Frame := this->EnterFrame()

        Frame->Acknowledge := true
        Frame->AcknowledgementNumber := this->LastAcknowledgeNumberSent

        Frame->Data := Data
        Frame->Size := Size

        this->QueueFrame(Frame)
    }

    define void QueueData(void* Data, i32 Size) {
        i32 FullSegments := Size / this->MaximumSegmentSize

        i32 LastSegmentSize := Size % this->MaximumSegmentSize

        for (i32 SegmentIndex := 0, SegmentIndex < FullSegments, SegmentIndex++) {
            this->QueueDataFrame(Data + (SegmentIndex * this->MaximumSegmentSize), this->MaximumSegmentSize)
        }

        if (LastSegmentSize) {
            this->QueueDataFrame(Data + (FullSegments * this->MaximumSegmentSize), LastSegmentSize)
        }
    }

    define void QueueString(i8* Text) {
        this->QueueData(Text, StringLength(Text))
    }

    define void DrainQueue() {
        this->ResetSendPump()

        TCPFrame* Current := this->OldestFrame

        while (Current != null) {
            TCPFrame* Next := Current->Next

            Free(Next)
        }

        this->OldestFrame := null
        this->NewestFrame := null
    }

    define TCPFrame* DequeueFrame(TCPFrame* Frame) {
        ;Info("Clearing frame %i\n", Frame->SequenceNumber)
        ;Info("Next seq: %i\n", this->NextSequenceNumber)

        TCPFrame* Result := Frame->Next

        if (this->OldestFrame = Frame) {
            this->OldestFrame := Frame->Next
        }

        if (this->NewestFrame = Frame) {
            this->NewestFrame := null

            this->NextSequenceNumber := Frame->NextSequenceNumber
        }

        Free(Frame)
        return Result
    }

    i32 LastRemoteAcknowledge

    define void UpdateQueue(i32 RemoteAcknowledge) {
        RemoteAcknowledge -= this->SequenceNumberBase

        if (RemoteAcknowledge = this->LastRemoteAcknowledge) {
            ;Info("DUP ACK recieved starting at %i\n", RemoteAcknowledge)

            TCPFrame* Current := this->OldestFrame

            while (Current) {
                if (Current->SendCount = 0) {
                    break
                }

                if (Current->SendCount != Current->DropCount) {
                    ; We're not already aware of this packet being dropped

                    if (Current->SequenceNumber >= RemoteAcknowledge) {
                        ; If this packet is beyond the DUP ACK mark

                        Current->DropCount += 1
                    }
                }

                Current := Current->Next
            }
        }
        else {
            ;Info("Remote recieved up to %i\n", RemoteAcknowledge)
        }

        this->LastRemoteAcknowledge := RemoteAcknowledge

        this->ResetSendPump()

        TCPFrame* Current := this->OldestFrame

        while (Current != null) {
            if (Current->SendCount = 0) {
                break
            }

            if (Current->LastByteSequenceNumber() <= RemoteAcknowledge) {
                if (Current->SendCount = 1) {
                    i64 Now := GetUptimeMS()

                    i64 RoundTrip := Now - Current->LastSentAt

                    ;Info("RTT For Segment %i: %ims\n", Current->SequenceNumber, RoundTrip)

                    i64 OldRoundTripTime := this->GuessRoundTripTime()

                    this->RoundTripSum += RoundTrip
                    this->RoundTripCount += 1

                    this->EgressInfo(Current, "RTT(%i), %ims now %ims", RoundTrip, OldRoundTripTime, this->GuessRoundTripTime())
                }

                Current := this->DequeueFrame(Current)
            }
            else {
                Current := Current->Next
            }
        }
    }

    define void SendAcknowledge(i32 AcknowledgementNumber) {
        TCPFrame* Frame := this->EnterFrame()

        Frame->SentAtWindowSize := this->RecieveWindowCapacity()

        Frame->Acknowledge := true
        Frame->AcknowledgementNumber := AcknowledgementNumber

        this->LastAcknowledgeNumberSent := Frame->AcknowledgementNumber

        this->SendNow(Frame)
    }

    define i32 CalculateAcknowledgementNumber(NetworkPacket* Packet) {
        TCPHeader* TCP := Packet->Get(PACKET_DATA_TCP_HEADER)
        i32 BodySize := Packet->GetSize(PACKET_DATA_TCP_BODY)
        i32 PhantomSize := TCP->Synchronize + (TCP->Final & 1)

        return TCP->SequenceNumber + BodySize + PhantomSize
    }

    define void SendAcknowledge(NetworkPacket* Packet) {
        this->SendAcknowledge(this->CalculateAcknowledgementNumber(Packet))
    }

    define void SendDuplicateAcknowledge() {
        this->SendAcknowledge(this->LastAcknowledgeNumberSent)
    }

    declare void Request(i16, i32, i16)

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* IP := Packet->Get(PACKET_DATA_IPV4_HEADER)
        TCPHeader* TCP := Packet->Get(PACKET_DATA_TCP_HEADER)

        this->UpdateCounters(this~>RecieveCounters, TCP)
        this->CurrentHeader := TCP

        /*
        if (this~>RecieveCounters->Packets % 4 = 3) {
            this->IngestInfo("Injected drop")
            return
        }
        ;*/

        /*
        if (this~>RecieveCounters->Push = 1) {
            ; Drop the very first PSH to ensure that the second PSH is recieved and
            ;  ignored, and that the retransmission is accepted
            return
        }
        ;*/

        /*
        if (this~>RecieveCounters->Acknowledge = 2) {
            ; Drop the 2nd ACK to ensure that we retransmit correctly
            return
        }
        ;*/

        if (this->State = TCP_SOCKET_STATE_LISTEN) {
            i64 ChildID := IP->Source << 32
            ChildID |= TCP->SourcePort

            TCPSocket* Child := this->Children->GetPointer(ChildID)

            if !(Child) {
                Child := TCPSocket:New()
                Child->BindInterface(this->Interface, this->Transport)
                Child->Request(this->LocalPort, IP->Source, TCP->SourcePort)

                this->IngestInfo("LISTEN +> ACCEPT_WAIT (for %ipv4:%net-port)", IP->Source, TCP->SourcePort)

                this->Children->InsertPointer(ChildID, Child)
            }

            Child->Ingest(Packet)

            if (Child->State = TCP_SOCKET_STATE_CLOSED) {
                this->Children->Remove(ChildID)

                ;Child->Free()
            }
        }
        else if (this->State = TCP_SOCKET_STATE_ACCEPT_WAIT) {
            if (TCP->Synchronize) {
                this->RemoteWindowSize := (TCP->WindowSize As i32) & 0xFFFF
                this->RemoteSequenceBase := TCP->SequenceNumber

                this->IngestInfo("ACCEPT_WAIT -> ACCEPT_WAIT")

                this->LastAcknowledgeNumberSent := this->CalculateAcknowledgementNumber(Packet)
            }
        }
        else if (this->State = TCP_SOCKET_STATE_SYNCHRONIZE_SENT) {
            if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)
            }

            if (TCP->Synchronize) {
                this->RemoteWindowSize := (TCP->WindowSize As i32) & 0xFFFF
                this->RemoteSequenceBase := TCP->SequenceNumber

                if (TCP->Acknowledge) {
                    this->IngestInfo("SYN_SENT -> ESTABLISHED")
                    this->State := TCP_SOCKET_STATE_ESTABLISHED
                }
                else {
                    this->IngestInfo("SYN_SENT -> SYN_RECV")
                    this->State := TCP_SOCKET_STATE_SYNCHRONIZE_RECEIVED
                }

                this->SendAcknowledge(Packet)
            }
            else {
                this->IngestInfo("SYN_SENT -> CLOSED")
                this->State := TCP_SOCKET_STATE_CLOSED
            }
        }
        else if (this->State = TCP_SOCKET_STATE_SYNCHRONIZE_RECEIVED) {
            if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                this->IngestInfo("SYN_RECV -> ESTABLISHED")
                this->State := TCP_SOCKET_STATE_ESTABLISHED
            }
        }
        else if (this->State = TCP_SOCKET_STATE_ESTABLISHED) {
            if (TCP->Synchronize) {
                this->RemoteWindowSize := (TCP->WindowSize As i32) & 0xFFFF
                this->RemoteSequenceBase := TCP->SequenceNumber

                this->SendAcknowledge(Packet)
            }
            
            if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                i32 DataSize := Packet->GetSize(PACKET_DATA_TCP_BODY)

                if (DataSize != 0) {
                    i32 ExpectedSequenceNumber := this->RemoteSequenceBase + this->RecieveWindowTail + 1

                    this->IngestInfo("Data(%i) Seq(%i) Expected(%i)", DataSize, TCP->SequenceNumber, ExpectedSequenceNumber)

                    if (TCP->SequenceNumber = ExpectedSequenceNumber) {
                        MoveMemory(this->RecieveWindow + this->RecieveWindowTail, Packet->Get(PACKET_DATA_TCP_BODY), DataSize)
                        this->RecieveWindowTail += DataSize

                        this->IngestInfo("In-order, local window size now %i", this->RecieveWindowCapacity())

                        this->SendAcknowledge(Packet)
                    }
                    else {
                        this->IngestInfo("Out-of-order, replying with DUP ACK for %i", this->LastAcknowledgeNumberSent)
                        this->SendDuplicateAcknowledge()
                    }
                }
            }
            
            if (TCP->Final & 1) {
                this->IngestInfo("ESTABLISHED -> CLOSE_WAIT")

                this->State := TCP_SOCKET_STATE_CLOSE_WAIT
                this->DrainQueue()

                TCPFrame* Frame := this->EnterFrame()

                Frame->Final := true
                Frame->Acknowledge := true
                Frame->AcknowledgementNumber := this->CalculateAcknowledgementNumber(Packet)

                this->QueueFrame(Frame)
            }
        }
        else if (this->State = TCP_SOCKET_STATE_CLOSE_WAIT) {
            if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                this->IngestInfo("CLOSE_WAIT -> CLOSED")
                this->State := TCP_SOCKET_STATE_CLOSED
            }
        }
        else if (this->State = TCP_SOCKET_STATE_FIN_WAIT_1) {
            if (TCP->Acknowledge && TCP->Final & 1) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                this->IngestInfo("FIN_WAIT_1 -> CLOSED")
                this->SendAcknowledge(Packet)
                this->State := TCP_SOCKET_STATE_CLOSED
            }
            else if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                this->IngestInfo("FIN_WAIT_1 -> FIN_WAIT_2")
                this->State := TCP_SOCKET_STATE_FIN_WAIT_2
            }
            else if (TCP->Final & 1) {
                this->IngestInfo("FIN_WAIT_1 -> CLOSING")
                this->SendAcknowledge(Packet)
                this->State := TCP_SOCKET_STATE_CLOSING
            }
        }
        else if (this->State = TCP_SOCKET_STATE_FIN_WAIT_2) {
            if (TCP->Final & 1) {
                this->IngestInfo("FIN_WAIT_2 -> CLOSED")
                this->SendAcknowledge(Packet)
                this->State := TCP_SOCKET_STATE_CLOSED
            }
        }
        else if (this->State = TCP_SOCKET_STATE_CLOSING) {
            if (TCP->Acknowledge) {
                this->UpdateQueue(TCP->AcknowledgementNumber)

                this->IngestInfo("CLOSING -> CLOSED")
                this->State := TCP_SOCKET_STATE_CLOSED
            }
        }
    }

    ; "API" stuff

    define void InitializeDataFlow() {
        this->RecieveWindow := Alloc(0x1_0000)
        this->RecieveWindowSize := 0x1_0000

        this->SetSendPumpTimer()
    }

    define void Request(i16 LocalPort, i32 RemoteAddress, i16 RemotePort) {
        this->LocalPort := LocalPort
        this->RemoteAddress := RemoteAddress
        this->RemotePort := RemotePort

        this->State := TCP_SOCKET_STATE_ACCEPT_WAIT
    }

    define TCPSocket* AcceptSelf() {
        this->State := TCP_SOCKET_STATE_SYNCHRONIZE_RECEIVED

        this->InitializeDataFlow()
        
        TCPFrame* Frame := this->EnterFrame()
        
        Frame->Synchronize := true
        Frame->Acknowledge := true
        Frame->AcknowledgementNumber := this->LastAcknowledgeNumberSent

        this->QueueFrame(Frame)

        return this
    }

    define TCPSocket* FindAcceptCandidate() {
        i32 Count := this->Children->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            TCPSocket* Child := this->Children->PointerAt(Index)

            if (Child->State = TCP_SOCKET_STATE_ACCEPT_WAIT) {
                return Child
            }
        }

        return null
    }

    ; Actual API

    define TCPError Accept(TCPSocket** Out) {
        if (this->State != TCP_SOCKET_STATE_LISTEN) {
            return TCPError::InvalidState
        }

        loop {
            TCPSocket* Child := this->FindAcceptCandidate()

            if (Child) {
                *Out := Child->AcceptSelf()
                return TCPError::Ok
            }

            SchedulerYield()
        }

        return TCPError::NothingToAccept
    }

    define TCPError Connect(i32 RemoteAddress, i16 RemotePort) {
        if (this->State != TCP_SOCKET_STATE_CLOSED) {
            return TCPError::InvalidState
        }

        this->RemoteAddress := RemoteAddress
        this->RemotePort := RemotePort

        this->State := TCP_SOCKET_STATE_SYNCHRONIZE_SENT

        this->InitializeDataFlow()

        TCPFrame* Frame := this->EnterFrame()
        Frame->Synchronize := true

        this->QueueFrame(Frame)

        return TCPError::Ok
    }

    define TCPError Listen() {
        if (this->State != TCP_SOCKET_STATE_CLOSED) {
            return TCPError::InvalidState
        }

        this->State := TCP_SOCKET_STATE_LISTEN
    }

    define TCPError Poll(i32 Mode, i32* Out) {
        *Out := 0

        if (this->State = TCP_SOCKET_STATE_LISTEN) {
            if (Mode & POLL_FOR_READ) {
                if (this->FindAcceptCandidate() != null) {
                    *Out |= POLL_CAN_READ
                }

                return TCPError::Ok
            }
        }
        else if (this->State = TCP_SOCKET_STATE_ESTABLISHED) {
            if (Mode & POLL_FOR_READ) {
                if (this->RecieveWindowTail) {
                    *Out |= POLL_CAN_WRITE
                }

                return TCPError::Ok
            }
        }
        
        return TCPError::InvalidState
    }

    define TCPError Send(void* Buffer, i32 Size, i32* Out) {
        if (this->State != TCP_SOCKET_STATE_ESTABLISHED) {
            return TCPError::InvalidState    
        }

        this->QueueData(Buffer, Size)
        *Out := Size

        return TCPError::Ok
    }

    define TCPError Recieve(void* Buffer, i32 MaximumSize, i32* Out) {
        if (this->State != TCP_SOCKET_STATE_ESTABLISHED) {
            return TCPError::InvalidState
        }

        while (this->RecieveWindowTail = 0) { SchedulerYield() }

        i32 ReadSize := MaximumSize

        if (MaximumSize > this->RecieveWindowTail) {
            ReadSize := this->RecieveWindowTail
        }

        MoveMemory(Buffer, this->RecieveWindow, ReadSize)

        this->RemoteSequenceBase += ReadSize
        this->RecieveWindowTail -= ReadSize

        MoveMemory(this->RecieveWindow, this->RecieveWindow + ReadSize, this->RecieveWindowTail)

        *Out := ReadSize
        return TCPError::Ok
    }

    define void Flush() {
        while (this->OldestFrame) {
            SchedulerYield()
        }
    }

    define void Close() {
        this->State := TCP_SOCKET_STATE_FIN_WAIT_1
        this->DrainQueue()

        TCPFrame* FinalAcknowledge := this->EnterFrame()

        FinalAcknowledge->Final := true
        FinalAcknowledge->Acknowledge := true
        FinalAcknowledge->AcknowledgementNumber := this->LastAcknowledgeNumberSent

        this->QueueFrame(FinalAcknowledge)
    }
}

NetworkProtocolPrototype TCPSocketProtocolPrototype {
    Enter: &TCPSocket.Enter,
    ;Send: &TCPSocket.Send,
    Ingest: &TCPSocket.Ingest
}

define NetworkProtocolPrototype* GetTCPSocketProtocolPrototype() {
    return &TCPSocketProtocolPrototype
}

struct TCPPseudoHeader {
    i32 Source
    i32 Destination
    i8 Padding
    i8 Protocol
    i16 Length

    define void FlipEndianess() {
        this->Padding := 0

        this->Source := NetworkInt(this->Source)
        this->Destination := NetworkInt(this->Destination)
        this->Length := NetworkShort(this->Length)
    }
}

declare NetworkProtocolPrototype* GetTCPLayerProtocolPrototype()

i16 TCP_OUTGOING_PORT_BASE := 6_0000 As i16

struct TCPLayer {
    NetworkInterface* Interface
    NetworkProtocol* Transport

    NetworkProtocol* AsProtocol

    AVLTree* Sockets ; <i16, NetworkProtocol*>

	static self* New(NetworkInterface* Interface, NetworkProtocol* Transport) {
		self* this := Alloc(#self)

		this->Interface := Interface
		this->Transport := Transport

        this->AsProtocol := Interface->AddProtocol("TCP", GetTCPLayerProtocolPrototype(), this)

        IPV4Layer* IPV4 := Transport->this
        IPV4->AddProtocol(IPV4_PROTOCOL_TCP, this->AsProtocol)

        this->Sockets := AVLTree:New(#void*)

        return this
    }

    define NetworkPacket* Enter(TCPPacketOptions* Options) {
        IPV4PacketOptions IPOptions {
            Destination: Options->Destination,
            ProtocolNumber: IPV4_PROTOCOL_TCP
        }

        NetworkPacket* Packet := this->Transport->Enter(&IPOptions)

        TCPHeader* Header := Packet->Mark(PACKET_DATA_TCP_HEADER, #TCPHeader)

        Header->SourcePort := Options->SourcePort
        Header->DestinationPort := Options->DestinationPort

        Header->DataOffset := 5

        return Packet
    }

    define i16 Checksum(NetworkPacket* Packet) {
        IPV4Header* IP := Packet->Get(PACKET_DATA_IPV4_HEADER)
        TCPHeader* TCP := Packet->Get(PACKET_DATA_TCP_HEADER)
        void* Data := Packet->GetEnd(PACKET_DATA_TCP_HEADER)

        i64 State := RFC1071ChecksumStart()

        i32 DataSize := Packet->Tell() - Packet->GetEndOffset(PACKET_DATA_TCP_HEADER)
        i32 TotalSize := DataSize + #TCPHeader

        TCPPseudoHeader PseudoHeader {
            Source: IP->Source,
            Destination: IP->Destination,
            Protocol: IP->Protocol,
            Length: TotalSize As i16
        }

        PseudoHeader.FlipEndianess()
        TCP->FlipEndianess()
 
        State := RFC1071ChecksumUpdate(State, &PseudoHeader, #TCPPseudoHeader)
        State := RFC1071ChecksumUpdate(State, TCP, #TCPHeader)
        State := RFC1071ChecksumUpdate(State, Data, DataSize)

        TCP->FlipEndianess()

        return RFC1071ChecksumFinish(State)
    }

    define void Send(NetworkPacket* Packet) {
        TCPHeader* Header := Packet->Get(PACKET_DATA_TCP_HEADER)

        Header->Checksum := 0
        Header->Checksum := this->Checksum(Packet)

        Header->FlipEndianess()

        this->Transport->Send(Packet)
    }

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* IPV4 := Packet->Get(PACKET_DATA_IPV4_HEADER)
        TCPHeader* TCP := Packet->GetEnd(PACKET_DATA_IPV4_HEADER)

        i32 HeaderSize := TCP->Size()
        i32 DataSize := IPV4->TotalLength - #IPV4Header - TCP->Size()

        Packet->Mark(PACKET_DATA_TCP_HEADER, HeaderSize)
        Packet->Mark(PACKET_DATA_TCP_BODY, DataSize)

        ;Info("TCP Body Size %i\n", DataSize)

        TCP->FlipEndianess()

        NetworkProtocol* Handler := this->Sockets->GetPointer(TCP->DestinationPort)

        if (Handler = null) {
            this->Interface->Info("TCP: Dropping packet from %ipv4:%net-port -> :%net-port (no answer)", IPV4->Source, TCP->SourcePort, TCP->DestinationPort)
            return
        }

        TCPSocket* Socket := Handler->this

        if (Socket->State != TCP_SOCKET_STATE_LISTEN) {
            if (IPV4->Source != Socket->RemoteAddress || TCP->SourcePort != Socket->RemotePort) {
                this->Interface->Info("TCP: Dropping packet from %ipv4:%net-port -> :%net-port (already connected to %ipv4:%net-port)", IPV4->Source, TCP->SourcePort, TCP->DestinationPort, Socket->RemoteAddress, Socket->RemotePort)
            }
        }

        Handler->Ingest(Packet)
    }

    define TCPError Bind(i16 LocalPort, TCPSocket* Socket) {
        if (this->Sockets->Has(LocalPort)) {
            return TCPError::PortBusy
        }

        Socket->BindInterface(this->Interface, this->AsProtocol)

        Socket->LocalPort := LocalPort

        this->Sockets->InsertPointer(LocalPort, Socket->AsProtocol)

        return TCPError::Ok
    }
    
    define TCPError Connect(TCPSocket* Socket, i32 Address, i16 Port) {
        Socket->BindInterface(this->Interface, this->AsProtocol)

        Socket->LocalPort := (TCP_OUTGOING_PORT_BASE + this->Sockets->Count()) As i16

        this->Sockets->InsertPointer(Socket->LocalPort, Socket->AsProtocol)

        return Socket->Connect(Address, Port)
    }
}

NetworkProtocolPrototype TCPLayerProtocolPrototype {
    Enter: &TCPLayer.Enter,
    Send: &TCPLayer.Send,
    Ingest: &TCPLayer.Ingest
}

define NetworkProtocolPrototype* GetTCPLayerProtocolPrototype() {
    return &TCPLayerProtocolPrototype
}