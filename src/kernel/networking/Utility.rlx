
#Require "./src/kernel/networking/Endianess.rlx"

struct MACAddress {
    i8[6] Bytes
}

define void DoMACAddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
    MACAddress* Address := Parameters[*ParameterIndex] As void*

    this->Print("%B:%B:%B:%B:%B:%B", Address->Bytes[0], Address->Bytes[1], Address->Bytes[2], Address->Bytes[3], Address->Bytes[4], Address->Bytes[5])

    *ParameterIndex += 1
}

PrintFormatPrototype MACAddressFormatPrototype {
	Name: "mac",
	Format: &DoMACAddressPrint
}

i32 MAC_ADDRESS_FORMAT_PROTOTYPE_ID := AddPrintFormat(&MACAddressFormatPrototype)

struct PacketBuffer {
    void* Base
    void* Tail
    i32 Size

    define void Initialize(void* Base) {
        this->Base := Base
        this->Tail := Base
        this->Size := 0
    }
    
    define void* Bump(i32 Size) {
        void* Result := this->Tail

        this->Tail += Size
        this->Size += Size
        
        return Result
    }

    define i16 Tell(void* Base) {
        return ((this->Tail As i64) - (Base As i64)) As i16
    }

    define void WriteI32(i32 Number) {
        i32* Where := this->Bump(4)

        *Where := NetworkInt(Number)
    }
    define void WriteI16(i16 Number) {
        i16* Where := this->Bump(2)

        *Where := NetworkShort(Number)
    }
    define void WriteI8(i8 Number) {
        i8* Where := this->Bump(1)

        *Where := Number
    }
    define void Write(void* Buffer, i32 Size) {
        MoveMemory(this->Bump(Size), Buffer, Size)
    }
}


define i16 RFC1071Checksum(void* Data, i32 Size) {
    i64 Sum := 0

    while (Size > 1) {
        i16 Word := NetworkShort(*(Data As i16*))

        Sum += (Word As i32) & 0xFFFF
        Data += 2
        Size -= 2
    }

    if (Size > 0) {
        i16 Word := NetworkShort(*(Data As i8*))

        Sum += (Word As i32) & 0xFFFF
    }

    while (Sum > 0xFFFF) {
        Sum := (Sum >> 16) + (Sum & 0xFFFF)
    }

    return NetworkShort((~Sum) As i16)
}

define i32 PackIPV4(i32 A, i32 B, i32 C, i32 D) {
    return (A << 24) | (B << 16) | (C << 8) | (D << 0)
}