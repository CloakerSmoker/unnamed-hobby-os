
#Require "./src/kernel/networking/Endianess.rlx"

struct MACAddress {
    i8[6] Bytes

    define i8 Equals(MACAddress* Other) {
        return CompareMemory(this, Other, #self)
    }

    define i8 IsBroadcast?() {
        return !!(this->Bytes[0] & 0x80)
    }

    define i64 Hash() {
        return *(this As i64*)
    }

    define void Set(MACAddress* Other) {
        if (Other = null) {
            FastSetMemory8(this, 0, #self)
        }
        else {
            MoveMemory(this, Other, #self)
        }
    }
}

MACAddress* MAC_NULL := i8[0, 0, 0, 0, 0, 0] As MACAddress*
MACAddress* MAC_BROADCAST := i8[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF] As MACAddress*

define void DoMACAddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
    MACAddress* Address := Parameters[*ParameterIndex] As void*

    this->Print("%B:%B:%B:%B:%B:%B", Address->Bytes[0], Address->Bytes[1], Address->Bytes[2], Address->Bytes[3], Address->Bytes[4], Address->Bytes[5])

    *ParameterIndex += 1
}

PrintFormatPrototype MACAddressFormatPrototype {
	Name: "mac",
	Format: &DoMACAddressPrint
}

i32 MAC_ADDRESS_FORMAT_PROTOTYPE_ID := AddPrintFormat(&MACAddressFormatPrototype)

i8*[20] PacketDataNames
i32 NextPacketDataID := 0

define i32 RegisterPacketData(i8* Name) {
    i32 ID := NextPacketDataID++

    PacketDataNames[ID] := Name

    return ID
}

struct NetworkPacketMarker {
    i32 ID
    i32 Size
    i32 Offset
    i32 _
}

struct NetworkPacket {
    NetworkPacketMarker[10] Markers

    void* Buffer
    i32 Offset
    i32 Size

    i32 MarkerCount

    i32 ReferenceCount

    declare i32 Tell()

    static self* New(NetworkPacket* Template, void* NewBuffer, i32 NewSize) {
        self* this := CloneMemory(Template, #self)

        this->Buffer := NewBuffer
        this->Size := NewSize

        return this
    }

    static self* New(void* Buffer, i32 Size) {
        self* this := Alloc(#self)

        this->Buffer := Buffer
        this->Size := Size

        return this
    }

    static self* New(i32 Size) {
        i32 Pages := Size / PAGE_SIZE

        if (Size % PAGE_SIZE) {
            Pages += 1
        }

        void* Buffer := KernelPageAllocator->AllocateVirtual(2)

        return self:New(Buffer, Size)
    }

    define void* Mark(i32 ID, i32 Size) {
        void* Result := this->Buffer + this->Offset

        NetworkPacketMarker* Marker := this->Markers[this->MarkerCount++]

        Marker->ID := ID
        Marker->Offset := this->Offset
        Marker->Size := Size

        this->Offset += Size

        return Result
    }

    define NetworkPacketMarker* Find(i32 ID) {
        for (i32 Index := 0, Index < this->MarkerCount, Index++) {
            NetworkPacketMarker* Marker := this->Markers[Index]

            if (Marker->ID = ID) {
                return Marker
            }
        }

        return null
    }

    define void* Get(i32 ID) {
        return this->Buffer + this->Find(ID)->Offset
    }

    define void* GetEnd(i32 ID) {
        NetworkPacketMarker* Marker := this->Find(ID)

        return this->Buffer + Marker->Offset + Marker->Size
    }

    define i32 GetOffset(i32 ID) {
        return this->Find(ID)->Offset
    }

    define i32 GetEndOffset(i32 ID) {
        NetworkPacketMarker* Marker := this->Find(ID)

        return Marker->Offset + Marker->Size
    }

    define void Seek(i32 Offset) {
        this->Offset := Offset
    }

    define i32 Tell() {
        return this->Offset
    }

    define void* GetBuffer(i32 Offset) {
        return this->Buffer + Offset
    }

    define void* Bump(i32 Size) {
        void* Result := this->Buffer + this->Offset

        this->Offset += Size

        return Result
    }

    define void Extend(i32 ID, i32 AddSize) {
        NetworkPacketMarker* Marker := this->Find(ID)
        
        Marker->Size += AddSize
    }

    define void End() {
        this->Size := this->Offset
    }

    define self* Clone() {
        void* Buffer := CloneMemory(this->Buffer, this->Size)

        return self:New(this, Buffer, this->Size)
    }

    define void Release() {
        this->ReferenceCount -= 1
    }

    define void Free() {
        Free(this->Buffer)
        Free(this)
    }

    define void DumpMarkers() {
        Info("Markers for %x byte packet:\n", this->Size)

        for (i32 Index := 0, Index < this->MarkerCount, Index++) {
            NetworkPacketMarker* Marker := this->Markers[Index]

            i8* Name := PacketDataNames[Marker->ID]

            Info("%s (%x bytes):\n%hexdump\n", Name, Marker->Size, this->Buffer + Marker->Offset, Marker->Size)
        }
    }
}

struct NetworkProtocolPrototype {
    NetworkPacket*(void*, void*) Enter
    void(void*, NetworkPacket*) Send
    void(void*, NetworkPacket*) Ingest
}

struct NetworkProtocol {
    NetworkProtocolPrototype* Prototype

    union {
        void* State
        void* this
    }

    static self* New(NetworkProtocolPrototype* Prototype, void* State) {
        self* this := Alloc(#self)

        this->Prototype := Prototype
        this->State := State

        return this
    }

    define NetworkPacket* Enter(void* Options) {
        return this->Prototype->Enter(this->State, Options)
    }

    define void Send(NetworkPacket* Packet) {
        this->Prototype->Send(this->State, Packet)
    }

    define void Ingest(NetworkPacket* Packet) {
        this->Prototype->Ingest(this->State, Packet)
    }
}

struct NetworkInterface {
    MACAddress* MAC
    i32 IP
    i32 MTU
    i32 DNS

    AVLTree* Protocols ; <FNV1A(Name), NetworkProtocol*>

    NetworkProtocol* SendProtocol
    NetworkProtocol* ReceiveProtocol

    static self* New() {
        self* this := Alloc(#self)

        this->Protocols := AVLTree:New(#void*)

        return this
    }

    define NetworkProtocol* AddProtocol(i8* Name, NetworkProtocolPrototype* Prototype, void* State) {
        NetworkProtocol* Protocol := NetworkProtocol:New(Prototype, State)

        this->Protocols->InsertPointer(FNV1A(Name), Protocol)

        return Protocol
    }

    define NetworkProtocol* AddEphemeralProtocol(NetworkProtocolPrototype* Prototype, void* State) {
        return NetworkProtocol:New(Prototype, State)
    }

    define NetworkProtocol* GetProtocol(i8* Name) {
        return this->Protocols->GetPointer(FNV1A(Name))
    }

    define void DoSend(NetworkPacket* Packet) {
        this->SendProtocol->Ingest(Packet)
    }

    define void OnReceive(NetworkPacket* Packet) {
        this->ReceiveProtocol->Ingest(Packet)
    }
}

define i64 RFC1071ChecksumStart() {
    return 0
}

define i64 RFC1071ChecksumUpdate(i64 Sum, void* Data, i32 Size) {
    while (Size > 1) {
        i16 Word := NetworkShort(*(Data As i16*))

        Sum += (Word As i32) & 0xFFFF
        Data += 2
        Size -= 2
    }

    if (Size > 0) {
        i16 Word := NetworkShort(*(Data As i8*))

        Sum += (Word As i32) & 0xFFFF
    }

    return Sum
}

define i16 RFC1071ChecksumFinish(i64 Sum) {
    while (Sum > 0xFFFF) {
        Sum := (Sum >> 16) + (Sum & 0xFFFF)
    }

    return NetworkShort((~Sum) As i16)
}

define i16 RFC1071Checksum(void* Data, i32 Size) {
    return RFC1071ChecksumFinish(RFC1071ChecksumUpdate(RFC1071ChecksumStart(), Data, Size))
}

define i32 PackIPV4(i32 A, i32 B, i32 C, i32 D) {
    return (A << 24) | (B << 16) | (C << 8) | (D << 0)
}