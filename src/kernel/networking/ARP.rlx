

i16 ARP_LINK_LAYER_ETHERNET := 0x0001

i16 ARP_HARDWARE_TYPE_ETHERNET := 0x0001
i16 ARP_PROTOCOL_TYPE_IPV4 := 0x0800

i16 ARP_PROTOCOL_IPV4 := 0x0800

i16 ARP_OPCODE_REQUEST := 1
i16 ARP_OPCODE_REPLY := 2

struct ARPHeader {
    union {
        i16 LinkLayerType
        i16 HardwareType
    }
    i16 ProtocolType
    union {
        i8 LinkLayerSize
        i8 HardwareSize
    }
    i8 ProtocolSize
    i16 Opcode
    i8[0] Data

    define void FlipEndianess() {
        this->LinkLayerType := NetworkShort(this->LinkLayerType)
        this->ProtocolType := NetworkShort(this->ProtocolType)
        this->LinkLayerSize := NetworkByte(this->LinkLayerSize)
        this->ProtocolSize := NetworkByte(this->ProtocolSize)
        this->Opcode := NetworkShort(this->Opcode)
    }

    define void MakeIPV4() {
        this->LinkLayerType := ARP_LINK_LAYER_ETHERNET
        this->ProtocolType := ARP_PROTOCOL_IPV4
        this->LinkLayerSize := 6
        this->ProtocolSize := 4
        this->Opcode := ARP_OPCODE_REQUEST
    }
}

/*

There's a compiler bug for

struct A unaligned {
    union {
        i8[6] Field
    }
    union {
        i32 Field2
    }
}

where padding is still included

*/

struct ARPBodyIPV4 unaligned {
    MACAddress SenderHardwareAddress
    i32 SenderProtocolAddress
    MACAddress TargetHardwareAddress
    i32 TargetProtocolAddress
    
    define void FlipEndianess() {
        this->SenderProtocolAddress := NetworkInt(this->SenderProtocolAddress)
        this->TargetProtocolAddress := NetworkInt(this->TargetProtocolAddress)
    }
}

struct ARPTableEntry {
    i32 ProtocolAddress
    MACAddress HardwareAddress
}

i32 PACKET_DATA_ARP_HEADER := RegisterPacketData("ARP Header")
i32 PACKET_DATA_ARP_BODY := RegisterPacketData("ARP Body")

declare NetworkProtocolPrototype* GetARPProtocolPrototype()

struct ARPLayer {
    NetworkInterface* Interface
    NetworkProtocol* LinkLayer

    AVLTree* Cache ; <i32, ARPTableEntry>

    static self* New(NetworkInterface* Interface, NetworkProtocol* LinkLayer) {
        self* this := Alloc(#self)

        this->Interface := Interface
        this->LinkLayer := LinkLayer

        this->Cache := AVLTree:New(#ARPTableEntry)

        NetworkProtocol* ThisProtocol := Interface->AddProtocol("ARP", GetARPProtocolPrototype(), this)

        EthernetLayer* Ethernet := LinkLayer->this

        Ethernet->AddEtherType(ETHERTYPE_ARP, ThisProtocol)

        return this
    }

    define NetworkPacket* Enter(MACAddress* Destination, i16 Opcode) {
        if (Destination->Hash() = 0) {
            Destination := MAC_BROADCAST
        }

        Info("Building ARP packet to %mac\n", Destination)

        EthernetPacketOptions Options {
            EtherType: ETHERTYPE_ARP,
            Destination: Destination
        }

        NetworkPacket* Packet := this->LinkLayer->Enter(&Options)

        ARPHeader* Header := Packet->Mark(PACKET_DATA_ARP_HEADER, #ARPHeader)

        Header->Opcode := Opcode

        Header->HardwareType := ARP_HARDWARE_TYPE_ETHERNET
        Header->HardwareSize := 6

        Header->ProtocolType := ARP_PROTOCOL_TYPE_IPV4
        Header->ProtocolSize := 4

        Packet->Mark(PACKET_DATA_ARP_BODY, #ARPBodyIPV4)

        return Packet
    }

    define void Send(NetworkPacket* Packet) {
        ARPHeader* Header := Packet->Get(PACKET_DATA_ARP_HEADER)
        Header->FlipEndianess()

        ARPBodyIPV4* Body := Packet->Get(PACKET_DATA_ARP_BODY)
        Body->FlipEndianess()

        this->LinkLayer->Send(Packet)
    }

    define void SendRequest(MACAddress* TargetHardwareAddress, i32 TargetProtocolAddress) {
        NetworkPacket* Packet := this->Enter(TargetHardwareAddress, ARP_OPCODE_REQUEST)
        ARPBodyIPV4* Body := Packet->Get(PACKET_DATA_ARP_BODY)

        Body~>SenderHardwareAddress->Set(this->Interface->MAC)
        Body->SenderProtocolAddress := this->Interface->IP

        Body~>TargetHardwareAddress->Set(TargetHardwareAddress)
        Body->TargetProtocolAddress := TargetProtocolAddress

        this->Send(Packet)
    }

    define void SendReply(MACAddress* TargetHardwareAddress, i32 TargetProtocolAddress) {
        NetworkPacket* Packet := this->Enter(TargetHardwareAddress, ARP_OPCODE_REQUEST)
        ARPBodyIPV4* Body := Packet->Get(PACKET_DATA_ARP_BODY)

        Body~>SenderHardwareAddress->Set(this->Interface->MAC)
        Body->SenderProtocolAddress := this->Interface->IP

        Body~>TargetHardwareAddress->Set(TargetHardwareAddress)
        Body->TargetProtocolAddress := TargetProtocolAddress

        this->Send(Packet)
    }

    define void PopulateCache(MACAddress* HardwareAddress, i32 ProtocolAddress) {
        if (HardwareAddress->Hash() = 0 || ProtocolAddress = 0) {
            return
        }

        ARPTableEntry Entry {
            ProtocolAddress: ProtocolAddress
        }

        Info("Cache %ipv4 -> %mac\n", ProtocolAddress, HardwareAddress)

        Entry~>HardwareAddress->Set(HardwareAddress)

        this->Cache->Insert(ProtocolAddress, &Entry)

        this->Cache->Print()
    }

    define ARPTableEntry* LookupCachedEntry(i32 ProtocolAddress) {
        return this->Cache->Get(ProtocolAddress)
    }

    define void EvictProtocolAddress(i32 ProtocolAddress) {
        Info("Evict %ipv4\n", ProtocolAddress)

        this->Cache->Print()

        this->Cache->Remove(ProtocolAddress)
    }

    define void EvictEntry(ARPTableEntry* Entry) {
        this->Cache->Remove(Entry->ProtocolAddress)
    }

    define void HandleRequest(NetworkPacket* Packet, ARPHeader* Header) {
        ARPBodyIPV4* Body := Packet->Get(PACKET_DATA_ARP_BODY)

        this->PopulateCache(Body~>SenderHardwareAddress, Body->SenderProtocolAddress)

        if (Body->TargetProtocolAddress = this->Interface->IP) {
            this->SendReply(Body~>SenderHardwareAddress, Body->SenderProtocolAddress)
        }

        if (Body~>SenderHardwareAddress->Equals(this->Interface->MAC)) {
            this->SendReply(Body~>SenderHardwareAddress, Body->SenderProtocolAddress)
        }
    }

    define void HandleReply(NetworkPacket* Packet, ARPHeader* Header) {
        ARPBodyIPV4* Body := Packet->Get(PACKET_DATA_ARP_BODY)

        this->PopulateCache(Body~>SenderHardwareAddress, Body->SenderProtocolAddress)
    }

    define void Ingest(NetworkPacket* Packet) {
        EthernetHeader* Ethernet := Packet->Get(PACKET_DATA_ETHERNET)

        ARPHeader* Header := Packet->Mark(PACKET_DATA_ARP_HEADER, #ARPHeader)
        Header->FlipEndianess()

        if (Header->HardwareType != ARP_HARDWARE_TYPE_ETHERNET) {
            Info("Bad ARP packet recieved from %mac, unknown hardware type %x\n", Ethernet~>Source, Header->HardwareType)
            return
        }
        else if (Header->HardwareSize != 6) {
            Info("Bad ARP packet recieved from %mac, wrong hardware size %i\n", Ethernet~>Source, Header->HardwareSize)
            return
        }
        else if (Header->ProtocolType != ARP_PROTOCOL_TYPE_IPV4) {
            Info("Bad ARP packet recieved from %mac, unknown protocol type %x\n", Ethernet~>Source, Header->ProtocolType)
            return
        }
        else if (Header->ProtocolSize != 4) {
            Info("Bad ARP packet recieved from %mac, wrong protocol size %i\n", Ethernet~>Source, Header->ProtocolSize)
            return
        }
        else if (Header->Opcode != ARP_OPCODE_REPLY && Header->Opcode != ARP_OPCODE_REQUEST) {
            Info("Bad ARP packet recieved from %mac, unknown opcode %x\n", Ethernet~>Source, Header->Opcode)
            return
        }

        ARPBodyIPV4* Body := Packet->Mark(PACKET_DATA_ARP_BODY, #ARPBodyIPV4)
        Body->FlipEndianess()

        if (Header->Opcode = ARP_OPCODE_REPLY) {
            this->HandleReply(Packet, Header)
        }
        else if (Header->Opcode = ARP_OPCODE_REQUEST) {
            this->HandleRequest(Packet, Header)
        }
    }

    define i8 ProbeIsAddressTaken(i32 ProtocolAddress) {
        this->EvictProtocolAddress(ProtocolAddress)

        for (i32 Index := 0, Index < 1, Index++) {
            this->SendRequest(MAC_NULL, ProtocolAddress)

            SchedulerYield()

            if (this->LookupCachedEntry(ProtocolAddress) != null) {
                return true
            }
        }

        return false
    }

    define MACAddress* Lookup(i32 ProtocolAddress) {
        if (ProtocolAddress = 0xFF_FF_FF_FF) {
            return MAC_BROADCAST
        }

        loop {
            ARPTableEntry* Entry := this->LookupCachedEntry(ProtocolAddress)

            if (Entry) {
                return Entry~>HardwareAddress
            }

            this->SendRequest(MAC_NULL, ProtocolAddress)

            i32 Delay := 10

            while (Delay-- > 0) {
                SchedulerYield()
            }
        }

        return null
    }

    define void Announce() {
        this->SendRequest(this->Interface->MAC, this->Interface->IP)
    }
}

NetworkProtocolPrototype ARPProtocolPrototype {
    Enter: null,
    Send: null,
    Ingest: &ARPLayer.Ingest
}

define NetworkProtocolPrototype* GetARPProtocolPrototype() {
    return &ARPProtocolPrototype
}