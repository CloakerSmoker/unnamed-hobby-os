
#Require "./src/kernel/networking/UDPSocket.rlx"
#Require "./src/kernel/networking/DNS.rlx"
;#Require "./src/kernel/networking/TCP.rlx"

NetworkInterface* FirstNetworkInterface := null

define void SetupNetworking() {
    FirstNetworkInterface := NetworkInterface:New()
    
    EthernetLayer* Ethernet := EthernetLayer:New(FirstNetworkInterface)
    ARPLayer* ARP := ARPLayer:New(FirstNetworkInterface, Ethernet->AsProtocol)
    IPV4Layer* IP := IPV4Layer:New(FirstNetworkInterface, Ethernet->AsProtocol)

    ICMPLayer* ICMP := ICMPLayer:New(FirstNetworkInterface, IP->AsProtocol)
    UDPLayer* UDP := UDPLayer:New(FirstNetworkInterface, IP->AsProtocol)
    ;TCPLayer* TCP := TCPLayer:New(FirstNetworkInterface, IP->AsProtocol)

    DHCPClient* DHCP := DHCPClient:New(FirstNetworkInterface, UDP->AsProtocol)

    DNSLayer* DNS := DNSLayer:New(FirstNetworkInterface)

    FirstE1000->Setup()

    Print("SetupNetworking: E1000 MAC: %mac\n", FirstE1000~>MAC)

    LinkE1000NetworkProtocol(FirstNetworkInterface, FirstE1000)

    FirstNetworkInterface->MTU := 1000
}

define void SetIP() {
    ARPLayer* ARP := FirstNetworkInterface->GetProtocol("ARP")->this

    for (i32 Index := 15, Index < 255, Index++) {
        i32 MyIP := PackIPV4(10, 0, 2, Index)

        i8 Result := ARP->ProbeIsAddressTaken(MyIP)
        Print("%ipv4 is taken? %i\n", MyIP, Result)

        if !(Result) {
            FirstNetworkInterface->IP := MyIP
            ARP->Announce()

            Print("Assigned %ipv4 to interface\n", MyIP)

            return
        }
    }

    Print("Couldn't find a free IP\n")
}

define void TestIPV4Fragmentation() {
    IPV4Layer* IP := FirstNetworkInterface->GetProtocol("IPV4")->this

    IPV4PacketOptions Options {
        Destination: PackIPV4(10, 0, 2, 15),
        ProtocolNumber: 61
    }

    NetworkPacket* Packet := IP->Enter(&Options)

    Packet->Mark(PACKET_DATA_ARP_BODY, PAGE_SIZE)

    ;Packet->DumpMarkers()

    IP->Send(Packet)
}

define void TestICMPPing() {
    ICMPLayer* ICMP := FirstNetworkInterface->GetProtocol("ICMP")->this

    void* Data := KernelPageAllocator->AllocateVirtual(2)

    ;ICMP->SendPing(PackIPV4(10, 0, 2, 2), Data, 1400)
}

define void TestNetworking() {
    ;SetIP()

    ;/*
    DHCPClient* DHCP := FirstNetworkInterface->GetProtocol("DHCP")->this

    DHCP->SendDiscover(0)
    ;*/

    while (FirstNetworkInterface->DNS = 0) {
        SchedulerYield()
    }

    Print("DHCP: Leased: %ipv4. DNS: %ipv4\n", FirstNetworkInterface->IP, FirstNetworkInterface->DNS)

    ARPLayer* ARP := FirstNetworkInterface->GetProtocol("ARP")->this

    FirstNetworkInterface->GatewayMAC := ARP->Lookup(FirstNetworkInterface->Gateway)

    Print("DHCP: Gateway: %ipv4. Gateway MAC: %mac\n", FirstNetworkInterface->Gateway, FirstNetworkInterface->GatewayMAC)

    NetworkProtocol* RawTCP := FirstNetworkInterface->GetProtocol("TCP")
    TCPLayer* TCP := RawTCP->this

    TCPSocket* Socket := TCPSocket:New(FirstNetworkInterface, RawTCP)

    ;TCP->BindSocket(42830 As i16, Socket)

    Socket->Connect(PackIPV4(10, 2, 30, 3), 80)

    loop {}

    /*
    DNSLayer* DNS := FirstNetworkInterface->GetProtocol("DNS")->this

    DNS->Enable()

    i32 Result := DNS->Lookup("google.com")

    Info("google.com: %ipv4\n", Result)

    Print("DNS: google.com: %ipv4\n", Result)
    */

    /*
    UDPLayer* UDP := FirstNetworkInterface->GetProtocol("UDP")->this

    UDPPacketOptions Options {
        Destination: PackIPV4(255, 255, 255, 255),
        SourcePort: 60000 As i16,
        DestinationPort: 60000 As i16
    }

    NetworkPacket* Packet := UDP->Enter(&Options)

    Packet->Seek(Packet->Tell() + 100)

    UDP->Send(Packet)
    ;*/

    ;TestIPV4Fragmentation()
    ;TestICMPPing()
}