

NetworkInterface* FirstNetworkInterface := null

define void SetupNetworking() {
    FirstNetworkInterface := NetworkInterface:New()
    
    EthernetLayer* Ethernet := EthernetLayer:New(FirstNetworkInterface)
    ARPLayer* ARP := ARPLayer:New(FirstNetworkInterface, Ethernet->AsProtocol)
    IPV4Layer* IP := IPV4Layer:New(FirstNetworkInterface, Ethernet->AsProtocol)
    ICMPLayer* ICMP := ICMPLayer:New(FirstNetworkInterface, IP->AsProtocol)

    FirstE1000->Setup()

    Print("SetupNetworking: E1000 MAC: %mac\n", FirstE1000~>MAC)

    LinkE1000NetworkProtocol(FirstNetworkInterface, FirstE1000)

    FirstNetworkInterface->MTU := 1000
}

define void SetIP() {
    ARPLayer* ARP := FirstNetworkInterface->GetProtocol("ARP")->this

    for (i32 Index := 15, Index < 255, Index++) {
        i32 MyIP := PackIPV4(10, 0, 2, Index)

        i8 Result := ARP->ProbeIsAddressTaken(MyIP)
        Print("%ipv4 is taken? %i\n", MyIP, Result)

        if !(Result) {
            FirstNetworkInterface->IP := MyIP
            ARP->Announce()

            Print("Assigned %ipv4 to interface\n", MyIP)

            return
        }
    }

    Print("Couldn't find a free IP\n")
}

define void TestIPV4Fragmentation() {
    IPV4Layer* IP := FirstNetworkInterface->GetProtocol("IPV4")->this

    IPV4PacketOptions Options {
        Destination: PackIPV4(10, 0, 2, 15),
        ProtocolNumber: 61
    }

    NetworkPacket* Packet := IP->Enter(&Options)

    Packet->Mark(PACKET_DATA_ARP_BODY, PAGE_SIZE)

    ;Packet->DumpMarkers()

    IP->Send(Packet)
}

define void TestICMPPing() {
    ICMPLayer* ICMP := FirstNetworkInterface->GetProtocol("ICMP")->this

    void* Data := KernelPageAllocator->AllocateVirtual(2)

    ICMP->SendPing(PackIPV4(10, 0, 2, 2), Data, 1400)
}

define void TestNetworking() {
    SetIP()

    ;TestIPV4Fragmentation()
    TestICMPPing()
}