
#Require "./src/kernel/networking/Stack.rlx"



/*
NetworkInterface* FirstNetworkInterface := null

define void SetupNetworking() {
    FirstNetworkInterface := NetworkInterface:New()
    
    EthernetLayer* Ethernet := EthernetLayer:New(FirstNetworkInterface)
    ARPLayer* ARP := ARPLayer:New(FirstNetworkInterface, Ethernet->AsProtocol)
    IPV4Layer* IP := IPV4Layer:New(FirstNetworkInterface, Ethernet->AsProtocol)

    ICMPLayer* ICMP := ICMPLayer:New(FirstNetworkInterface, IP->AsProtocol)

    UDPLayer* UDP := UDPLayer:New(FirstNetworkInterface, IP->AsProtocol)
    TCPLayer* TCP := TCPLayer:New(FirstNetworkInterface, IP->AsProtocol)

    DHCPClient* DHCP := DHCPClient:New(FirstNetworkInterface, UDP->AsProtocol)

    DNSLayer* DNS := DNSLayer:New(FirstNetworkInterface)

    FirstE1000->Setup()

    Print("SetupNetworking: E1000 MAC: %mac\n", FirstE1000~>MAC)

    LinkE1000NetworkProtocol(FirstNetworkInterface, FirstE1000)

    FirstNetworkInterface->MTU := 1000
}

define void SetIP() {
    ARPLayer* ARP := FirstNetworkInterface->GetProtocol("ARP")->this

    for (i32 Index := 15, Index < 255, Index++) {
        i32 MyIP := PackIPV4(10, 0, 2, Index)

        i8 Result := ARP->ProbeIsAddressTaken(MyIP)
        Print("%ipv4 is taken? %i\n", MyIP, Result)

        if !(Result) {
            FirstNetworkInterface->IP := MyIP
            ARP->Announce()

            Print("Assigned %ipv4 to interface\n", MyIP)

            return
        }
    }

    Print("Couldn't find a free IP\n")
}

define void TestIPV4Fragmentation() {
    IPV4Layer* IP := FirstNetworkInterface->GetProtocol("IPV4")->this

    IPV4PacketOptions Options {
        Destination: PackIPV4(10, 0, 2, 15),
        ProtocolNumber: 61
    }

    NetworkPacket* Packet := IP->Enter(&Options)

    Packet->Mark(PACKET_DATA_ARP_BODY, PAGE_SIZE)

    ;Packet->DumpMarkers()

    IP->Send(Packet)
}

define void TestICMPPing() {
    ICMPLayer* ICMP := FirstNetworkInterface->GetProtocol("ICMP")->this

    void* Data := KernelPageAllocator->AllocateVirtual(2)

    ;ICMP->SendPing(PackIPV4(10, 0, 2, 2), Data, 1400)
}
*/

define void SocketListener() {
    TCPSocket* Socket := Network->CreateTCP()

    ;TCP->BindSocket(42830 As i16, Socket)
    ;TCP->BindSocket(7777 As i16, Socket)
    Network->Bind(IPv4("127.0.0.1"), 7777 As i16, Socket)

    ;Socket->Interface->SetKnobToggle("Ethernet.SpewInOut", true)

    ;Socket->Connect(PackIPV4(10, 0, 2, 2), 7778)

    ;while (Socket->State != TCP_SOCKET_STATE_ESTABLISHED) { SchedulerYield() }

    Socket->Listen()

    loop {
        TCPSocket* Child := Socket->Accept()

        while (Child->State != TCP_SOCKET_STATE_ESTABLISHED) { SchedulerYield() }

        Print("Say hello to %ipv4:%net-port!\n", Child->RemoteAddress, Child->RemotePort)

        while (Child->State = TCP_SOCKET_STATE_ESTABLISHED) {
            i8[100] Line

            i32 Recv := Child->Poll(POLL_FOR_READ)
            
            if (Recv) {
                i32 Size := Child->Recieve(Line, 100)
                Line[Size] := 0

                Print("\nLoser: %s\n", Line)
            }

            SchedulerYield()
        }
    }
}

define void SocketClient() {
    TCPSocket* Socket := Network->CreateTCP()

    ;TCP->BindSocket(42830 As i16, Socket)
    ;TCP->BindSocket(7777 As i16, Socket)
    Network->Connect(Socket, IPv4("127.0.0.1"), 7777 As i16)

    while (Socket->State = TCP_SOCKET_STATE_SYNCHRONIZE_SENT) {
        Print("Connecting...\r")
        SleepMS(100)
    }

    Socket->QueueString("Hello world!")
    Socket->Flush()
    Socket->Close()

    ;Socket->Connect(PackIPV4(10, 0, 2, 2), 7778)

    ;while (Socket->State != TCP_SOCKET_STATE_ESTABLISHED) { SchedulerYield() }
}

define void TinyNC(FileHandle* stdio, TCPSocket* Socket) {
    Print("Say hello to %ipv4:%net-port!\n", Socket->RemoteAddress, Socket->RemotePort)

    loop {
        if (Socket->State = TCP_SOCKET_STATE_CLOSED) {
            break
        }

        i8[100] Line

        i32 Recv := Socket->Poll(POLL_FOR_READ)
        
        if (Recv) {
            i32 Size := Socket->Recieve(Line, 100)
            Line[Size] := 0

            Print("\nLoser: %s\n", Line)
        }

        i32 Send := stdio->Poll(POLL_FOR_READ)

        if (Send & POLL_CAN_READ) {
            i32 Size := stdio->Read(Line, 100)
            Line[Size] := 0

            Socket->Send(CloneMemory(Line, Size), Size)
        }

        SchedulerYield()
    }
}

#Require "./src/kernel/networking/Parse.rlx"

define void TestNetworking(FileHandle* stdio) {
    ;SetIP()

    ;Test() return

    /*
    NetworkStack* Stack := NetworkStack:New()

    Stack->AddRoute(0x00_00_00_00, 0x00_00_00_00, 1)
    Stack->AddRoute(0x10_02_00_00, 0xFF_FF_00_00, 2)

    Info("Route: %i\n", Stack->Lookup(0x10_01_00_20)->InterfaceNumber)
    */

    ;/*
    void* nuts := &NetworkPacket.DumpMarkers

    NetworkInterface* Interface := Network->Interfaces->At(1)

    ;Interface->SetKnobToggle("Ethernet.SpewInOut", true)
    Interface->SetKnobToggle("ARP.SpewGateway", true)

    DHCPClient* DHCP := Interface->WellKnownProtocols->DHCP

    DHCP->SendDiscover(0)
    
    while (Interface->DNS = 0) {
        SchedulerYield()
    }

    Print("DHCP: Leased: %ipv4. DNS: %ipv4\n", Interface->IP, Interface->DNS)
    Network->AddRoute("0.0.0.0/0", Interface)

    Network->DumpRoutes()

    ARPLayer* ARP := Interface->WellKnownProtocols->ARP

    Interface->GatewayMAC := ARP->Lookup(Interface->Gateway)

    Print("DHCP: Gateway: %ipv4. Gateway MAC: %mac\n", Interface->Gateway, Interface->GatewayMAC)
    ;*/

    TCPSocket* Socket := Network->CreateTCP()

    Network->Connect(Socket, IPv4("10.2.30.100"), 7778 As i16)

    while (Socket->State = TCP_SOCKET_STATE_SYNCHRONIZE_SENT) {
        Print("Connecting...\r")
        SleepMS(100)
    }

    Socket->QueueString("Hello world!")
    Socket->Flush()
    Socket->Close()

    ;TCP->BindSocket(42830 As i16, Socket)
    ;TCP->BindSocket(7777 As i16, Socket)
    /*
    Network->Bind(IPv4("127.0.0.1"), 7777 As i16, Socket)

    ;Socket->Connect(PackIPV4(10, 0, 2, 2), 7778)

    ;while (Socket->State != TCP_SOCKET_STATE_ESTABLISHED) { SchedulerYield() }

    Socket->Listen()

    loop {
        TCPSocket* Child := Socket->Accept()

        while (Child->State != TCP_SOCKET_STATE_ESTABLISHED) { SchedulerYield() }

        TinyNC(stdio, Child)
    }
    */

    ;Info("Sending!\n")

    ;Socket->QueueString("One")
    ;Socket->QueueString("Two")
    ;Socket->QueueString("Three")
    ;Socket->QueueString("Four")

    ;while (Socket->NewestFrame != null) { SchedulerYield() }

    

    ;i8[100] Line
    ;Socket->Recieve(Line, 100)

    ;Info("Got: %s", Line)

    ;Socket->Close()

    loop { SchedulerYield() }

    ;Halt()

    /*
    DNSLayer* DNS := FirstNetworkInterface->GetProtocol("DNS")->this

    DNS->Enable()

    i32 Result := DNS->Lookup("google.com")

    Info("google.com: %ipv4\n", Result)

    Print("DNS: google.com: %ipv4\n", Result)
    */

    /*
    UDPLayer* UDP := FirstNetworkInterface->GetProtocol("UDP")->this

    UDPPacketOptions Options {
        Destination: PackIPV4(255, 255, 255, 255),
        SourcePort: 60000 As i16,
        DestinationPort: 60000 As i16
    }

    NetworkPacket* Packet := UDP->Enter(&Options)

    Packet->Seek(Packet->Tell() + 100)

    UDP->Send(Packet)
    ;*/

    ;TestIPV4Fragmentation()
    ;TestICMPPing()
}