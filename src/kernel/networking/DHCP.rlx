
i16 DHCP_CLIENT_PORT := 68
i16 DHCP_SERVER_PORT := 67

i8 DHCP_OPERATION_REQUEST := 1
i8 DHCP_OPERATION_REPLY := 2

i8 DHCP_HARDWARE_TYPE_ETHERNET := 1

i32 DHCP_MAGIC := 0x63825363

struct DHCPHeader {
    i8 Operation
    
    i8 HardwareAddressType
    i8 HardwareAddressLength

    i8 Hops
    i32 TransactionID
    i16 Seconds
    i16 Flags

    i32 ClientAddress
    i32 YourAddress
    i32 ServerAddress
    i32 GatewayAddress
    
    union {
        MACAddress ClientHardwareAddress
        i8[16] ClientHardwareAddressPadding
    }

    i8[64] ServerHostname
    i8[128] BootFileName

    i32 Magic

    define void FlipEndianess() {
        this->TransactionID := NetworkInt(this->TransactionID)
        this->Seconds := NetworkShort(this->Seconds)
        this->Flags := NetworkShort(this->Flags)

        this->ClientAddress := NetworkInt(this->ClientAddress)
        this->YourAddress := NetworkInt(this->YourAddress)
        this->ServerAddress := NetworkInt(this->ServerAddress)
        this->GatewayAddress := NetworkInt(this->GatewayAddress)

        this->Magic := NetworkInt(this->Magic)
    }
}

/*
define DHCPHeader* EnterDHCPHeader(PacketBuffer* Buffer) {
    DHCPHeader* Result := Buffer->Bump(#DHCPHeader)

    Result->Initialize()

    return Result
}
define void ExitDHCPHeader(PacketBuffer* Buffer, DHCPHeader* Header) {
    Header->FlipEndianess()
}
*/

i8 DHCP_OPTION_PADDING := 0
i8 DHCP_OPTION_SUBNET_MASK := 1
i8 DHCP_OPTION_TIME_OFFSET := 2
i8 DHCP_OPTION_ROUTER := 3
i8 DHCP_OPTION_DOMAIN_NAME_SERVER := 6
i8 DHCP_OPTION_HOST_NAME := 12
i8 DHCP_OPTION_REQUESTED_IP := 50
i8 DHCP_OPTION_LEASE_TIME := 51
i8 DHCP_OPTION_MESSAGE_TYPE := 53
i8 DHCP_OPTION_PARAMETER_LIST := 55
i8 DHCP_OPTION_CLIENT_IDENTIFIER := 61

i8 DHCP_OPTION_END := -1 As i8

i8 DHCP_MESSAGE_TYPE_DISCOVER := 1
i8 DHCP_MESSAGE_TYPE_OFFER := 2
i8 DHCP_MESSAGE_TYPE_REQUEST := 3
i8 DHCP_MESSAGE_TYPE_DECLINE := 4
i8 DHCP_MESSAGE_TYPE_ACK := 5
i8 DHCP_MESSAGE_TYPE_NACK := 6
i8 DHCP_MESSAGE_TYPE_INFORM := 7

namespace DHCPOption {
    struct Header {
        i8 OptionCode
        i8 Length
        i8[0] Data

        define Header* Next() {
            return ((this->Data As i64) + this->Length) As void*
        }
    }

    struct MessageType {
        Header Header
        i8 Type
    }

    struct ParameterRequestList {
        Header Header
        i8[0] RequestedOptions
    }

    struct RequestAddress unaligned {
        Header Header
        i32 Address
    }

    struct AddressList unaligned {
        Header Header
        i32[0] Addresses

        define i32 Count() {
            return this~>Header->Length / 4
        }

        define i32 At(i32 Index) {
            return NetworkInt(this->Addresses[Index])
        }
    }
}

struct DHCPOptions {
    DHCPOption::Header FirstOption

    define DHCPOption::Header* Find(i8 OptionCode) {
        DHCPOption::Header* Current := this~>FirstOption

        while (Current && Current->OptionCode != DHCP_OPTION_END) {
            if (Current->OptionCode = OptionCode) {
                return Current
            }

            Current := Current->Next()
        }

        return null
    }

    define i8 Has(i8 OptionCode) {
        return this->Find(OptionCode) != null
    }

    define void* Get(i8 OptionCode) {
        return this->Find(OptionCode) As void*
    }
}

i32 PACKET_DATA_DHCP_HEADER := RegisterPacketData("DHCP Header")
i32 PACKET_DATA_DHCP_OPTIONS := RegisterPacketData("DHCP Options")

declare NetworkProtocolPrototype* GetDHCPProtocolPrototype()

struct DHCPClient {
    NetworkInterface* Interface
    NetworkProtocol* Transport

    NetworkProtocol* AsProtocol

	static self* New(NetworkInterface* Interface, NetworkProtocol* Transport) {
		self* this := Alloc(#self)

		this->Interface := Interface
		this->Transport := Transport

        UDPLayer* UDP := Transport->this

        this->AsProtocol := Interface->AddProtocol("DHCP", GetDHCPProtocolPrototype(), this)

        UDP->ListenPort(DHCP_CLIENT_PORT, this->AsProtocol)

        return this
    }

    define NetworkPacket* Enter(i32 Destination) {
        UDPPacketOptions Options {
            Destination: Destination,
            SourcePort: DHCP_CLIENT_PORT,
            DestinationPort: DHCP_SERVER_PORT
        }

        NetworkPacket* Packet := this->Transport->Enter(&Options)

        DHCPHeader* Header := Packet->Mark(PACKET_DATA_DHCP_HEADER, #DHCPHeader)

        Header->HardwareAddressType := DHCP_HARDWARE_TYPE_ETHERNET
        Header->HardwareAddressLength := 6

        Header->Magic := DHCP_MAGIC

        Header~>ClientHardwareAddress->Set(this->Interface->MAC)

        Packet->Mark(PACKET_DATA_DHCP_OPTIONS, 0)

        return Packet
    }

    define void* AddOption(NetworkPacket* Packet, i8 OptionCode, i32 Size) {
        DHCPOption::Header* Option := Packet->Bump(Size)
        Packet->Extend(PACKET_DATA_DHCP_OPTIONS, Size)

        Option->OptionCode := OptionCode
        Option->Length := (Size - #DHCPOption::Header) As i8

        return Option As void*
    }

    define void Send(NetworkPacket* Packet) {
        DHCPHeader* Header := Packet->Get(PACKET_DATA_DHCP_HEADER)

        Header->FlipEndianess()

        this->Transport->Send(Packet)
    }

    declare void SendRequest(i32, i32)

    define void Ingest(NetworkPacket* Packet) {
        IPV4Header* IP := Packet->Get(PACKET_DATA_IPV4_HEADER)
        UDPHeader* UDP := Packet->Get(PACKET_DATA_UDP_HEADER)
        DHCPHeader* DHCP := Packet->Mark(PACKET_DATA_DHCP_HEADER, #DHCPHeader)

        DHCP->FlipEndianess()

        Info("DHCP Packet from %ipv4:%i\n", IP->Source, UDP->SourcePort)

        DHCPOptions* Options := Packet->Mark(PACKET_DATA_DHCP_OPTIONS, #DHCPOption::Header)

        DHCPOption::MessageType* MessageType := Options->Get(DHCP_OPTION_MESSAGE_TYPE)

        if !(MessageType) {
            Info("DHCP: Dropping packet from %ipv4:%i with no message type option\n", IP->Source, UDP->SourcePort)
            return
        }

        if (MessageType->Type = DHCP_MESSAGE_TYPE_OFFER) {
            Info("DHCP: Got offer from %ipv4 for address %ipv4\n", DHCP->ServerAddress, DHCP->YourAddress)

            this->SendRequest(DHCP->ServerAddress, DHCP->YourAddress)
        }
        else if (MessageType->Type = DHCP_MESSAGE_TYPE_ACK) {
            this->Interface->IP := DHCP->YourAddress

            DHCPOption::AddressList* Routers := Options->Get(DHCP_OPTION_ROUTER)
            this->Interface->Gateway := Routers->At(0)

            DHCPOption::AddressList* DNS := Options->Get(DHCP_OPTION_DOMAIN_NAME_SERVER)
            this->Interface->DNS := DNS->At(0)

            DHCPOption::AddressList* Masks := Options->Get(DHCP_OPTION_SUBNET_MASK)
            i32 Mask := Masks->At(0)

            AddNetworkRoute(this->Interface->Gateway & Mask, Mask, this->Interface)

            ARPLayer* ARP := this->Interface->GetProtocol("ARP")->this

            ARP->Announce()
        }
    }

    define void Send(i32 ServerAddress, i32 DesiredAddress, i8 MessageType) {
        NetworkPacket* Packet := this->Enter(IPV4_BROADCAST_ADDRESS)

        DHCPHeader* Header := Packet->Get(PACKET_DATA_DHCP_HEADER)

        Header->Operation := DHCP_OPERATION_REQUEST

        DHCPOption::MessageType* MessageTypeOption := this->AddOption(Packet, DHCP_OPTION_MESSAGE_TYPE, #DHCPOption::MessageType)

        MessageTypeOption->Type := MessageType

        DHCPOption::ParameterRequestList* RequestList := this->AddOption(Packet, DHCP_OPTION_PARAMETER_LIST, 3 + #DHCPOption::ParameterRequestList)

        RequestList->RequestedOptions[0] := DHCP_OPTION_SUBNET_MASK
        RequestList->RequestedOptions[1] := DHCP_OPTION_ROUTER
        RequestList->RequestedOptions[2] := DHCP_OPTION_DOMAIN_NAME_SERVER

        if (DesiredAddress != 0) {
            DHCPOption::RequestAddress* RequestAddress := this->AddOption(Packet, DHCP_OPTION_REQUESTED_IP, #DHCPOption::RequestAddress)

            RequestAddress->Address := NetworkInt(DesiredAddress)
        }

        this->AddOption(Packet, DHCP_OPTION_END, 1)

        this->Send(Packet)
    }

    define void SendDiscover(i32 DesiredIP) {
        this->Send(IPV4_BROADCAST_ADDRESS, 0, DHCP_MESSAGE_TYPE_DISCOVER)
    }

    define void SendRequest(i32 ServerAddress, i32 DesiredAddress) {
        this->Send(ServerAddress, DesiredAddress, DHCP_MESSAGE_TYPE_REQUEST)
    }
}

NetworkProtocolPrototype DHCPProtocolPrototype {
    ;Enter: &DHCPClient.Enter,
    ;Send: &DHCPClient.Send,
    Ingest: &DHCPClient.Ingest
}

define NetworkProtocolPrototype* GetDHCPProtocolPrototype() {
    return &DHCPProtocolPrototype
}

/*
define DHCPOption* EnterDHCPOption(PacketBuffer* Buffer) {
    return Buffer->Bump(#DHCPOption)
}
define void ExitDHCPOption(PacketBuffer* Buffer, DHCPOption* Option) {
    Option->Length := Buffer->Tell(Option->Data) As i8
}

define void DHCPTest(PacketBuffer* Buffer, EthernetHeader* Ethernet, IPV4Header* IPV4) {
    IPV4->DestinationIP := PackIPV4(255, 255, 255, 255)
    
    UDPHeader* UDP := EnterUDPHeader(Buffer, IPV4)

    UDP->SourcePort := 68
    UDP->DestinationPort := 67

    DHCPHeader* DHCP := EnterDHCPHeader(Buffer)

    DHCP->Operation := DHCP_OPERATION_REQUEST
    DHCP->TransactionID := 0x1234
    DHCP->Seconds := 1

    MoveMemory(DHCP->ClientHardwareAddress, Ethernet->SourceMAC, 6)

    DHCPOption* MessageType := EnterDHCPOption(Buffer)
        MessageType->OptionCode := DHCP_OPTION_MESSAGE_TYPE
        Buffer->WriteI8(DHCP_MESSAGE_TYPE_DISCOVER)
    ExitDHCPOption(Buffer, MessageType)

    DHCPOption* ClientIdentifier := EnterDHCPOption(Buffer)
        ClientIdentifier->OptionCode := DHCP_OPTION_CLIENT_IDENTIFIER
        Buffer->WriteI8(DHCP_HARDWARE_TYPE_ETHERNET)
        Buffer->Write(Ethernet->SourceMAC, 6)
    ExitDHCPOption(Buffer, ClientIdentifier)

    DHCPOption* RequestedIP := EnterDHCPOption(Buffer)
        RequestedIP->OptionCode := DHCP_OPTION_REQUESTED_IP
        Buffer->WriteI32(0)
    ExitDHCPOption(Buffer, RequestedIP)

    DHCPOption* ParameterRequestList := EnterDHCPOption(Buffer)
        ParameterRequestList->OptionCode := DHCP_OPTION_PARAMETER_LIST
        Buffer->WriteI8(DHCP_OPTION_SUBNET_MASK)
        Buffer->WriteI8(DHCP_OPTION_ROUTER)
        Buffer->WriteI8(DHCP_OPTION_DOMAIN_NAME_SERVER)
    ExitDHCPOption(Buffer, ParameterRequestList)

    Buffer->WriteI8(DHCP_OPTION_END)

    ExitDHCPHeader(Buffer, DHCP)
    ExitUDPHeader(Buffer, UDP)
}
*/