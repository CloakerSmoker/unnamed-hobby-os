
#Require "./src/kernel/networking/IPV4.rlx"

i8 IPV4_PROTOCOL_ICMP := 1

i8 ICMP_TYPE_ECHO_REPLY := 0
i8 ICMP_TYPE_ECHO_REQUEST := 8

struct ICMPHeader {
    i8 Type
    i8 Code
    i16 Checksum
}
/*
define ICMPHeader* EnterICMPHeader(PacketBuffer* Buffer) {
    return Buffer->Bump(#ICMPHeader)
}
define void ExitICMPHeader(PacketBuffer* Buffer, ICMPHeader* Header) {
    i32 ICMPSize := Buffer->Tell(Header)

    i16 Checksum := RFC1071Checksum(Header, ICMPSize)

    Header->Checksum := Checksum
}
*/
struct ICMPEchoRequest {
    i16 Identifier
    i16 SequenceNumber
}

i32 PACKET_DATA_ICMP_HEADER := RegisterPacketData("ICMP Header")
i32 PACKET_DATA_ICMP_BODY := RegisterPacketData("ICMP Body")

declare NetworkProtocolPrototype* GetICMPProtocolPrototype()

struct ICMPPacketOptions {
	i32 Destination
	i8 Type
	i8 Code
}

struct ICMPLayer {
	NetworkInterface* Interface
	NetworkProtocol* Transport

	static self* New(NetworkInterface* Interface, NetworkProtocol* Transport) {
		self* this := Alloc(#self)

		this->Interface := Interface
		this->Transport := Transport

		Interface->AddProtocol("ICMP", GetICMPProtocolPrototype(), this)

		return this
	}

	define NetworkPacket* Enter(ICMPPacketOptions* Options) {
		IPV4PacketOptions IPOptions {
			Destination: Options->Destination,
			ProtocolNumber: IPV4_PROTOCOL_ICMP
		}

		NetworkPacket* Packet := this->Transport->Enter(&IPOptions)

		ICMPHeader* Header := Packet->Mark(PACKET_DATA_ICMP_HEADER, #ICMPHeader)

		Header->Type := Options->Type
		Header->Code := Options->Code

		return Packet
	}

	define void Send(NetworkPacket* Packet) {
		this->Transport->Send(Packet)
	}

	define void Ingest(NetworkPacket* Packet) {

	}

	define void SendPing(i32 Destination, void* Data, i32 Size) {
		ICMPPacketOptions Options {
			Destination: Destination,
			Type: ICMP_TYPE_ECHO_REQUEST,
			Code: 0
		}

		NetworkPacket* Packet := this->Enter(&Options)

		void* Buffer := Packet->Mark(PACKET_DATA_ICMP_BODY, Size + #ICMPEchoRequest)
		ICMPEchoRequest* Echo := Buffer

		Echo->Identifier := 0x1234
		Echo->SequenceNumber := 1

		MoveMemory(Buffer + #ICMPEchoRequest, Data, Size)

		this->Send(Packet)
	}
}

NetworkProtocolPrototype ICMPProtocolPrototype {
	Enter: &ICMPLayer.Enter,
	Send: &ICMPLayer.Send,
	Ingest: &ICMPLayer.Ingest
}

define NetworkProtocolPrototype* GetICMPProtocolPrototype() {
	return &ICMPProtocolPrototype
}

/*

	IPV4->SourceIP := PackIPV4(1, 2, 3, 4)
	IPV4->DestinationIP := PackIPV4(192, 168, 0, 1)

	IPV4->Protocol := IPV4_PROTOCOL_ICMP
	IPV4->TimeToLive := 40

	ICMPHeader* ICMP := EnterICMPHeader(Packet)

	ICMP->Type := ICMP_TYPE_ECHO_REQUEST

	ICMPEchoRequest* Echo := Packet->Bump(#ICMPEchoRequest)

	Echo->Identifier := 1
	Echo->SequenceNumber := 1

	MoveMemory(Packet->Bump(8), "abcd1234", 8)

	ExitICMPHeader(Packet, ICMP)

	*/