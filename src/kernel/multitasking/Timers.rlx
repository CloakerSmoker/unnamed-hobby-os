
#Require "./src/kernel/multitasking/Tasks.rlx"
#Require "./src/kernel/core/Events.rlx"

struct Timer {
	i64 LastFiredAt
	i64 IntervalMS
	Task* Target
	
	Timer* Next
	
	define void MaybeFire(i64 TimeMS) {
		if ((TimeMS - this->LastFiredAt) >= this->IntervalMS) {
			this->Target->State := TASK_CAN_RUN
			
			;Info("\nFire %x\n", this->Target)
			
			this->LastFiredAt := TimeMS
		}
	}
}

Timer* RootTimer := null

define EventState OnTick(void* RawCurrentWhole, Event* Fired) {
	i64 CurrentWhole := RawCurrentWhole As i64
	
	Timer* NextTimer := RootTimer
	
	while (NextTimer) {
		NextTimer->MaybeFire(CurrentWhole)
		NextTimer := NextTimer->Next
	}
	
	return EventState:CallNextListener
}

define void SetupTimers() {
	OnHardwareTimerTick->ListenFunction(&OnTick)
}

define Timer* SetTimer(i64 IntervalMS, Task* Target) {
	Timer* Result := Alloc(#Timer)
	
	Result->Target := Target
	Result->IntervalMS := IntervalMS
	
	if (RootTimer) {
		Timer* Last := RootTimer
		
		while (Last->Next) {
			Last := Last->Next
		}
		
		Last->Next := Result
	}
	else {
		RootTimer := Result
	}
	
	return Result
}