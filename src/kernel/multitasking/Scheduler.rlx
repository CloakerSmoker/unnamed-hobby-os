
#Require "./src/kernel/multitasking/Tasks.rlx"
#Require "./src/kernel/core/Events.rlx"

define void DoSchedulerDelay() {
	loop {
		; Nothing better to do
		asm {
			emit, 0xF4
		}
	}
}

struct TaskScheduler {
	Task* DelayTask

	List* NeedsToRun
	List* HasRan
	
	define void RunCurrent() {
		CurrentTask->State := TASK_RUNNING
		CurrentTask->Resume()
	}
	
	define void RunNow(Task* Next) {
		CurrentTask->State := TASK_CAN_RUN
		
		CurrentTask := Next
		this->RunCurrent()
	}
	
	define void Debug(i8* Format, ... Parameters) {
		if (DEBUG_SCHEDULER) {
			RawInfo(Format, Parameters)
		}
	}
	
	define void PickNext() {
		if (InterrupsAreEnabled()) {
			DisableInterrupts()
			
			Info("SCHEDULER CALLED WITH INTERRUPTS ON\n")
			Info("Stack:\n%stackdump\nHalting")
			
			loop {}
		}

		this->Debug("To  Run: %list\n", this->NeedsToRun)
		this->Debug("Has Ran: %list\n", this->HasRan)
		
		if (this->NeedsToRun->Empty()) {
			this->Debug("Swapping\n")
			
			List* Temp := this->NeedsToRun
			this->NeedsToRun := this->HasRan
			this->HasRan := Temp
		}

		Task* Next := this->DelayTask
		ListNode* Node := null

		while (this->NeedsToRun->Next(&Node)) {
			Task* Candidate := this->NeedsToRun->Self(Node)

			this->Debug("Candidate %x\n", Candidate)

			if (Candidate->CouldRun()) {
				this->Debug("Picked    /\\\n")

				Next := Candidate
				break
			}
		}

		loop {
			ListNode* Previous := this->NeedsToRun->First()

			if (Previous = null) {
				break
			}

			this->NeedsToRun->Remove(Previous)
			this->HasRan->Push(Previous)

			if (Previous = Next) {
				break
			}
		}

		CurrentTask := Next
	}
	
	define void RunNext() {
		this->PickNext()
		this->RunCurrent()
	}
	
	define void YieldCurrent() {
		CurrentTask->State := TASK_PAUSED
		this->RunNext()
	}
	define void BlockCurrent() {
		CurrentTask->State := TASK_BLOCKED
		this->RunNext()
	}
	define void EndCurrent() {
		CurrentTask->State := TASK_KILLED
		CurrentTask->Free()
		this->RunNext()
	}
	
	define Task* OnExternalControlTransfer(Task* NewCurrent) {
		CurrentTask->State := TASK_CAN_RUN
		
		Task* Result := CurrentTask
		CurrentTask := NewCurrent
		
		return Result
	}
	
	define void Remove(Task* Old) {
		Old->State := TASK_KILLED

		this->HasRan->Remove(Old~>Link)
	}
	
	define void Enqueue(Task* NewTask) {
		this->Debug("Enqueue %x\n", NewTask)

		;i8 Enabled := InterrupsAreEnabled()

		;if (Enabled) { DisableInterrupts() }

		this->NeedsToRun->Push(NewTask~>Link)

		;if (Enabled) { EnableInterrupts() }
	}
	
	define void Add(Task* NewTask) {
		this->Enqueue(NewTask)
	}
	
	define Task* MakeLightTask(void* Function) {
		Task* NewTask := Task:NewWithStack(0, 2)
		
		NewTask~>Context->RIP := Function
		
		return NewTask
	}
	define Task* AddLightTask(void* Function) {
		Task* NewTask := this->MakeLightTask(Function)
		
		this->Add(NewTask)
		
		return NewTask
	}
	
	define EventState Quantum(void* CurrentTickCount, Event* Fired) {
		;Info("%x,", CurrentTask~>Context->RIP)
		
		ListNode* Node := null

		while (this->HasRan->Next(&Node)) {
			Task* Current := this->HasRan->Self(Node)

			if (Current->State = TASK_PAUSED) {
				Current->State := TASK_CAN_RUN
			}
		}

		;Current->State := TASK_PAUSED
		
		this->PickNext()
		
		return EventState:CallNextListener
	}

	define void Initialize() {
		this->NeedsToRun := List:New(&Task.Link)
		this->HasRan := List:New(&Task.Link)

		this->DelayTask := this->MakeLightTask(&DoSchedulerDelay)
	}

	define void Start() {
		OnHardwareTimerTick->ListenMethod(&TaskScheduler.Quantum, this)
	}
}

TaskScheduler _Scheduler
TaskScheduler* Scheduler := &_Scheduler

define void _SchedulerYield() {
	Scheduler->YieldCurrent()
}
define void SchedulerYield() asm {
	emit, 0x48
	emit, 0x9C ; PUSHFQ

	cli
	
	call, @GetCurrentTaskContext
	mov, rdi, rax      ; Parameter = CurrentTaskContext
	call, @SaveContext ; Capure interrupted context, with anything extra cleaned up below

	pop, rbx ; save pre-`cli` eflags
	mov, {rdi + AMD64Context.Flags} As i64*, rbx
	
	pop, rbx ; grab return address, store into context
	mov, {rdi} As i64*, rbx        ; Context.RIP = rax
	mov, {rdi + 0x20} As i64*, rsp ; Fix RSP, original capture is off by 8 because of our
	;  return address
	
	jmp, @_SchedulerYield
}

define void _SchedulerBlock() {
	Scheduler->BlockCurrent()
}
define void SchedulerBlock() asm {
	emit, 0x48
	emit, 0x9C ; PUSHFQ

	cli
	
	call, @GetCurrentTaskContext
	mov, rdi, rax      ; Parameter = CurrentTaskContext
	call, @SaveContext ; Capure interrupted context, with anything extra cleaned up below
	
	pop, rbx ; save pre-`cli` eflags
	mov, {rdi + AMD64Context.Flags} As i64*, rbx

	pop, rbx ; grab return address, store into context
	mov, {rdi} As i64*, rbx        ; Context.RIP = rax
	mov, {rdi + 0x20} As i64*, rsp ; Fix RSP, original capture is off by 8 because of our
	;  return address
	
	jmp, @_SchedulerBlock
}
define void _SchedulerEnd() {
	Scheduler->EndCurrent()
}
define void SchedulerEnd() asm {
	cli

	call, @_SchedulerEnd
}
define void SchedulerRestart() {
	; Called after non-task code 
	
	Scheduler->RunCurrent()
}

i8 SchedulerStarted := false

define void StartScheduler() {
	DisableInterrupts()
	
	SchedulerStarted := true
	
	Scheduler->Start()
	
	loop {
		asm {
			sti
			emit, 0xF4 ; halt
		}
	}
}

define i8 IsSchedulerActive() {
	return InterrupsAreEnabled() && SchedulerStarted
}