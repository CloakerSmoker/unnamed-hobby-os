PITCounterMode* CurrentPITMode := null

i64 PITWhole 	:= 0 ; Number of milliseconds since the PIT was initialized
i64 PITFraction := 0 ; Counter mode specific fraction, used to track sub-millisecond time since PITWhole is an integer

define void OnPITInterrupt(InterruptContext* Context) {
	GenericTimerInterrupt()

	PITWhole += CurrentPITMode->WholePerTick
	PITFraction += CurrentPITMode->FractionPerTick
	
	PITWhole += PITFraction / CurrentPITMode->FractionToWholeDivisor
	PITFraction %= CurrentPITMode->FractionToWholeDivisor

    TIME_UPTIME_MS := PITWhole
	
	SendEOI(0)
}
define void PITInterrupt() asm {
	call, @InterruptSetup
	call, @OnPITInterrupt
	jmp, @InterruptReturn
}

define void ConfigurePITSystemClock(i32 HZ) {
	if (HZ != 100) {
		Info("WARNING: PIT System Clock only supports 100hz period\n")
	}

	InsertIDTEntry(0x20, &PITInterrupt, true)

	FirstIOAPIC->ForwardInterrupt(0x0, LocalAPIC->ID, 0x20)
	FirstIOAPIC->Mask(0x0, false)

    CurrentPITMode := PIT_100HZ
    SetPITMode(PIT_100HZ)

    EnableInterrupts()
}