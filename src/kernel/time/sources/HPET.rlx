
i64 HPET_SYSTEM_CLOCK_FS_PER_TICK := 0

define void OnHPETInterrupt(AMD64Context* Context, i32 InterruptNumber) {
    ;Print("HPET!")

    GenericTimerInterrupt()

    i64 UptimeFS := TIME_TICK_COUNT * HPET_SYSTEM_CLOCK_FS_PER_TICK

    ;Print("FS(%ei)", UptimeFS)

    TIME_UPTIME_MS := UptimeFS / MILLISECOND_IN_FEMTOSECONDS
    i64 Remainder := UptimeFS % MILLISECOND_IN_FEMTOSECONDS

    if (Remainder) {
        if (Remainder >= (MILLISECOND_IN_FEMTOSECONDS / 2)) {
            TIME_UPTIME_MS += 1
        }
    }

    ;Print("T(%i)M(%i) ", TIME_TICK_COUNT, TIME_UPTIME_MS)

    LocalAPIC->EOI()
}

declare void HangPITChannel(i8)

define i8 ConfigureHPETSystemClock(i32 HZ) {
    HangPITChannel(0)

    HPET := HPETDriver::HPET:New(BootInfo->HPETBase)

    Print("HPET Has %i Timers\n", HPET->TimerCount)

    for (i32 Index := 0, Index < HPET->TimerCount, Index++) {
        HPETDriver::TimerRegisters* Registers := HPET->Timers[Index]

        Print("Timer %i supports:\n", Index)
        Print("\tPeriodic: %i\n", Registers->IsPeriodicSupported)
        Print("\tFSB Delivery: %i\n", Registers->IsFSBDeliverySupported)
        Print("\tInterrupts: ")

        for (i32 Interrupt := 0, Interrupt < 24, Interrupt++) {
            i32 Mask := 1 << Interrupt

            if (Registers->SupportedIOAPICInterruptMask & Mask) {
                Print("%i ", Interrupt)
            }
        }

        Print("\n")
    }

    i8 MSI := false
    i32 Timer := -1
    i32 IRQ := -1

    for (i32 Index := 0, Index < HPET->TimerCount, Index++) {
        HPETDriver::TimerRegisters* Registers := HPET->Timers[Index]

        if (HPET_CAN_USE_MSI_DELIVERY) {
            if (Registers->IsPeriodicSupported && Registers->IsFSBDeliverySupported) {
                MSI := true
                Timer := Index
                break
            }
        }

        for (i32 Interrupt := 0, Interrupt < 24, Interrupt++) {
            i32 Mask := 1 << Interrupt

            if (Registers->SupportedIOAPICInterruptMask & Mask) {
                if (Registers->IsPeriodicSupported) {
                    if (Interrupt != 0 && Interrupt != 2 && Interrupt != 8) {
                        Timer := Index
                        IRQ := Interrupt
                        break
                    }
                }
            }
        }
    }

    if (Timer = -1) {
        Info("Can't find HPET candidate for system timer")
        return false
    }

    if (MSI) {
        Info("Best option is timer %i with FSB/MSI delivery to vector 0x30\n", Timer)
    }
    else {
        Info("Best option is timer %i with IRQ #%i\n", Timer, IRQ)
    }

    i64 Base := HPET->GetBaseFrequency()

    Info("HPET Base Frequency: %eifs\n", Base)

    i64 TicksPerMillisecond := MILLISECOND_IN_FEMTOSECONDS / Base
    i64 TicksPerSecond := SECOND_IN_FEMTOSECONDS / Base
    i64 Period := TicksPerSecond / HZ

    Info("HPET Ticks:\n")
    Info("\tPer MS: %ei\n", TicksPerMillisecond)
    Info("\tPer  S: %ei\n", TicksPerSecond)

    Info("For %ihz: %ei ticks\n", HZ, Period)

    HPET_SYSTEM_CLOCK_FS_PER_TICK := Base * Period

    HPET->Enable(false)
    HPET->Reset()

    HPET->AllocateSpecificTimer(Timer)

    Info("Allocated Timer %i for system timer\n", Timer)

    ;loop {}

    HPET->MakePeriodic(Timer, Period)
    HPET->EnableTimerInterrupts(Timer, false)

    RegisterInterruptHandler(0x30, &OnHPETInterrupt)

    if (MSI) {
        HPET->ConnectFSBInterrupt(Timer, LocalAPIC->ID, 0x30)
    }
    else {
        HPET->ConnectIOAPICInterrupt(Timer, IRQ)
        
        FirstIOAPIC->ForwardInterrupt(IRQ, LocalAPIC->ID, 0x30)
        FirstIOAPIC->Mask(IRQ, false)
    }

    Info("Enabling timer interrupts\n")

    HPET->EnableTimerInterrupts(Timer, true)

    Info("Enabling CPU interrupts\n")

    EnableInterrupts()

    Info("Enabling HPET\n")

    HPET->Enable(true)

    while (TIME_TICK_COUNT = 0) {
        asm {emit, 0xF4}
    }

    Print("HPET Appears to work!\n")

    return true
}