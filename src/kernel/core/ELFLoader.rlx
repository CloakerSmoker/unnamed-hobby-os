#Require "./src/utility/ELF.rlx"
#Require "./src/kernel/core/MemoryMapping.rlx"

define MemoryMapper* MapELF(MemoryMapper* Mappings, ELFHeader* Image) {
	ELFProgramHeader* ProgramHeaders := Image->GetProgramHeaders()
	
	for (i32 Index := 0, Index < Image->ProgramHeaderEntryCount, Index++) {
		ELFProgramHeader* Next := ProgramHeaders[Index]
		
		if (Next->Type = ELF_SEGMENT_TYPE_LOAD) {
			void* SectionData := Image + Next->FileOffset
			void* SectionMemory := Next->VirtualAddress As void*
			void* SectionVirtualPage := SectionMemory & 0xFFFF_FFFF_FFFF_F000
			
			;Print("Section %i is %i (%x) bytes\n", Index, Next->MemorySize, Next->MemorySize)
			
			i32 SectionPageCount := (Next->MemorySize As i32) / PAGE_SIZE
			
			if (Next->MemorySize % PAGE_SIZE) {
				SectionPageCount += 1
			}
			
			if (Next->FileOffset % PAGE_SIZE) {
				SectionPageCount += 1
			}
			
			if (SectionPageCount = 0) {
				continue
			}
			
			i64 TempFlags := PAGE_PRESENT | PAGE_WRITE ; Map as PRESENT|WRITE so we can... actually load the section into memory
			i64 FinalFlags := PAGE_PRESENT | PAGE_USER
			
			if (Next->Flags & ELF_SEGMENT_FLAGS_WRITE) {
				FinalFlags |= PAGE_WRITE
			}
			
			VirtualToPhysicalMapping* Mapping := Mappings->MapPages(SectionVirtualPage, SectionPageCount, TempFlags)
			
			if (Next->MemorySize > Next->FileSize) {
				void* ZeroArea := SectionMemory + Next->FileSize
				i64 ZeroSize := Next->MemorySize - Next->FileSize
				
				FastSetMemory8(ZeroArea, 0, ZeroSize)
			}
			
			FastMoveMemory(SectionMemory, SectionData, Next->FileSize)
			
			Mappings->UpdateFlags(Mapping, FinalFlags)
			
			;i8* Dummy := "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
			
			;Print("a")
			
			;Info("Wrote %x bytes to section memory\n\n", Next->MemorySize)
		}
	}
	
	return Mappings
}