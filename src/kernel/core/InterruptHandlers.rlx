; Int 0x27
define void OnSpuriousInterrupt(AMD64Context* Context, i32 InterruptNumber) asm {
	ret
}

i64 PAGE_FAULT_PAGE_PRESENT      := 0b00001
i64 PAGE_FAULT_READ_WRITE        := 0b00010
i64 PAGE_FAULT_USER_SUPERVISOR   := 0b00100
i64 PAGE_FAULT_PAGE_RESERVED     := 0b01000
i64 PAGE_FAULT_INSTRUCTION_FETCH := 0b10000

i8 PAGE_FAULT_CHANCE := 0

define void OnPageFault(AMD64Context* Context, i32 InterruptNumber, i64 ErrorCode) {
	PAGE_FAULT_CHANCE++
	
	if (PAGE_FAULT_CHANCE > 3) {
		Info("PANIC!!!! NOW!!!!!!!")
		loop {}
	}

	i64 CR2 := GetCR2()
	i64 CR2Page := (CR2 >> 12) << 12

	if (PAGE_FAULT_CHANCE = 1) {
		Print("^H1^SF\e[0J                      PANIC!!!! NOW!!!!!!!                  \n")
		Print("              Page fault") ; Split prints just for when Info formatting is page faulting
		Print(" at %x while accessing %x                        \n", Context->RIP, CR2)

		;Print("%stackdump")
	}

	;Halt()
	
	Info("Page fault") ; Split prints just for when Info formatting is page faulting
	Info(" at %x while accessing %x {\n", Context->RIP, CR2)
	
	Info("\tPage %x is present? ", CR2Page)
	
	if (ErrorCode & PAGE_FAULT_PAGE_PRESENT) {
		Info("Yes\n")
		
		i64* pPTE := KernelAddressSpace->FindOrAddPTEntry(CR2Page As void*)
		i64 PTE := *pPTE
		
		if (PTE & PAGE_WRITE) {
			Info("\tWritable\n")
		}
		else {
			Info("\tRead-only\n")
		}
		
		if (PTE & PAGE_USER) {
			Info("\tUser\n")
		}
		else {
			Info("\tKernel\n")
		}
	}
	else {
		Info("No\n")
	}
	
	
	Info("\tPage %x is reserved? ", CR2Page)
	
	if (ErrorCode & PAGE_FAULT_PAGE_RESERVED) {
		Info("Yes\n")
	}
	else {
		Info("No\n")
	}
	
	
	Info("\tAddress %x was being? ", CR2)
	
	if (ErrorCode & PAGE_FAULT_READ_WRITE) {
		Info("Written to\n")
	}
	else if (ErrorCode & PAGE_FAULT_INSTRUCTION_FETCH) {
		Info("Executed\n")
	}
	else {
		Info("Read from\n")
	}
	
	
	Info("\tFrom code running in? ")
	
	if (ErrorCode & PAGE_FAULT_USER_SUPERVISOR) {
		Info("User mode\n")
	}
	else {
		Info("Kernel mode\n")
	}

	i8*[4] LevelNames {"PML4e", "PDPe ", "PDe  ", "PTe  "}

	for (i32 Level := 0, Level < PAGE_LEVEL_4K, Level++) {
		i64 Entry := Trampoline~>PageTree->Get(CR2 As void*, Level, null)

		i64 Target := Entry & 0b_111111111_111111111_111111111_111111111_000000000000
		i64 Flags  := Entry & 0b_000000000_000000000_000000000_000000000_111111111111

		Info("%s: %x", LevelNames[Level], Target)
		Info("\tFlags: %b ", Flags)
		
		if (Flags & PAGE_PRESENT) {
			Info("[PRESENT] ")
		}

		if (Flags & PAGE_WRITE) {
			Info("[WRITE] ")
		}

		if (Flags & PAGE_USER) {
			Info("[USER] ")
		}

		if (Flags & PAGE_ACCESSED) {
			Info("[ACCESSED] ")
		}

		if (Flags & PAGE_FLAG_SIZE) {
			Info("[SIZE] ")
		}

		Info("\n")
	}
	
	;Info("%stackdump")
	Info("}\n")
	
	if !(ErrorCode & PAGE_FAULT_USER_SUPERVISOR) {
		; For a user-mode exception, don't switch print the spooky panic message
		
		Print("^E1000A^E1000D")
		Print("^F1")
	}

	;Print("Page fault at %x while accessing %x {\n", Context->RIP, CR2) 
	
	
	Print("Page %x is present? ", CR2Page)
	
	if (ErrorCode & PAGE_FAULT_PAGE_PRESENT) {
		Print("Yes ")
		
		i64* pPTE := KernelAddressSpace->FindOrAddPTEntry(CR2Page As void*)
		i64 PTE := *pPTE
		
		if (PTE & PAGE_WRITE) {
			Print("[Writable] ")
		}
		else {
			Print("[Read-only] ")
		}
		
		if (PTE & PAGE_USER) {
			Print("[User] ")
		}
		else {
			Print("[Kernel] ")
		}
		
		Print("\n")
	}
	else {
		Print("No\n")
	}
	
	
	Print("Page %x is reserved? ", CR2Page)
	
	if (ErrorCode & PAGE_FAULT_PAGE_RESERVED) {
		Print("Yes\n")
	}
	else {
		Print("No\n")
	}
	
	
	Print("Address %x was being? ", CR2)
	
	if (ErrorCode & PAGE_FAULT_READ_WRITE) {
		Print("Written to\n")
	}
	else if (ErrorCode & PAGE_FAULT_INSTRUCTION_FETCH) {
		Print("Executed\n")
	}
	else {
		Print("Read from\n")
	}
	
	
	Print("From code running in? ")
	
	if (ErrorCode & PAGE_FAULT_USER_SUPERVISOR) {
		Print("User mode\n")
	}
	else {
		Print("Kernel mode\n")
	}
	
	;Print("}\n\n")
	
	;PrintStackDump(0)

	Print("%context\n", Context)

	;GenericInterrupt(Context, InterruptNumber)
	
	Print("\n^R")

	Halt()
	
	PAGE_FAULT_CHANCE--
	
	if (RECOVER_FROM_USER_PAGE_FAULT && (ErrorCode & PAGE_FAULT_USER_SUPERVISOR)) {
		;RestoreContext(&KernelContext)
	}
	
	;GenericInterrupt(Context, 0xE)
}

define void AddKernelHandlers() {
	if (USE_PAGE_FAULT_HANDLER) {
		RegisterInterruptHandler(0xE, &OnPageFault)
	}
	
	RegisterInterruptHandler(0x27, &OnSpuriousInterrupt)
}
