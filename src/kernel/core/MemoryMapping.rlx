#Require "./src/kernel/core/Paging.rlx"

struct PhysicalAllocation {
	i64 Address
	i32 PageCount

	static self* New(i64 Address, i32 Count) {
		self* this := Alloc('MMG_P', #self)

		;Info("MMG_P(%x, %i):\n%stackdump\n", Address, Count)

		this->Address := Address
		this->PageCount := Count

		return this
	}
}

struct VirtualToPhysicalMapping {
	void* Address
	i32 PageCount

	PhysicalAllocation* Physical

	i64 Flags

	static self* New(void* Virtual, PhysicalAllocation* Physical, i32 PageCount, i64 Flags) {
		self* this := Alloc('MMG_M', #self)

		;Info("MMG_M(%x -> %x, %i):\n%stackdump\n", Virtual, Physical->Address, PageCount)

		this->Address := Virtual
		this->Physical := Physical
		this->PageCount := PageCount
		this->Flags := Flags

		return this
	}

	define self* Clone() {
		return CloneMemory(this, #self)
	}

	define void Map(AddressSpaceManager* Manager) {
		Manager->MapRange(this->Address, this->Physical->Address / PAGE_SIZE, this->PageCount, this->Flags)
	}

	define void UnMap(AddressSpaceManager* Manager) {
		Manager->UnmapRange(this->Address, this->PageCount)
	}
}

#Require "$/PointerArray.rlx"

struct MemoryMapper {
	AddressSpaceManager* AddressSpace
	PageHeap* PhysicalAllocator
	PageHeap* VirtualAllocator

	PointerArray* PhysicalAllocations ; <PhysicalAllocation*>
	PointerArray* Mappings ; <VirtualToPhysicalMapping*>
	
	i8 Active
	
	static MemoryMapper* New(AddressSpaceManager* AddressSpace, PageHeap* PhysicalAllocator, PageHeap* VirtualAllocator) {
		MemoryMapper* this := Alloc('MMG', #MemoryMapper)
		
		this->AddressSpace := AddressSpace
		this->PhysicalAllocator := PhysicalAllocator
		this->VirtualAllocator := VirtualAllocator

		this->PhysicalAllocations := PointerArray:New()
		this->Mappings := PointerArray:New()

		this->Active := false
		
		return this
	}

	
	define VirtualToPhysicalMapping* Map(void* Virtual, PhysicalAllocation* Physical, i32 PageCount, i64 Flags) {
		Flags |= PAGE_PRESENT
		
		VirtualToPhysicalMapping* New := VirtualToPhysicalMapping:New(Virtual, Physical, PageCount, Flags)

		this->Mappings->Push(New)

		if (this->Active) {
			New->Map(this->AddressSpace)
		}

		return New
	}
	
	define PhysicalAllocation* AllocatePhysical(i32 Count) {
		i64 Physical := this->PhysicalAllocator->Allocate(Count)
		PhysicalAllocation* New := PhysicalAllocation:New(Physical, Count)

		this->PhysicalAllocations->Push(New)
		
		return New
	}
	
	define VirtualToPhysicalMapping* MapAddressAnonymous(void* Address, i32 Count, i64 Flags) {
		PhysicalAllocation* Physical := this->AllocatePhysical(Count)
		
		return this->Map(Address, Physical, Count, Flags)
	}
	
	define VirtualToPhysicalMapping* MapAnonymous(i32 Count, i64 Flags) {
		VirtualAllocation* Virtual := this->VirtualAllocator->AllocateVirtual(Count)
		PhysicalAllocation* Physical := this->AllocatePhysical(Count)
		
		return this->Map(Virtual, Physical, Count, Flags)
	}
	
	define VirtualToPhysicalMapping* Split(VirtualToPhysicalMapping* Old, i32 SplitPage) {
		i32 SplitOffset := SplitPage * PAGE_SIZE
		
		i64  PhysicalSplit := Old->Physical->Address + SplitOffset
		void* VirtualSplit := Old->Address + SplitOffset
		
		i32 NewPages := Old->PageCount - SplitPage
		i32 OldPages := Old->PageCount - NewPages
		
		Old->PageCount := OldPages
		Old->Physical->PageCount := OldPages

		PhysicalAllocation* NewPhysical := PhysicalAllocation:New(PhysicalSplit, NewPages)
		this->PhysicalAllocations->Push(NewPhysical)
		
		return this->Map(VirtualSplit, NewPhysical, NewPages, Old->Flags)
	}
	define void Split(VirtualToPhysicalMapping* Old, i32 SplitPage, i32 PageCount, VirtualToPhysicalMapping** OutMiddle, VirtualToPhysicalMapping** OutEnd) {
		i32 OldPageCount := Old->PageCount
		
		*OutMiddle := this->Split(Old, SplitPage)
		
		if (SplitPage + PageCount = OldPageCount) {
			return
		}
		
		*OutEnd := this->Split(*OutMiddle, PageCount)
	}
	
	define void UpdateFlags(VirtualToPhysicalMapping* Mapping, i64 Flags) {
		Mapping->Flags := Flags
		
		if (this->Active) {
			this->AddressSpace->MapRange(Mapping->Address, Mapping->Physical->Address / PAGE_SIZE, Mapping->PageCount, Flags | PAGE_PRESENT)
		}
	}
	
	define VirtualToPhysicalMapping* FindVirtualExact(void* Virtual) {
		for (i32 Index := 0, Index < this->Mappings->Count(), Index++) {
			VirtualToPhysicalMapping* Current := this->Mappings->At(Index)

			if (Current->Address = Virtual) {
				return Current
			}
		}
		
		return null
	}
	
	define VirtualToPhysicalMapping* FindVirtualContaining(void* Virtual) {
		for (i32 Index := 0, Index < this->Mappings->Count(), Index++) {
			VirtualToPhysicalMapping* Current := this->Mappings->At(Index)

			void* Top := Current->Address + (Current->PageCount * PAGE_SIZE)
			
			if (Current->Address <= Virtual && Virtual < Top) {
				return Current
			}
		}
		
		return null
	}
	
	define VirtualToPhysicalMapping* FindVirtual(void* Address, i32 PageCount) {
		Address &= 0x7FFF_FFFF_FFFF_F000
		
		VirtualToPhysicalMapping* Mapping := this->FindVirtualExact(Address)
		
		if (Mapping) {
			if (Mapping->PageCount != PageCount) { 
				; Address is the exact start of a mapping, but with less pages than the
				;  mapping actually has. So we split the mapping into a PageCount sized 
				;   chunk and whatever's left over
				
				this->Split(Mapping, PageCount)
			}
			
			return Mapping
		}
		else {
			Mapping := this->FindVirtualContaining(Address)
			
			if (Mapping) {
				if (Mapping->PageCount != PageCount) {
					; Existing mapping, but not the start of said mapping
					; Which means we need to split it, potentially twice
					; Like         Turns into    by doing two splits
					;  |XXXXXXXX|   |XX|XXX|X|
					;     ^---^
					; Of course, a middle->end segment will only split once
					
					i32 OffsetInMapping := (Address - Mapping->Address) As i32
					i32 PageIndexInMapping := OffsetInMapping / PAGE_SIZE
					
					VirtualToPhysicalMapping* Middle := null
					VirtualToPhysicalMapping* End := null
					
					this->Split(Mapping, PageIndexInMapping, PageCount, &Middle, &End)
					
					if (Mapping->Address = Address) {
						return Mapping
					}
					else if (Middle->Address = Address) {
						return Middle
					}
					else if (End->Address = Address) {
						return End
					}
					else {
						Throw('MAP-SPLT')
					}
				}
			}
		}
		
		return null
	}
	
	define VirtualToPhysicalMapping* MapPages(void* Address, i32 PageCount, i64 Flags) {
		VirtualToPhysicalMapping* Mapping := null
		
		if (Address = null) {
			Mapping := this->MapAnonymous(PageCount, Flags)
		}
		else {
			Mapping := this->FindVirtual(Address, PageCount)
			
			if (Mapping) {
				this->UpdateFlags(Mapping, Flags)
			}
			else {
				Mapping := this->MapAddressAnonymous(Address, PageCount, Flags)
			}
		}
		
		return Mapping
	}
	
	define VirtualToPhysicalMapping* Map(void* Address, i32 Size, i64 Flags) {
		return this->MapPages(Address, SizeToPageCount(Size), Flags)
	}
	
	define void EnableVirtualMappings() {
		for (i32 Index := 0, Index < this->Mappings->Count(), Index++) {
			VirtualToPhysicalMapping* Current := this->Mappings->At(Index)

			Current->Map(this->AddressSpace)
		}
		
		this->Active := true
	}
	
	define void DisableVirtualMappings() {
		for (i32 Index := 0, Index < this->Mappings->Count(), Index++) {
			VirtualToPhysicalMapping* Current := this->Mappings->At(Index)

			Current->UnMap(this->AddressSpace)
		}
		
		this->Active := false
	}

	define void DeletePhysical(PhysicalAllocation* Physical) {
		this->PhysicalAllocations->RemoveValue(Physical)

		this->PhysicalAllocator->Free(Physical->Address, Physical->PageCount)
		Free(Physical)
	}
	define void DeleteMapping(VirtualToPhysicalMapping* Mapping) {
		this->Mappings->RemoveValue(Mapping)
		
		if (this->Active) {
			Mapping->UnMap(this->AddressSpace)
		}

		Free(Mapping)
	}
	
	define void Free() {
		while (this->Mappings->Count()) {
			VirtualToPhysicalMapping* Mapping := this->Mappings->Last()

			this->DeleteMapping(Mapping)
		}

		while (this->PhysicalAllocations->Count()) {
			PhysicalAllocation* Physical := this->PhysicalAllocations->Last()

			this->DeletePhysical(Physical)
		}

		this->PhysicalAllocations->Free()
		Free(this->PhysicalAllocations)
		
		this->Mappings->Free()
		Free(this->Mappings)
	}
	
	define MemoryMapper* Clone() {
		MemoryMapper* Result := MemoryMapper:New(this->AddressSpace, this->PhysicalAllocator, this->VirtualAllocator)
		
		for (i32 Index := 0, Index < this->Mappings->Count(), Index++) {
			VirtualToPhysicalMapping* Existing := this->Mappings->At(Index)
			VirtualToPhysicalMapping* New := Existing->Clone()

			Result->Mappings->Push(New)
		}
		
		return null
	}
}