
#Require "./src/utility/ScanCodes.rlx"
#Require "./src/utility/MemoryFIFO.rlx"
#Require "./src/utility/Paths.rlx"
#Require "./src/kernel/user-mode/Execute.rlx"

define void Prompt() {
	Print("(>")
}

i8*[0x20] CommandParameters

i8 RunningProgram := false
MemoryFIFO* RunningProgramInput := null

i32 LastStatus := 0

FileHandle* CWD := null
i8[40] PWD

define void OnCommand(i8* CommandLine) {
	i32 ParameterStart := 0
	i32 ParameterCount := 0
	
	for (i32 Index := 0, CommandLine[Index] != 0, Index += 1) {
		i8 NextCharacter := CommandLine[Index]
		
		if (NextCharacter = ' ') {
			CommandParameters[ParameterCount] := CommandLine + ParameterStart
			ParameterCount += 1

			CommandLine[Index] := 0
			
			while (CommandLine[Index + 1] = ' ') {
				Index += 1
			}
			
			ParameterStart := Index + 1
		}
	}
	
	CommandParameters[ParameterCount] := CommandLine + ParameterStart
	
	i8* Command := CommandParameters[0]
	i8** Parameters := CommandParameters + 8
	
	if (StringEquals(Command, "status")) {
		Print("$ = %i\n", LastStatus)
	}
	else if (StringEquals(Command, "uptime")) {
		i64 MS := GetUptimeMS()
		i64 Seconds := MS / 1000
		i64 Minutes := Seconds / 60
		Seconds := Seconds % 60
		i64 Hours := Minutes / 60
		Minutes := Minutes % 60
		
		Print(" Uptime [ %ih %im %is | %ims ]\n Ticks [ %i ]\n", Hours, Minutes, Seconds, GetUptimeMS(), GetTickCount())
	}
	else if (StringEquals(Command, "crash")) {
		breakpoint:()
	}
	else if (StringEquals(Command, "mkfile")) {
		i8* Path := CommandParameters[1]
		
		CWD->Open(Path, EXT2_OPEN_CREATE)->Close()
	}
	else if (StringEquals(Command, "mkdirectory")) {
		i8* Path := CommandParameters[1]
		
		CWD->Open(Path, EXT2_OPEN_CREATE_DIRECTORY)->Close()
	}
	else if (StringEquals(Command, "ls")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* Handle := CWD->Open(Path)
		
		if (Handle) {
			DirectoryEntry Entry
			
			loop {
				i32 EntriesRead := Handle->ReadDirectoryEntries(&Entry, 1)
				
				if (EntriesRead != 1) {
					break
				}
				
				FileHandle* EntryHandle := Handle->Open(Entry~>Name)
				
				if (EntryHandle < 0) {
					Print("%s doesn't exist???\n", Entry~>Name)
				}
				else {
					FileStatus EntryInfo
					
					EntryHandle->Status(&EntryInfo)
					
					if (EntryInfo.IsFile()) {
						Print("F\t")
					}
					else {
						Print("D\t")
					}
					
					Print("\t%x\t%s\n", EntryInfo.Size, Entry~>Name)
					
					EntryHandle->Close()
				}
			}
			
			Handle->Close()
		}
	}
	else if (StringEquals(Command, "hex")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* Handle := CWD->Open(Path)
		
		if (Handle = null) {
			Print(" Could not find file '^%s'\n", Path)
		}
		else {
			i8[16] HexBuffer
			
			loop {
				i32 BytesRead := Handle->Read(HexBuffer, 16)
				
				if (BytesRead = 0) {
					Handle->Close()
					
					break
				}
				
				for (i32 Index := 0, Index < BytesRead, Index++) {
					i8 NextByte := HexBuffer[Index]
					
					Print("%c%c ", NumberToCharacter((NextByte >> 4) As i8 & 0xF), NumberToCharacter(NextByte & 0xF))
				}
				
				Print("\n")
			}
		}
	}
	else if (StringEquals(Command, "cat")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* Handle := CWD->Open(Path)
		
		if (Handle = null) {
			Print(" Could not find file '^S1%s^R'\n", Path)
		}
		else {
			void* FileData := KernelPageAllocator->AllocateVirtual(1)
			
			loop {
				i32 BytesRead := Handle->Read(FileData, PAGE_SIZE)
				
				if (BytesRead = 0) {
					Handle->Close()
					
					break
				}
				
				KernelTerminal->Write(FileData, BytesRead)
			}
			
			KernelPageAllocator->FreeVirtual(FileData, 1)
		}
	}
	else if (StringEquals(Command, "reset_time")) {
		asm {cli}
		
		PITWhole := 0
		PITFraction := 0
		TickCount := 0
		
		asm {sti}
	}
	else if (StringEquals(Command, "clear")) {
		Print("\e[H\e[J")
	}
	else if (StringEquals(Command, "colors")) {
		for (i8 Fore := 0, Fore < 16, Fore++) {
			for (i8 Back := 0, Back < 16, Back++) {
				Print("\e[%im\e[%im", TranslateColorToANSI(Fore), TranslateColorToANSI(Back) + 10)
				Print("Test")
			}
			
			Print("^R\n")
		}
	}
	else if (StringEquals(Command, "color")) {
		Print(Parameters[0], ESC)
	}
	else if (StringEquals(Command, "scroll")) {
		if (ParameterCount = 1) {
			i64 LineOffset := AToI(Parameters[0], 10)
			
			Print("^\e[iS", LineOffset)
		}
		else {
			Print("\e[S")
		}
	}
	else if (StringEquals(Command, "peek")) {
		i64 TargetAddress := AToI(Parameters[0], 10)
		i64 AddressValue := *(TargetAddress As i64*)
		
		if (ParameterCount = 2 && StringLength(Parameters[1]) = 1) {
			i8 Size := Parameters[1][0]
			
			if (IsNumeric(Size, 8)) {
				if (Size = '1') {
					AddressValue := AddressValue & 0xFF
				}
				else if (Size = '2') {
					AddressValue := AddressValue & 0xFFFF
				}
				else if (Size = '4') {
					AddressValue := AddressValue & 0xFFFFFFFF
				}
				else if (Size = '8') {
					AddressValue := AddressValue
				}
				else {
					Print(" Unknown size '%c', must be 1/2/4/8\n", Size)
					return
				}
				
				Print(" *(%x As i%i*) = %x\n", TargetAddress, (Size - '0') * 8, AddressValue)
				
				return
			}
		}
		
		Print(" *(%x) = %x\n", TargetAddress, AddressValue)
	}
	else if (StringEquals(Command, "phys")) {
		PhysicalMemory->Print()
	}
	else if (StringEquals(Command, "virt")) {
		KernelAddressSpace->PrintMeta()
		Print("\n")
		KernelAddressSpace->PrintMappings()
	}
	else if (StringEquals(Command, "heap")) {
		KernelHeap->Print()
	}
	else if (StringEquals(Command, "exec")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* File := null

		if (Path[0] = '/') {
			File := RootDirectory->Open(Path + 1)
		}
		else {
			File := CWD->Open(Path)
		}
		
		if !(File) {
			Print(" Could not find file '%s'\n", Path)
		}
		else {
			RunningProgram := true
			
			FileStatus Status
			File->Status(&Status)
			
			i32 FileBlockCount := Status.Size / 1024
			
			if (Status.Size % 1024) {
				FileBlockCount += 1
			}
			
			i32 FilePages := SizeToPageCount(FileBlockCount * 1024)
			
			void* FileData := KernelPageAllocator->AllocateVirtual(FilePages)
			
			File->Read(FileData, Status.Size)
			File->Close()
			
			;Print("Loaded %x byte image @ %x\n", FoundFileNode.FileSizeLow, FileData)
			
			i8* User := "USER=root"
			
			ExecuteParameters ExecuteOptions {
				WorkingDirectory: CWD,
				
				StandardInput: KernelTerminal,
				StandardOutput: KernelTerminal,
				StandardError: KernelTerminal,
				
				ArgumentCount: ParameterCount,
				Arguments: Parameters,
				
				EnvironmentCount: 1,
				Environment: &User
			}
			
			Process* Child := Execute(FileData, &ExecuteOptions)

			KernelPageAllocator->FreeVirtual(FileData, FilePages)
			
			Child~>OnKilled->Wait()
			

			LastStatus := Child->ExitCode
			RunningProgram := false
			
			Child->Free()
			Free(Child)
			
			return
		}
	}
	else if (StringEquals(Command, "ksyscall")) {
		i64 Value := AToI(CommandParameters[0], 16)
		
		syscall:(1, Value)
	}
	else if (StringEquals(Command, "cd")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* NewCWD := CWD->Open(Path)
		
		if !(NewCWD) {
			Print("Could not find '%s'\n", Path)
			return
		}
		
		FileStatus NewCWDStatus
		NewCWD->Status(&NewCWDStatus)
		
		if !(NewCWDStatus.IsDirectory()) {
			Print("'%s' is not a directory\n", Path)
		}
		else {
			CWD->Close()
			CWD := NewCWD
			
			i32 PWDLength := StringLength(PWD)
			i32 PathLength := StringLength(Path)
			MoveMemory(&PWD[PWDLength + 1], Path, PathLength)
			PWD[PWDLength] := '/'
			PWD[PWDLength + 1 + PathLength] := 0
			
			i8* NewPWD := ExpandPath(PWD)
			MoveMemory(PWD, NewPWD, StringLength(NewPWD))
			Free(NewPWD)
		}
	}
	else if (StringEquals(Command, "pwd")) {
		FileStatus CWDStatus
		CWD->Status(&CWDStatus)
		
		FileStatus RootStatus
		RootDirectory->Status(&RootStatus)
		
		if (CWDStatus.INodeNumber = RootStatus.INodeNumber) {
			Print("/\n")
		}
		else {
			Print("%s\n", PWD)
		}
	}
	else if (StringEquals(Command, "capture")) {
		i8* Path := CommandParameters[1]
		
		FileHandle* OutputFile := CWD->Open(Path, EXT2_OPEN_CREATE)
		
		if !(OutputFile) {
			Print("Could not open '%s'\n", Path)
			return
		}
		
		void* ChunkBuffer := KernelPageAllocator->AllocateVirtual(1)
		
		PixelBufferCapture Capture
		Capture.Initialize(PrimaryDisplay)
		i32 tot := 0
		
		loop {
			i32 ChunkSize := Capture.NextChunkSize()
			
			tot += ChunkSize
			
			if (ChunkSize = 0) {
				break
			}
			
			Capture.ReadChunk(ChunkBuffer)
			OutputFile->Write(ChunkBuffer, ChunkSize)
		}
		
		Print("Wrote %x bytes\n", tot)
		
		OutputFile->Close()
		
		KernelPageAllocator->FreeVirtual(ChunkBuffer, 1)
	}
	else {
		Print(" Unknown command '%s'\n", Command)
	}
}

define void ShellThread() {
	i8[64] InputLine
	
	loop {
		Prompt()
		
		KernelTerminal->Wait(POLL_FOR_READ)
		i32 LineLength := KernelTerminal->Read(InputLine, 64)
		
		InputLine[LineLength - 1] := 0 ; remove line ending
		
		OnCommand(InputLine)
	}
	
}

define void SetupShell() {
	CWD := RootDirectory
	
	Task* ShellThreadTask := Scheduler->AddLightTask(&ShellThread)
	
	ShellThreadTask->State := TASK_CAN_RUN
}