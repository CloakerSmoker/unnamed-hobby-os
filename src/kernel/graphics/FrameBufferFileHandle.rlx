
#Require "./src/linux/FrameBuffer.rlx"

class FrameBufferFileHandle implements IFileHandle, derives INew {
    PixelBuffer* Base

    define void New(PixelBuffer* Base) {
        this->Base := Base
    }

    define i32 DeviceControl(i32 Function, void* Parameter) {
        if (Function = LINUX_FRAMEBUFFER_GET_CONSTANT_INFO) {
            LinuxFrameBufferConstantInfo* Constant := Parameter

            MoveMemory(Constant->Identification, "computer :)", 12)
            Constant->PhysicalBase := VirtualToPhysical(this->Base->Buffer())
            Constant->PhysicalSize := this->Base->Size()

            Constant->Type := LINUX_FRAMEBUFFER_TYPE::PACKED_PIXELS
            Constant->Visual := LINUX_FRAMEBUFFER_VISUAL_TYPE::TRUE_COLOR

            Constant->XPanStep := 0
            Constant->YPanStep := 0
            Constant->YWrapStep := 0

            Constant->LineLength := this->Base->Stride()

            Constant->MMIOBase := 0
            Constant->MMIOLength := 0

            Constant->Accelerator := LINUX_FRAMEBUFFER_ACCELERATOR::NONE
            Constant->Capabilities := LINUX_FRAMEBUFFER_CAPABILITIES::NONE
        }
        else if (Function = LINUX_FRAMEBUFFER_GET_VARIABLE_INFO) {
            LinuxFrameBufferVariableInfo* Variable := Parameter

            Variable->XResolution := this->Base->Width()
            Variable->YResolution := this->Base->Height()

            Variable->VirtualXResolution := Variable->XResolution
            Variable->VirtualYResolution := Variable->YResolution

            Variable->XOffset := 0
            Variable->YOffset := 0

            Variable->BitsPerPixel := this->Base->PixelSize() * 8
            Variable->GrayScale := false
        }
        else {
            Raise(new FileException::Invalid())
        }

        return 0
    }

    define void* MapIntoMemory(void* Virtual, i32 Offset, i32 Size) {
        if (Offset != 0 || Size != this->Base->Size()) {
            Throw(HANDLE_ERROR_BAD_PARAMETER)
        }

        i32 Pages := SizeToPageCount(this->Base->Size())
        PhysicalAllocation* BaseAllocation := PhysicalAllocation:New(VirtualToPhysical(this->Base->Buffer()), Pages)
        MemoryMapper* Mapper := CurrentThread->Mapper

        if (Virtual = null) {
            Virtual := Mapper->VirtualAllocator->AllocateVirtual(Pages)
        }
        
        Mapper->Map(Virtual, BaseAllocation, Pages, PAGE_PRESENT | PAGE_WRITE)

        return Virtual
    }

    i32 Offset

    define void Seek(i32 Offset, SeekMode Mode) {
        if (Mode = SeekMode::Set) {
            this->Offset := Offset
        }
    }

    define void Write(void* Buffer, i32 Size) {
        PixelBufferInstance* BaseInstance := this->Base~>Instance

        MoveMemory(BaseInstance->Buffer + this->Offset, Buffer, Size)
    }
}