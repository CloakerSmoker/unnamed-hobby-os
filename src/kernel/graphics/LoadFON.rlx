#Require "./src/utility/NE.rlx"
#Require "./src/utility/FNT.rlx"

define Font* LoadFON(Font* Result, void* Data, i32 Size) {
	NEFile RawNE
	SetMemory(&RawNE, #NEFile, 0)
	NEFile* NE := &RawNE
	
	NE->Initialize(Data, Size)
	
	NEResource* FontResource := NE->FindResource(NE_RESOURCE_TYPE_ID_FONT, 0)
	
	FNTHeader* FNT := NE->GetResourceData(FontResource)
	
	Result->Initialize(RGB32, FNT->PixelWidth, FNT->PixelHeight)
	
	i32 BytesPerColumn := FNT->PixelWidth / 8
	
	if (FNT->PixelWidth % 8) {
		BytesPerColumn += 1
	}
	
	i32 PixelsPerGlyph := Result->Width * Result->Height
	i32 BytesPerRender := PixelsPerGlyph * RGB32->Size
	i32 BytesForRenders := BytesPerRender * 256
	i32 PagesForRenders := SizeToPageCount(BytesForRenders)
	
	Glyph* Glyphs := KernelPageAllocator->AllocateVirtual(1)
	FastZeroMemory(Glyphs, PAGE_SIZE)

	void* Renders := KernelPageAllocator->AllocateVirtual(PagesForRenders)
	FastZeroMemory(Renders, PagesForRenders)
	
	for (i32 Index := 0, Index < 256, Index++) {
		Glyph* Next := Glyphs[Index]
		
		Next->RenderBackgroundColor := 0x00_00_00
		Next->RenderForegroundColor := 0xFF_FF_FF
		
		void* Render := Renders + (Index * BytesPerRender)
		
		Next->Render := Render
		Result->GlyphBuffer->Buffer(Render)
		
		i8* GlyphData := FNT->GetCharacterData(Index)
		
		i32 ColumnSize := FNT->PixelHeight
		i32 ColumnBytes := FNT->PixelWidth / 8
		
		if (FNT->PixelWidth % 8) {
			ColumnBytes += 1
		}
		
		for (i32 Row := 0, Row < FNT->PixelHeight, Row++) {
			i32 ActualColumn := 0
			
			for (i32 ColumnByte := 0, ColumnByte < ColumnBytes, ColumnByte++) {
				i32 ColumnBase := (ColumnByte * ColumnSize) + Row
				i8 ColumnData := GlyphData[ColumnBase]
				
				i32 ColumnEnd := 0
				
				if (ColumnByte + 1 = ColumnBytes && FNT->PixelWidth % 8) {
					ColumnEnd := 8 - (FNT->PixelWidth % 8)
				}
				
				for (i32 Column := 7, Column >= ColumnEnd, Column--) {
					i32 Value := (ColumnData & (1 << (Column As i8))) != 0
					
					Result->GlyphBuffer->SetPixelColor(ActualColumn, Row, Value * 0xFF_FF_FF)
					
					ActualColumn++
				}
			}
		}
	}
	
	Result->Glyphs := Glyphs
	
	return Result
}

define Font* LoadFON(void* Data, i32 Size) {
	return LoadFON(Alloc(#Font), Data, Size)
}

Font RawBootFont
Font* BootFont := &RawBootFont

define void LoadBootFont() {
	LoadFON(BootFont, BOOT_FONT_FON, 0)
}