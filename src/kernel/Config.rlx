i8 USE_SERIAL_OUTPUT := true
i16 SERIAL_OUTPUT_PORT := 1

i32 SCREEN_WIDTH := 1024
i32 SCREEN_HEIGHT := 768
i32 COLOR_DEPTH := 32
i32 BYTES_PER_PIXEL := 4

i32 TERMINAL_FOREGROUND := 0xFF_FF_FF
i32 TERMINAL_BACKGROUND := 0x00_00_00

void* BOOT_FONT_FON := i8[#File "./misc/fonts/OlivettiThin_8x14.fon"]

i8 USE_INTERRUPT_STUBS := false
i8 USE_PAGE_FAULT_HANDLER := false
i8 RECOVER_FROM_USER_PAGE_FAULT := false

i8 DEBUG_SCHEDULER         := false ; Logs task switches plus why
i8 DEBUG_SLOW_CLOCK        := false ; Uses a very low clock speed to reduce output clutter
i8 DEBUG_SYSTEM_CALLS      := false ; Logs system call names/parameters + result
i8 DEBUG_SYS_READ          := false ; Logs a hexdump of data moved by `read()`
i8 DEBUG_SYS_WRITE         := false ; Logs a hexdump of data moved by `write()`
i8 DEBUG_TERMINAL_ESCAPES  := false ; Logs ANSI escapes as the terminal processes them
i8 DEBUG_EXT2_OPTIMIZATION := false ; Logs when the ext2 driver tries to get smart and might break things
i8 DEBUG_ATA_PIO_READWRITE := false ; Logs when ATAPIO might have freaked out
i8 DEBUG_HEAP_ALLOC_FREE   := true

#PhysicalImageBase 0x20_0000
i64 PHYSICAL_ADDRESS_OF_KERNEL := 0x20_0000

#ImageBase 0x7F00_0000_0000
void* ADDRESS_OF_KERNEL       := 0x7F00_0000_0000 As void*

void* ADDRESS_OF_PAGE_FRAMES  := 0xA000_0000 As void*
void* ADDRESS_OF_KERNEL_STACK := 0xB000_0000 As void*
void* ADDRESS_OF_KERNEL_HEAP  := 0xC000_0000 As void*

void* ADDRESS_OF_KERNEL_PAGES := 0xD_0000_0000 As void*
i32   NUMBER_OF_KERNEL_PAGES  := 0x400

void* ADDRESS_OF_FRAME_BUFFER := 0xE000_0000 As void*

void* ADDRESS_OF_USER_STACK   := 0x9000_0000 As void*

; These are only for *virtual* allocations, the first page holds meta-data, the rest are backed if the user decides to
;  mmap them as such
void* ADDRESS_OF_USER_PAGES   := 0x8000_0000 As void* ; Decides where user pages are allocated from
i32   NUMBER_OF_USER_PAGES    := 0x100 ; Decides the total number of user pages that can be allocated


; Calculated, ignore

i32 PIXEL_COUNT := SCREEN_WIDTH * SCREEN_HEIGHT
i32 FRAMEBUFFER_SIZE := (PIXEL_COUNT + 1) * BYTES_PER_PIXEL
i32 ROW_SIZE := SCREEN_WIDTH * BYTES_PER_PIXEL