i8 USE_SERIAL_OUTPUT := true
i16 SERIAL_OUTPUT_PORT := 1

i8 ECHO_INFO_TO_TERMINAL := false

i32 SCREEN_WIDTH := 1024
i32 SCREEN_HEIGHT := 768
i32 COLOR_DEPTH := 32
i32 BYTES_PER_PIXEL := 4

i32 TERMINAL_FOREGROUND := 0xFF_FF_FF
i32 TERMINAL_BACKGROUND := 0x00_00_00

i8 USE_APIC := true
i8 USE_INTERRUPT_STUBS := true
i8 USE_PAGE_FAULT_HANDLER := true
i8 RECOVER_FROM_USER_PAGE_FAULT := false

i32 SYSTEM_CLOCK_HZ := 10

i8 HPET_CAN_PROVIDE_SYSTEM_CLOCK := true
i8 HPET_CAN_USE_MSI_DELIVERY := true

i8 DEBUG_SCHEDULER         := false ; Logs task switches plus why
i8 DEBUG_SLOW_CLOCK        := false ; Uses a very low clock speed to reduce output clutter
i8 DEBUG_SYSTEM_CALLS      := true ; Logs system call names/parameters + result
i8 DEBUG_SYS_READ          := false ; Logs a hexdump of data moved by `read()`
i8 DEBUG_SYS_WRITE         := false ; Logs a hexdump of data moved by `write()`
i8 DEBUG_TERMINAL_ESCAPES  := false ; Logs ANSI escapes as the terminal processes them
i8 DEBUG_EXT2_OPTIMIZATION := false ; Logs when the ext2 driver tries to get smart and might break things
i8 DEBUG_ATA_PIO_READWRITE := false ; Logs when ATAPIO might have freaked out
i8 DEBUG_HEAP_ALLOC_FREE   := false

i32 PAGES_FOR_KERNEL_STACK := 40
i32 PAGES_FOR_KERNEL_HEAP := PAGE_COUNT_FOR_8MB

void* ADDRESS_OF_KERNEL_STACK := 0xB000_0000 As void*
void* ADDRESS_OF_KERNEL_HEAP  := 0xC000_0000 As void*

void* ADDRESS_OF_KERNEL_PAGES := 0xD_0000_0000 As void*
i32   NUMBER_OF_KERNEL_PAGES  := 0x400

void* ADDRESS_OF_FRAME_BUFFER := 0xE000_0000 As void*

void* USER_NO_MANS_LAND := 0x1000_0000_0000 As void*

void* ADDRESS_OF_SYSCALL_TRAMPOLINE := 0x2000_0000_0000 As void*
void* ADDRESS_OF_KERNEL_GS := 0x2000_0000_1000 As void*
void* ADDRESS_OF_USER_MODE_TRAMPOLINE := 0x2000_0000_2000 As void*
void* ADDRESS_OF_GDT := 0x2000_0000_3000 As void*
void* ADDRESS_OF_TSS := 0x2000_0000_4000 As void*
void* ADDRESS_OF_IDT := 0x2000_0000_5000 As void*

void* ADDRESS_OF_USER_STACK   := 0x9E_0000_0000 As void*

; These are only for *virtual* allocations, the first page holds meta-data, the rest are backed if the user decides to
;  mmap them as such
void* ADDRESS_OF_USER_PAGES   := 0x8_0000_0000 As void* ; Decides where user pages are allocated from
i32   NUMBER_OF_USER_PAGES    := 0x1_0000 ; Decides the total number of user pages that can be allocated

void* ADDRESS_OF_PCIE_CONFIG := 0xE_0000_0000 As void*

; Calculated, ignore

i32 PIXEL_COUNT := SCREEN_WIDTH * SCREEN_HEIGHT
i32 FRAMEBUFFER_SIZE := (PIXEL_COUNT + 1) * BYTES_PER_PIXEL
i32 ROW_SIZE := SCREEN_WIDTH * BYTES_PER_PIXEL