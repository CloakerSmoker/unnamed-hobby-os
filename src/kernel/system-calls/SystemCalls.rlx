#Require "./src/linux/SystemCalls.rlx"

i32 SYSTEM_CALL_COUNT := LinuxSyscall::Count As i32

#Require "./src/kernel/system-calls/SystemCallTable.rlx"

i64 SyscallCount := 0

define void HandleSystemCall(AMD64Context* Context) {
	SendEOI(0) ; HACK: PIC gets confused into thinking we've handling a very high priority interrupt
	SendEOI(8) ;  so we need to convince it otherwise in order to get interrupts while handling syscalls
	
	i32 Number := Context->EAX
	
	;Print("Syscall %x\n", Number)

	SyscallCount += 1
	
	if (DEBUG_SYSTEM_CALLS) {
		i8* Name := GetLinuxSysCallName(Number)
		
		Info("%i: %s(%x, %x, %x, %x, %x, %x)\n", SyscallCount, Name, Context->RDI, Context->RSI, Context->RDX, Context->R10, Context->R8, Context->R9)
	}
	
	try {
		Context->RAX := SystemCalls->Invoke(Number, Context->RDI, Context->RSI, Context->RDX, Context->R10, Context->R8, Context->R9)
	}
	catch (i64 Code) {
		i8* Name := GetLinuxSysCallName(Number)
			
		Info("During syscall %i: %s(%x, %x, %x, %x, %x, %x) -> ", SyscallCount, Name, Context->RDI, Context->RSI, Context->RDX, Context->R10, Context->R8, Context->R9)
		Info("Exception %l\n", Code)
		
		Context->RAX := -LINUX_ERROR_FAULT
	}

	if (DEBUG_SYSTEM_CALLS) {
		i8* Name := GetLinuxSysCallName(Number)
		
		Info("%i: %s(%x, %x, %x, %x, %x, %x) -> %x\n", SyscallCount, Name, Context->RDI, Context->RSI, Context->RDX, Context->R10, Context->R8, Context->R9, Context->RAX)
	}
	
	;ResumeUserMode(Context)
}

define void ExitSystemCall() {
	Scheduler->RunNext()
}

define void EnterSystemCall(AMD64Context* UserContext) {
	CurrentThread->FireSystemCall()
}

#Require "./src/kernel/core/GlobalSegment.rlx"

define void OnSystemCall() asm {
	; Called in kernel-mode with kernel memory map but user context
	; RSP was set from dual-mode handler

	push, rdi ; clobbered when setting up call to SaveContext
	
	call, @GetCurrentTaskContext
	mov, rdi, rax      ; Parameter = CurrentTaskContext
	call, @SaveContext ; Capture as much original context as possible
	; Of course, RIP and flags are lost (but the processor saved them for us)
	
	mov, {rdi + AMD64Context.RIP} As i64*, rcx        ; Context.RIP = rcx
	mov, {rdi + AMD64Context.Flags} As i64*, r11 ; Context.Flags = r11
	
	pop, rax
	mov, {rdi + AMD64Context.RDI} As i64*, rax ; Context.RDI = UserRDI
	
	{ 0x65, 0x48, 0x8B, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00 } ; mov rax, gs:[pThis]
	
	mov, rbx, {rax + KernelGS.UserRAX} As i64*
	mov, {rdi + AMD64Context.RAX} As i64*, rbx ; Context.RAX = KernelGS.UserRAX

	mov, rbx, {rax + KernelGS.UserRSP} As i64*
	mov, {rdi + AMD64Context.RSP} As i64*, rbx ; Context.RSP = KernelGS.RSP
	
	jmp, @EnterSystemCall
}

define void SystemCallTrampoline() asm {
	; syscall entrypoint, runs in kernel mode but with user mode context
	; We can't trust the stack, and need to preserve all registers
	; Save RAX/RSP into KernelGS, then load minimal kernel context out of KernelGS and
	;  handle the rest of the syscall with proper kernel context

	;{ 0x0F, 0x01, 0xF8 } ; swapgs

	{ 0x65, 0x48, 0x89, 0x04, 0x25, 0x08, 0x00, 0x00, 0x00 } ; mov gs:[UserRAX], rax
	{ 0x65, 0x48, 0x89, 0x24, 0x25, 0x10, 0x00, 0x00, 0x00 } ; mov gs:[UserRSP], rsp
	
	{ 0x65, 0x48, 0x8B, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00 } ; mov rax, gs:[pThis]

	mov, rsp, {rax + KernelGS.KernelCR3} As i64*
	movcr3, rsp

	mov, rsp, {rax + KernelGS.KernelRSP} As i64*
	mov, rax, {rax + KernelGS.KernelContinuation} As i64*

	jmp, rax

	{ 0x0F, 0x0B } ; ud2
}

#Require "./src/kernel/system-calls/IO/FileSystem.rlx"
#Require "./src/kernel/system-calls/IO/Network.rlx"
#Require "./src/kernel/system-calls/Control/Environment.rlx"
#Require "./src/kernel/system-calls/Control/Process.rlx"
#Require "./src/kernel/system-calls/Control/Synchronization.rlx"

define void SetupSystemCalls() {

	void* pSystemCallTrampoline := AllocateDualModePages("System Call Trampoline", 1)->Virtual

	i64 OldEFER := ReadMSR(AMD64_MSR_EFER)
	WriteMSR(AMD64_MSR_EFER, OldEFER | 1)
	WriteMSR(AMD64_MSR_STAR, (KERNEL_CS << 32) | (USER_NULL << 48))
	WriteMSR(AMD64_MSR_LSTAR, pSystemCallTrampoline As i64)
	WriteMSR(AMD64_MSR_SFMASK, 0x600 | X64_RFLAGS_IF)

	KERNEL_GS->KernelContinuation := &OnSystemCall

	; Copy trampoline to pSystemCallTrampoline
	i32 TrampolineSize := GetDualModeFunctionSize(&SystemCallTrampoline)
	Info("System Call Trampoline is %i bytes\n", TrampolineSize)
	MoveMemory(pSystemCallTrampoline, &SystemCallTrampoline, TrampolineSize)

	; Plumbing done, setup actual syscalls	
	
	SetupSystemCallTable()
	RegisterFileSystemSystemCalls()
	RegisterEnvironmentSystemCalls()
	RegisterProcessSystemCalls()
	RegisterSynchronizationSystemCalls()
	RegisterNetworkSystemCalls()
}