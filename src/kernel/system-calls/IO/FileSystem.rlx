define i64 SystemCallOpen(i64 USER_Path, i32 Flags, i32 Mode) {
	if (USER_Path = 0) {
		; wtf busybox vi?

		return -LINUX_ERROR_INVAL
	}

	i8[256] Path

	if !(CurrentProcess->ReadString(USER_Path, Path, MAX_PATH)) {
		return -LINUX_ERROR_INVAL
	}

	if (DEBUG_SYSTEM_CALLS) {
		Info("Open(%s, %x, %x)\n", Path, Flags, Mode)
	}
	
	i8 Ext2Flags := EXT2_OPEN_IF_EXISTS
	
	if (Flags & LINUX_FILE_CREATE_NEW) {
		Ext2Flags := EXT2_OPEN_CREATE
	}

	if (CurrentProcess->WorkingDirectory->TypeID() != typeid:(GenericDirectoryFileHandle)) {
		Panic("Process working directory is not a GenericDirectoryFileHandle")
	}

	GenericDirectoryFileHandle* WorkingDirectoryHandle := CurrentProcess->WorkingDirectory
	IDirectory* WorkingDirectory := WorkingDirectoryHandle->Directory
	
	VFSDirectoryEntry Entry
	if !(Lookup(WorkingDirectory, Path, &Entry)) {
		Info("Not found\n")
		return -LINUX_ERROR_NOENT
	}

	IFileHandle* EntryHandle := null

	if (Entry.Type = VFSDirectoryEntryType::File) {
		EntryHandle := Entry.File->Open(Ext2Flags)
	}
	else if (Entry.Type = VFSDirectoryEntryType::Directory) {
		EntryHandle := new GenericDirectoryFileHandle(Entry.Directory)
	}

	Info("Found\n")
	
	return CurrentProcess->AllocateFileDescriptor(EntryHandle)
}

define i64 SystemCallClose(i64 FileDescriptor) {
	CurrentProcess->FileDescriptorsToHandles[FileDescriptor]->Close()
	CurrentProcess->FileDescriptorsToHandles[FileDescriptor] := null
	
	return 0
}

define i64 SystemCallDeviceControl(i64 FileDescriptor, i32 Command, void* Argument) {
	return CurrentProcess->FileDescriptorsToHandles[FileDescriptor]->DeviceControl(Command, Argument)
}

define i64 SystemCallFileStatus(i64 FileDescriptor, i64 USER_Out) {
	LinuxFileStatus* Out := CurrentProcess->MapAddressForWrite(USER_Out, #LinuxFileStatus)

	if !(Out) {
		return -LINUX_ERROR_INVAL
	}

	CurrentProcess->FileDescriptorsToHandles[FileDescriptor]->Status(Out As FileStatus*)
	
	return 0
}

define i64 SystemCallPathStatus(i8* Path, i64 USER_Out) {
	LinuxFileStatus* Out := CurrentProcess->MapAddressForWrite(USER_Out, #LinuxFileStatus)

	if !(Out) {
		return -LINUX_ERROR_INVAL
	}

	IFileHandle* Target := CurrentProcess->WorkingDirectory->Open(Path)
	
	if !(Target) {
		return -LINUX_ERROR_NOENT
	}
	
	Target->Status(Out As FileStatus*)
	Target->Close()
	
	return 0
}

define i64 SystemCallTruncate(i64 FileDescriptor, i32 Size) {
	return 0
}

define i64 SystemCallSeek(i64 FileDescriptor, i32 Offset, i32 Mode) {
	if (FileDescriptor = 5 && Offset = 0x273B10) {
		Info("Nuts 9000\n")
		;CurrentProcess->AddressSpace->SetRange(0x14e807000 As void*, 0, 1, 0)
	}

	return CurrentProcess->FileDescriptorsToHandles[FileDescriptor]->Seek(Offset, Mode As SeekMode)
}

define i32 SystemCallPoll(i64 USER_Targets, i32 TargetCount, i32 Timeout) {
	LinuxPollTarget* Targets := CurrentProcess->MapAddressForWrite(USER_Targets, TargetCount * #LinuxPollTarget)

	if !(Targets) {
		return -LINUX_ERROR_INVAL
	}

	if (Timeout < 0) {
		Timeout := 0x7FFF_FFFF
	}

	i64 End := GetUptimeMS() + Timeout
	
	while (GetUptimeMS() <= End) {
		i32 CountWithReturnEvents := 0

		for (i32 Index := 0, Index < TargetCount, Index++) {
			LinuxPollTarget* TargetInfo := Targets[Index]
			
			IFileHandle* Target := CurrentProcess->FileDescriptorsToHandles[TargetInfo->FileDescriptor]

			;Info("Poll(%i, %b) = ", TargetInfo->FileDescriptor, TargetInfo->RequestedEvents)
			TargetInfo->ReturnedEvents := Target->Poll(TargetInfo->RequestedEvents) As i16

			;Info("%b\n", TargetInfo->ReturnedEvents)

			if (TargetInfo->ReturnedEvents) {
				CountWithReturnEvents += 1
			}
		}

		if (CountWithReturnEvents) {
			return CountWithReturnEvents
		}

		SchedulerYield()
	}

	return 0
}

define i64 SystemCallRead(i64 FileDescriptor, i64 USER_Buffer, i32 Size) {
	void* Buffer := CurrentProcess->MapAddressForWrite(USER_Buffer, Size)

	if !(Buffer) {
		return -LINUX_ERROR_INVAL
	}

	IFileHandle* Handle := CurrentProcess->FileDescriptorsToHandles[FileDescriptor]
	
	i64 ActualSize := Handle->Read(Buffer, Size)

	if (DEBUG_SYS_READ) {
		Info("sys_read(%x, %x) -> %x\n%hexdump\n", FileDescriptor, Size, ActualSize, Buffer, ActualSize)
	}

	return ActualSize
}

define i64 SystemCallWrite(i64 FileDescriptor, i64 USER_Buffer, i32 Size) {
	void* Buffer := CurrentProcess->MapAddressForRead(USER_Buffer, Size)

	if !(Buffer) {
		return -LINUX_ERROR_INVAL
	}

	if (FileDescriptor = 1 || FileDescriptor = 2) {
		if (DEBUG_SYS_WRITE) {
			Info("%hexdump", Buffer, Size)
		}
	}
	
	IFileHandle* Handle := CurrentProcess->FileDescriptorsToHandles[FileDescriptor]
	
	return Handle->Write(Buffer, Size)
}

define i64 SystemCallSendFile(i64 Out, i64 In, i64 USER_Offset, i64 Size) {
	;Print("SendFile(%x, %x, %x, %x)\n", Out, In, Offset, Size)

	;i64* Offset := CurrentProcess->MapAddressForWrite(USER_Offset, 8)

	;if !(Offset) {
	;	return -LINUX_ERROR_INVAL
	;}

	IFileHandle* InHandle := CurrentProcess->FileDescriptorsToHandles[In]
	IFileHandle* OutHandle := CurrentProcess->FileDescriptorsToHandles[Out]
	
	i64 Count := Size
	i64 Written := 0

	void* Temp := KernelPageAllocator->AllocateVirtual(2)
	i32 ChunkSize := 2 * PAGE_SIZE

	while (Count != 0) {
		i32 ThisChunkSize := ChunkSize

		if (ThisChunkSize > Count) {
			ThisChunkSize := Count As i32
		}

		;i64 ThisChunkRead := SystemCallRead(In, Temp, ThisChunkSize)

		i64 ThisChunkRead := InHandle->Read(Temp, ThisChunkSize)
		
		;Info("Read %x/%x bytes\n", ThisChunkRead, ThisChunkSize)
		
		;i64 ThisChunkWritten := SystemCallWrite(Out, Temp, ThisChunkRead As i32)

		i64 ThisChunkWritten := OutHandle->Write(Temp, ThisChunkRead As i32)

		;Info("Written %x/%x bytes\n", ThisChunkWritten, ThisChunkSize)

		if (ThisChunkRead != ThisChunkSize || ThisChunkWritten != ThisChunkSize) {
			break
		}

		Written += ThisChunkSize
		Count -= ThisChunkSize
	}

	KernelPageAllocator->FreeVirtual(Temp, 2)

	return Written
}

define i64 SystemCallWriteMultiple(i64 FileDescriptor, i64 USER_Vectors, i32 Count) {
	IFileHandle* Handle := CurrentProcess->FileDescriptorsToHandles[FileDescriptor]

	i64 TotalWritten := 0
	
	for (i32 Index := 0, Index < Count, Index++) {
		i64 USER_Next := USER_Vectors + (Index * #LinuxIOVector)

		LinuxIOVector Next

		if !(CurrentProcess->Read(&Next, USER_Next, #LinuxIOVector)) {
			return -LINUX_ERROR_INVAL
		}

		void* NextBuffer := CurrentProcess->MapAddressForRead(Next.Address, Next.Size As i32)

		Info("sys_writev(%i, %x, %i): ", FileDescriptor, Next.Address, Next.Size As i32)

		for (i32 I := 0, I < Next.Size As i32, I++) {
			Info("%c", ((NextBuffer As i8*)[I]))
		}

		Info("\n")
		
		TotalWritten += Handle->Write(NextBuffer, Next.Size As i32)
	}
	
	return TotalWritten
}

define i64 SystemCallReadMultiple(i64 FileDescriptor, i64 USER_Vectors, i32 Count) {
	IFileHandle* Handle := CurrentProcess->FileDescriptorsToHandles[FileDescriptor]

	i64 TotalRead := 0
	
	for (i32 Index := 0, Index < Count, Index++) {
		i64 USER_Next := USER_Vectors + (Index * #LinuxIOVector)

		LinuxIOVector Next

		if !(CurrentProcess->Read(&Next, USER_Next, #LinuxIOVector)) {
			return -LINUX_ERROR_INVAL
		}

		if (FileDescriptor = 5 && Next.Address = 0x14E805660) {
			Info("Nuts 99002\n")
		}

		Info("sys_readv(%i, %x, %i)\n", FileDescriptor, Next.Address, Next.Size As i32)

		void* NextBuffer := CurrentProcess->MapAddressForWrite(Next.Address, Next.Size As i32)
		
		TotalRead += Handle->Read(NextBuffer, Next.Size As i32)
	}
	
	return TotalRead
}

define void RegisterFileSystemSystemCalls() {
	SystemCalls->Register(LinuxSyscall::open, &SystemCallOpen)
	;SystemCalls->Register(LinuxSyscall::close, &SystemCallClose)
	SystemCalls->Register(LinuxSyscall::ioctl, &SystemCallDeviceControl)
	SystemCalls->Register(LinuxSyscall::fstat, &SystemCallFileStatus)
	SystemCalls->Register(LinuxSyscall::stat, &SystemCallPathStatus)
	SystemCalls->Register(LinuxSyscall::ftruncate, &SystemCallTruncate)
	SystemCalls->Register(LinuxSyscall::lseek, &SystemCallSeek)
	SystemCalls->Register(LinuxSyscall::poll, &SystemCallPoll)
	SystemCalls->Register(LinuxSyscall::read, &SystemCallRead)
	SystemCalls->Register(LinuxSyscall::write, &SystemCallWrite)
	SystemCalls->Register(LinuxSyscall::sendfile, &SystemCallSendFile)
	SystemCalls->Register(LinuxSyscall::writev, &SystemCallWriteMultiple)
	SystemCalls->Register(LinuxSyscall::readv, &SystemCallReadMultiple)
}