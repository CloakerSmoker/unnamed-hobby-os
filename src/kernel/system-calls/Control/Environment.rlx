define void SystemCallSetSignalAction(i32 Number, LinuxSignalAction* New, LinuxSignalAction* Old) {
	if (Old) {
		MoveMemory(Old, CurrentProcess~>Signals->Actions[Number], #LinuxSignalAction)
	}
	
	MoveMemory(CurrentProcess~>Signals->Actions[Number], New, #LinuxSignalAction)
}

define void SystemCallSetSignalMask(i32 Operation, i64* New, i64* Old) {
	i64 Mask := CurrentThread->SignalMask
	
	if (Old != null) {
		*Old := Mask
	}
	
	if (New != null) {
		if (Operation = LINUX_SIGNAL_MASK_BLOCK) {
			Mask |= *New
		}
		else if (Operation = LINUX_SIGNAL_MASK_UNBLOCK) {
			Mask &= ~(*New)
		}
		else if (Operation = LINUX_SIGNAL_MASK_SET) {
			Mask := *New
		}
	}
	
	CurrentThread->SignalMask := Mask
}

i32 LINUX_PROTECTION_READ  := 0x1
i32 LINUX_PROTECTION_WRITE := 0x2
i32 LINUX_PROTECTION_EXECUTE  := 0x4
i32 LINUX_PROTECTION_NONE  := 0x0

i32 LINUX_MAP_SHARED := 0x1
i32 LINUX_MAP_PRIVATE := 0x2
i32 LINUX_MAP_TYPE_MASK := 0xF

i32 LINUX_MAP_FIXED := 0x10
i32 LINUX_MAP_ANONYMOUS := 0x20

define i64 ConvertLinuxMemoryProtection(i32 Protection) {
	if (Protection = LINUX_PROTECTION_NONE) {
		return 0
	}
	
	i64 Result := PAGE_USER
	
	if (Protection & LINUX_PROTECTION_WRITE) {
		Result |= PAGE_WRITE
	}
	
	return Result
}

define void* SystemCallMapMemory(void* Address, i32 Size, i32 Protection, i32 Flags, i32 File, i32 Offset) {
	i64 MemoryFlags := ConvertLinuxMemoryProtection(Protection)
	
	i32 PageCount := SizeToPageCount(Size)
	VirtualToPhysicalMapping* Mapping := null
	
	if (Address = null) {
		Mapping := CurrentThread->Mapper->MapAnonymous(PageCount, MemoryFlags)
		Address := Mapping->Address
		
		if (Flags & LINUX_MAP_ANONYMOUS) {
			SetMemory(Address, Size, 0)
		}
	}
	else {
		Mapping := CurrentThread->Mapper->FindVirtual(Address, PageCount)
		
		if (Mapping) {
			CurrentThread->Mapper->UpdateFlags(Mapping, MemoryFlags)
		}
		else {
			Mapping := CurrentThread->Mapper->MapAddressAnonymous(Address, PageCount, MemoryFlags)
			
			if (Flags & LINUX_MAP_ANONYMOUS) {
				SetMemory(Address, Size, 0)
			}
		}
	}
	
	return Address
}

define i64 SystemCallUnMapMemory(void* Address, i32 Size) {
	VirtualToPhysicalMapping* Mapping := CurrentThread->Mapper->FindVirtual(Address, Size)
	
	if (Mapping) {
		CurrentThread->Mapper->DeleteMapping(Mapping)
	}
	else {
		return -1
	}
	
	return 0
}

define void* SystemCallProgramBreak(void* NewBreak) {
	void* BreakEnd := CurrentProcess->BreakStart + (CurrentProcess->BreakSize * PAGE_SIZE)

	if (NewBreak = null) {
		return BreakEnd
	}
	else {
		i64 SizeBytes := (NewBreak As i64) - (CurrentProcess->BreakStart As i64)
		i64 SizePages := SizeBytes / PAGE_SIZE
		i64 NewPages := SizePages - CurrentProcess->BreakSize

		SystemCallMapMemory(BreakEnd, (NewPages * PAGE_SIZE) As i32, LINUX_PROTECTION_READ | LINUX_PROTECTION_WRITE, LINUX_MAP_ANONYMOUS, 0, 0)

		CurrentProcess->BreakSize += NewPages

		return BreakEnd + (NewPages * PAGE_SIZE)
	}
}

i32 ARCH_PRCTL_SET_GS := 0x1001
i32 ARCH_PRCTL_SET_FS := 0x1002
i32 ARCH_PRCTL_GET_FS := 0x1003
i32 ARCH_PRCTL_GET_GS := 0x1004

define void SystemCallArchPrctl(i64 SubFunction, void* Parameter) {
	if (SubFunction = ARCH_PRCTL_SET_GS) {
		SetGS(Parameter)
	}
	else if (SubFunction = ARCH_PRCTL_GET_GS) {
		*(Parameter As i64*) := GetGS() As i64
	}
	else if (SubFunction = ARCH_PRCTL_SET_FS) {
		SetFS(Parameter)
	}
	else if (SubFunction = ARCH_PRCTL_GET_FS) {
		*(Parameter As i64*) := GetFS() As i64
	}
}

define i64 SystemCallSetThreadIDAdress(i64* pThreadID) {
	return -LINUX_ERROR_NOENT
}

define void RegisterEnvironmentSystemCalls() {
	SystemCalls->Register(LINUX_SYSCALL_RT_SIGACTION, &SystemCallSetSignalAction)
	SystemCalls->Register(LINUX_SYSCALL_RT_SIGPROCMASK, &SystemCallSetSignalMask)
	SystemCalls->Register(LINUX_SYSCALL_BRK, &SystemCallProgramBreak)
	SystemCalls->Register(LINUX_SYSCALL_MMAP, &SystemCallMapMemory)
	SystemCalls->Register(LINUX_SYSCALL_MUNMAP, &SystemCallUnMapMemory)
	SystemCalls->Register(LINUX_SYSCALL_ARCH_PRCTL, &SystemCallArchPrctl)
	SystemCalls->Register(LINUX_SYSCALL_SET_TID_ADDRESS, &SystemCallSetThreadIDAdress)
}