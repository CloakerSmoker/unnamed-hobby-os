#Require "./src/linux/Termios.rlx"

#Require "./src/kernel/file-system/FileSystem.rlx"

i32 TERMINAL_COMPONENT_SET_CONFIG := 'TCSC'
i32 TERMINAL_COMPONENT_SET_OTHER  := 'TCSO'
i32 TERMINAL_INITIALIZE := 'TINI'
i32 TERMINAL_SET_INPUT  := 'TSIP'
i32 TERMINAL_SET_OUTPUT := 'TSOP'

i32 TERMINAL_MAJOR := 4
i32 TERMINAL_MINOR := 1

FileHandle* DefaultTerminalInput := null
FileHandle* DefaultTerminalOutput := null

struct TerminalInstance {
	#Include "./src/kernel/file-system/HandleInstance.rlx"
	
	TermiosConfig Config
	FileHandle* Input
	FileHandle* Output
	
	i32 Major
	i32 Minor
	
	define i32 CascadeDeviceControl(i32 Function, void* Parameter) {
		i32 InputResult := DEVICE_CONTROL_INVALID_FUNCTION
		i32 OutputResult := DEVICE_CONTROL_INVALID_FUNCTION
		
		if (this->Input) {
			InputResult := this->Input->DeviceControl(Function, Parameter)
		}
		
		if (this->Output) {
			OutputResult := this->Output->DeviceControl(Function, Parameter)
		}
		
		; If at least one of the two understood the function, then we'll consider it a success
		
		if (InputResult = DEVICE_CONTROL_INVALID_FUNCTION && OutputResult = DEVICE_CONTROL_INVALID_FUNCTION) {
			return DEVICE_CONTROL_INVALID_FUNCTION
		}
		
		return 0
	}

	define void UpdateLinks() {
		if (this->Output && this->Input) {
			this->Output->DeviceControl(TERMINAL_COMPONENT_SET_OTHER, this->Input)
			this->Input->DeviceControl(TERMINAL_COMPONENT_SET_OTHER, this->Output)
		}
	}
	
	define i32 DeviceControl(i32 Function, void* Parameter) {
		if (Function = TERMINAL_INITIALIZE) {
			this~>Config->SetDefaults()
			
			if (this->Major = TERMINAL_MAJOR && this->Minor = TERMINAL_MINOR) {
				this->CascadeDeviceControl(TERMINAL_INITIALIZE, null)
			}
		}
		else if (Function = TERMINAL_SET_INPUT) {
			this->Input := Parameter
			
			this->Input->DeviceControl(TERMINAL_COMPONENT_SET_CONFIG, this~>Config)
			this->UpdateLinks()
		}
		else if (Function = TERMINAL_SET_OUTPUT) {
			this->Output := Parameter
			
			this->Output->DeviceControl(TERMINAL_COMPONENT_SET_CONFIG, this~>Config)
			this->UpdateLinks()
		}
		else if (Function = TERMIOS_GET_CONFIG) {
			TermiosConfig* Config := Parameter
			
			MoveMemory(Config, this~>Config, #TermiosConfig)
			
			; Allow input/output to modify result
			this->CascadeDeviceControl(TERMIOS_GET_CONFIG, Parameter)
		}
		else if (Function = TERMIOS_SET_CONFIG) {
			; Allow input/output to modify new config
			this->CascadeDeviceControl(TERMIOS_SET_CONFIG, Parameter)
			
			TermiosConfig* Config := Parameter
			
			MoveMemory(this~>Config, Config, #TermiosConfig)
		}
		else {
			return this->CascadeDeviceControl(Function, Parameter)
		}
		
		return 0
	}
	
	define i32 Poll(i32 Mode) {
		i32 Result := 0
		
		if (Mode & POLL_FOR_READ) {
			Result |= this->Input->Poll(POLL_FOR_READ)
		}
		
		if (Mode & POLL_FOR_WRITE) {
			Result |= this->Output->Poll(POLL_FOR_WRITE)
		}
		
		return Result
	}
	
	define i32 Read(void* Buffer, i32 Size) {
		return this->Input->Read(Buffer, Size)
	}
	define i32 Write(void* Buffer, i32 Size) {
		return this->Output->Write(Buffer, Size)
	}
	
	define void Initialize(void** Options, i32 Count) {
		i32 Major := Options[0] As i32
		i32 Minor := Options[1] As i32
		
		this->Major := Major
		this->Minor := Minor
		
		if (Major = TERMINAL_MAJOR && Minor = TERMINAL_MINOR) {
			; We are the default terminal, inform our descendents

			this->DeviceControl(TERMINAL_SET_INPUT, DefaultTerminalInput)
			this->DeviceControl(TERMINAL_SET_OUTPUT, DefaultTerminalOutput)
			this->DeviceControl(TERMINAL_INITIALIZE, null)
		}
	}
}

FileHandlePrototype TerminalFilePrototype {
	DataSize: #TerminalInstance,
	Initialize: &TerminalInstance.Initialize,
	
	DeviceControl: &TerminalInstance.DeviceControl,
	
	Poll: &TerminalInstance.Poll,
	Read: &TerminalInstance.Read,
	Write: &TerminalInstance.Write
}

i32 TERMINAL_FILE_PROTOTYPE_ID := RegisterHandlePrototype(&TerminalFilePrototype)

MagicFilePrototype TerminalMagicFilePrototype {
	Prototype: &TerminalFilePrototype,
	Major: 4,
	Minor: 1
}

i32 TERMINAL_FILE_MAGIC_ID := RegisterMagicFile(&TerminalMagicFilePrototype)