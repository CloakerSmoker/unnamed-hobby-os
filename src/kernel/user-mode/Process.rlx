#Require "./src/utility/ELF.rlx"
#Require "./src/kernel/core/MemoryMapping.rlx"
#Require "./src/linux/Signals.rlx"
#Require "./src/linux/ErrorNumbers.rlx"

declare void HandleSystemCall(AMD64Context*)

define i64 SignalMask(i32 Number) {
	return (1 As i64) << ((Number & 0xFF) As i8)
}

struct ProcessSignalContainer {
	LinuxSignalAction[31] Actions
	
	i32[31] PendingErrorNumbers
	i32[31] PendingSignalCodes
	
	i64 PendingSignals
	
	define void Queue(i32 Number, i32 Error, i32 Code) {
		this->PendingSignals |= SignalMask(Number)
		
		this->PendingErrorNumbers[Number] := Error
		this->PendingSignalCodes[Number] := Code
	}
	
	define i32 Claim(i64 ThreadMask, i32* OutErrorNumber, i32* OutSignalCode) {
		i64 CanFireMask := this->PendingSignals & ~ThreadMask
		
		if !(CanFireMask) {
			return -1
		}
		
		for (i32 Index := 0, Index < 31, Index++) {
			i64 Mask := SignalMask(Index)
			
			if (CanFireMask & Mask) {
				*OutErrorNumber := this->PendingErrorNumbers[Index]
				*OutSignalCode := this->PendingSignalCodes[Index]
				
				this->PendingSignals -= Mask
				
				return Index
			}
		}
		
		return -1
	}
}

UserThread* CurrentThread := null

struct UserThread {
	Task* UserTask ; Just holds state
	Task* KernelTask ; Actually scheduled
	AMD64Context AbortSystemCallState
	
	ProcessSignalContainer* ParentSignals
	MemoryMapper* Mapper
	
	i32 ParentProcessID
	
	i8 HasPendingSystemCall
	
	i64 SignalMask
	
	LinuxSignalAction* CurrentSignalAction
	LinuxSignalInfo* CurrentSignalInfo
	LinuxSignalUserContext* CurrentSignalContext
	i32 CurrentSignal
	
	i8 Killed
	i32 ExitCode
	Event OnKilled
	
	declare void SetupSignalState(i32, i32, i32)
	
	define void AbortSystemCall() {
		this->UserTask~>Context->RAX := LINUX_ERROR_INTR
		this->HasPendingSystemCall := false
		
		MoveMemory(this->KernelTask~>Context, this~>AbortSystemCallState, #AMD64Context)
	}
	
	define void DoKernelThread() {
		; Since this thread "manually" yeilds to the user-mode task, we need to do a bit
		;  of a dance to make sure that control ends up in the right place when this thread
		;   is interrupted and resumed
		
		; Each time this thread resumes, we need to do a few things:
		;  1) Handle system calls
		;  2) Dispatch signals
		; and finally
		;  3) Resume the user task
		
		; We can get interrupted during 1/2 which will save our context, but once we reach
		;  3 there's nothing left to save our context, making a bit of a problem.
		
		; We need to persist any interrupted state during 1/2, but need to reset state back
		;  to the top of this function before 3 (otherwise the next time we're resumed, then
		;   we'd actually end up resuming previous code which was already interrupted and
		;    likely finished executing)
		
		; This is accomplished by only saving the "top of function" state into the actual
		;  task once steps 1/2 are completely done and we know that any state in our task
		;   is just garbage.
		
	
		SaveContext(this~>AbortSystemCallState)
		DisableInterrupts()

		if (this->Killed) {
			SchedulerEnd()
		}
		
		i32 SignalErrorNumber := 0
		i32 SignalCode := 0
		i32 Signal := this->ParentSignals->Claim(this->SignalMask, &SignalErrorNumber, &SignalCode)
		
		if (Signal != -1) {
			; We've got a signal we can fire on this thread, modify this->UserTask so
			;  it'll jump into a signal handler with the current state on the user stack
			
			; Technically, we might also have a syscall going, which I think Linux has
			;  a thingy for (E_RESTART or whatever). I'm not smart enough to know why
			;   but I think we can skip that.
			
			this->SetupSignalState(Signal, SignalErrorNumber, SignalCode)
		}
		else if (this->HasPendingSystemCall) {
			EnableInterrupts()
			HandleSystemCall(this->UserTask~>Context)
			DisableInterrupts()
			
			this->HasPendingSystemCall := false
		}

		if (this->Killed) {
			SchedulerEnd()
		}
		
		MoveMemory(this->KernelTask~>Context, this~>AbortSystemCallState, #AMD64Context)
		
		CurrentThread := this
		
		Scheduler->RunNow(this->UserTask)
	}
	
	define void Exit(i32 Code) {
		this->Killed := true
		this->ExitCode := Code
		this~>OnKilled->Fire(this)
		
		;KernelHeap->Free(CurrentProcess)
		;Mappings->Delete()
	}
	
	define void DoDefaultSignalAction(i32 Number, i32 Error, i32 SignalCode) {
		this->Exit(Number)
	}
	
	define void SetupSignalState(i32 Number, i32 Error, i32 SignalCode) {
		i64 Mask := SignalMask(Number)
		i64 OldMask := this->SignalMask
		
		LinuxSignalAction* Action := this->ParentSignals->Actions[Number]
		
		if (Action->Handler = LINUX_SIGNAL_HANDLER_DEFAULT) {
			this->DoDefaultSignalAction(Number, Error, SignalCode)
			
			return
		}
		else if (Action->Handler = LINUX_SIGNAL_HANDLER_IGNORE) {
			return
		}
		
		this->SignalMask |= Mask
		this->SignalMask |= Action->Mask
		
		AMD64Context* Context := this->UserTask~>Context
		
		void* OriginalRSP := Context->RSP
		
		LinuxSignalInfo* Info := Context->StackAllocate(#LinuxSignalInfo)
		
		Info->SignalNumber := Number
		Info->Error := Error
		Info->SignalCode := SignalCode
		
		LinuxSignalUserContext* UserContext := Context->StackAllocate(#LinuxSignalUserContext)
		
		LinuxSignalRegisters* Registers := UserContext~>Registers
		LinuxSignalStack* Stack := UserContext~>Stack
		
		Registers->PopulateFromContext(Context)
		Registers->RSP := OriginalRSP
		
		UserContext->Mask := OldMask
		
		if (Action->Flags & LINUX_SIGNAL_ATTRIBUTE_RESTORER) {
			Context->Push(Action->Restorer As i64)
		}
		
		this->CurrentSignal := Number
		this->CurrentSignalAction := Action
		this->CurrentSignalInfo := Info
		this->CurrentSignalContext := UserContext
		
		Context->RDI := Number
		Context->RSI := Info As i64
		Context->RDX := UserContext As i64
		Context->RIP := Action->Handler
	}
	
	define void SignalReturn() {
		this->CurrentSignalContext~>Registers->PopulateContext(this->UserTask~>Context)
		this->SignalMask := this->CurrentSignalContext->Mask
		this->CurrentSignal := 0
	}
	
	define void Start(i32 ParentProcessID, MemoryMapper* Mapper, ProcessSignalContainer* ParentSignals, void* Stack, void* Code) {
		this->ParentProcessID := ParentProcessID
		this->ParentSignals   := ParentSignals

		this->Mapper := Mapper
		
		this->UserTask~>Context->RSP := Stack
		this->UserTask~>Context->RIP := Code
		this->UserTask~>Context->CR3 := Mapper->AddressSpace->Root As i64
		this->UserTask->NeedsUserMode := true
		
		this->KernelTask~>Context->RIP := &UserThread.DoKernelThread
		this->KernelTask~>Context->RDI := this As i64
		this->KernelTask~>Context->Flags := 0
		
		Scheduler->Enqueue(this->KernelTask)
	}
	
	define void FireSystemCall() {
		this->HasPendingSystemCall := true
		
		Scheduler->RunNow(this->KernelTask)
	}
	
	define void Free() {
		Scheduler->Remove(this->KernelTask)
		this~>OnKilled->Free()
		this->KernelTask->Free()
		this->UserTask->Free()
	}
}

i32 STANDARD_INPUT_FILE_DESCRIPTOR := 0
i32 STANDARD_OUTPUT_FILE_DESCRIPTOR := 1
i32 STANDARD_ERROR_FILE_DESCRIPTOR := 2

struct Process {
	IFileHandle*[10] FileDescriptorsToHandles
	i32 FileDescriptorCount

	PageTrie* AddressSpace
	
	IFileHandle* WorkingDirectory
	
	ELFHeader* ELF
	
	void* BreakStart
	i64 BreakSize
	
	UserThread MainThread

	PointerArray* Threads ; <UserThread*>
	
	i32 TotalThreads
	i32 AliveThreads
	
	Event OnKilled
	
	i32 ExitCode
	
	define EventState OnThreadKilled(UserThread* Thread, Event* Fired) {
		this->Threads->RemoveValue(Thread)

		this->AliveThreads -= 1
		
		if (this->AliveThreads = 0) {
			this->ExitCode := Thread->ExitCode
			this~>OnKilled->Fire(this)
		}
		
		return EventState:CallNextListener
	}
	
	define void Initialize(ELFHeader* Header, IFileHandle* WorkingDirectory) {
		this->ELF := Header
		this->WorkingDirectory := WorkingDirectory
		
		i64 MaxAddress := 0
	
		ELFProgramHeader* ProgramHeaders := Header->GetProgramHeaders()

		for (i32 Index := 0, Index < Header->ProgramHeaderEntryCount, Index++) {
			ELFProgramHeader* NextProgramHeader := ProgramHeaders[Index]
			
			if (NextProgramHeader->Type = ELF_SEGMENT_TYPE_LOAD) {
				i64 NextEnd := NextProgramHeader->VirtualAddress + NextProgramHeader->MemorySize
				
				if (NextEnd > MaxAddress) {
					MaxAddress := NextEnd
				}
			}
		}
		
		this->BreakStart := ((MaxAddress + PAGE_SIZE) & 0x7FFF_FFFF_FFFF_F000) As void*
		this->BreakSize := 0
		
		this~>MainThread->UserTask   := Task:New(0)
		this~>MainThread->KernelTask := Task:NewWithStack(0, 1)
		
		this->TotalThreads := 1
		this->AliveThreads := 1
		
		this~>MainThread~>OnKilled->ListenMethod(&Process.OnThreadKilled, this)

		this->Threads := PointerArray:New()
		
		this->Threads->Push(this~>MainThread)
	}

	define i32 AllocateFileDescriptor(IFileHandle* Handle) {
		i32 Result := this->FileDescriptorCount++

		this->FileDescriptorsToHandles[Result] := Handle

		return Result
	}
	
	define void ExitAll(i32 Code) {
		this~>MainThread->Exit(Code)
	}
	
	ProcessSignalContainer Signals
	
	define void QueueSignal(i32 Number, i32 Error, i32 Code) {
		this~>Signals->Queue(Number, Error, Code)
		
		if (this~>MainThread->HasPendingSystemCall) {
			this~>MainThread->AbortSystemCall()
		}
	}
	
	define void Free() {
		this~>MainThread->Free()
		this~>OnKilled->Free()
	}

	define i8 CanAccessMemory(i64 Address, i32 PageCount, i8 ForWrite) {
		; Do page protection checks for `Address+PageCount` inside of this process

		i64 End := Address + (PageCount * PAGE_SIZE)
		i64 Tail := Address

		i64 Handle := this->AddressSpace->StartWalkPages(Address)

		PageMapping Mapping

		while (this->AddressSpace->WalkPagesNext(&Handle, &Mapping)) {
			if (Mapping.Virtual != Tail || Tail >= End) {
				break
			}

			if !(Mapping.Flags & PAGE_PRESENT) {
				return false
			}

			if !(Mapping.Flags & PAGE_USER) {
				return false
			}

			if (ForWrite) {
				if !(Mapping.Flags & PAGE_WRITE) {
					return false
				}
			}

			Tail += PAGE_SIZE
		}

		if (Tail != End) {
			return false
		}

		return true
	}

	i64 CurrentMappingVirtual
	i64 CurrentMappingPageCount
	i8 CurrentMappingWritable

	define i8 Map(i64 Address, i32 PageCount, i8 ForWrite) {
		if !(this->CanAccessMemory(Address, PageCount, ForWrite)) {
			return false
		}

		this->CurrentMappingVirtual := Address
		this->CurrentMappingPageCount := PageCount

		i64 Flags := PAGE_PRESENT

		if (ForWrite) {
			Flags |= PAGE_WRITE
		}

		i64 Size := PageCount * PAGE_SIZE
		i64 End := Address + Size

		i64 Handle := this->AddressSpace->StartWalkMappings(Address)
		VirtualMapping Mapping

		i64 Offset := 0

		while (this->AddressSpace->WalkMappingsNext(&Handle, &Mapping)) {
			i64 MappingEnd := (Mapping.Virtual + Mapping.Size) As i64

			if (MappingEnd >= End) {
				i64 OvershootSize := MappingEnd - End

				Mapping.Size -= OvershootSize As i32
			}

			KernelAddressSpace->MapRange(USER_NO_MANS_LAND + Offset, Mapping.Physical / PAGE_SIZE, Mapping.Size / PAGE_SIZE, Flags)

			Offset += Mapping.Size

			if (Offset = Size) {
				break
			}
		}

		return true
	}

	define i8 MapIfNeeded(i64 Address, i32 PageCount, i8 ForWrite) {
		if (ForWrite && this->CurrentMappingWritable != true) {
			; Remap if we need a writable mapping but only have readable

			return this->Map(Address, PageCount, ForWrite)
		}

		if (Address < this->CurrentMappingVirtual) {
			; Remap if we need a mapping *below* our current one

			return this->Map(Address, PageCount, ForWrite)
		}

		i64 CurrentMappingEnd := this->CurrentMappingVirtual + (this->CurrentMappingPageCount * PAGE_SIZE)
		i64 DesiredMappingEnd := Address + (PageCount * PAGE_SIZE)

		if (DesiredMappingEnd >= CurrentMappingEnd) {
			; Remap if we need a mapping *above* (or outside) of our current one

			return this->Map(Address, PageCount, ForWrite)
		}

		return true
	}

	define void* ConvertMappedAddress(i64 Address) {
		i64 Offset := Address - this->CurrentMappingVirtual

		return USER_NO_MANS_LAND + Offset
	}

	define void* MapPagesForReadWrite(i64 Address, i32 PageCount, i8 ForWrite) {
		if (this->MapIfNeeded(Address, PageCount, ForWrite)) {
			return this->ConvertMappedAddress(Address)
		}

		return null
	}

	define void* MapAddressForReadWrite(i64 Address, i32 Size, i8 ForWrite) {
		i64 FirstPage := Address & 0b_111111111_111111111_111111111_111111111_000000000000
		i64 End := Address + Size
		i64 Difference := End - FirstPage

		return this->MapPagesForReadWrite(FirstPage, SizeToPageCount(Difference As i32), ForWrite)
	}

	define void* MapAddressForRead(i64 Address, i32 Size) {
		if (this->MapAddressForReadWrite(Address, Size, false)) {
			return this->ConvertMappedAddress(Address)
		}

		return null
	}
	define void* MapAddressForWrite(i64 Address, i32 Size) {
		if (this->MapAddressForReadWrite(Address, Size, true)) {
			return this->ConvertMappedAddress(Address)	
		}

		return null
	}

	define void Write8(i64 Address, i8 Value) {
		i8* pAddress := this->MapAddressForWrite(Address, 1)
		
		pAddress[0] := Value
	}
	define void Write16(i64 Address, i16 Value) {
		i16* pAddress := this->MapAddressForWrite(Address, 2)
		
		pAddress[0] := Value
	}
	define void Write32(i64 Address, i32 Value) {
		i32* pAddress := this->MapAddressForWrite(Address, 4)
		
		pAddress[0] := Value
	}
	define void Write64(i64 Address, i64 Value) {
		i64* pAddress := this->MapAddressForWrite(Address, 8)
		
		pAddress[0] := Value
	}
	define void Write(i64 Address, void* From, i32 Size) {
		void* pAddress := this->MapAddressForWrite(Address, Size)

		MoveMemory(pAddress, From, Size)
	}

	define i8 Read8(i64 Address) {
		i8* pAddress := this->MapAddressForRead(Address, 1)

		return *pAddress
	}
	define i16 Read16(i64 Address) {
		i16* pAddress := this->MapAddressForRead(Address, 2)

		return *pAddress
	}
	define i32 Read32(i64 Address) {
		i32* pAddress := this->MapAddressForRead(Address, 4)

		return *pAddress
	}
	define i64 Read64(i64 Address) {
		i64* pAddress := this->MapAddressForRead(Address, 8)

		return *pAddress
	}
	define void Read(void* To, i64 Address, i32 Size) {
		void* pAddress := this->MapAddressForRead(Address, Size)

		MoveMemory(To, pAddress, Size)
	}

	define i32 ReadStringLength(i64 Address, i32 MaxLength) {
		i64 Page := Address & 0b_111111111_111111111_111111111_111111111_000000000000
		i64 End := Address + MaxLength
		i64 Difference := End - Page

		i32 PageCount := SizeToPageCount(Difference As i32)

		i32 Length := 0
		i64 Offset := Address - Page

		for (i32 Index := 0, Index < PageCount, Index++) {
			i8* pAddress := this->MapAddressForRead(Page + (Index * PAGE_SIZE), PAGE_SIZE)

			while (Length < MaxLength && Offset < PAGE_SIZE) {
				i8 Value := pAddress[Offset++]

				if (Value = 0) {
					return Length
				}

				Length++
			}

			Offset := 0
		}

		return Length
	}

	define i32 ReadString(i64 Address, i8* Buffer, i32 MaxLength) {
		FastZeroMemory(Buffer, MaxLength)

		i32 Length := this->ReadStringLength(Address, MaxLength)

		if (Length = 0) {
			return 0
		}
		
		this->Read(Buffer, Address, Length)
		
		return Length
	}
}

Process* CurrentProcess := null