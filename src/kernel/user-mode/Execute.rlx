#Require "./src/kernel/core/ELFLoader.rlx"
#Require "./src/kernel/user-mode/Process.rlx"

define i64* SetupExecuteStack(void* Stack, i32 ArgumentCount, i8** Arguments, i32 EnvironmentCount, i8** Environment) {
	i32 StringsLength := 0
	
	for (i32 Index := 0, Index < ArgumentCount, Index++) {
		i8* NextArgument := Arguments[Index]
		i32 NextArgumentLength := StringLength(NextArgument)
		
		StringsLength += NextArgumentLength + 1
	}
	for (i32 Index := 0, Index < EnvironmentCount, Index++) {
		i8* NextEnvironment := Arguments[Index]
		i32 NextEnvironmentLength := StringLength(NextEnvironment)
		
		StringsLength += NextEnvironmentLength + 1
	}
	
	if (StringsLength % 16) {
		StringsLength += 16 - (StringsLength % 16)
	}
	
	i32 EnvironmentLength := (EnvironmentCount + 1) * 8
	i32 ArgumentLength := (ArgumentCount + 2) * 8
	
	i64* RSP := Stack - StringsLength - 8 - 16 - EnvironmentLength - ArgumentLength
	
	;Print("RSP (Unaligned) %x\n", RSP)
	
	if (RSP & 16) {
		RSP -= 8
	}
	
	;Print("RSP %x\n", RSP)
	
	i32 TopOffset := 0
	i32 BottomOffset := 0
	
	RSP[BottomOffset++] := ArgumentCount
	
	for (i32 Index := 0, Index < ArgumentCount, Index++) {
		i8* NextArgument := Arguments[Index]
		i32 NextArgumentLength := StringLength(NextArgument)
		
		TopOffset += NextArgumentLength + 1
		
		i8* NextArgumentBuffer := Stack - TopOffset
		
		MoveMemory(NextArgumentBuffer, NextArgument, NextArgumentLength)
		
		RSP[BottomOffset++] := NextArgumentBuffer As i64
	}
	
	RSP[BottomOffset++] := 0
	
	for (i32 Index := 0, Index < EnvironmentCount, Index++) {
		i8* NextEnvironment := Arguments[Index]
		i32 NextEnvironmentLength := StringLength(NextEnvironment)
		
		TopOffset += NextEnvironmentLength + 1
		
		i8* NextEnvironmentBuffer := Stack - TopOffset
		
		MoveMemory(NextEnvironmentBuffer, NextArgument, NextEnvironmentLength)
		
		RSP[BottomOffset++] := NextEnvironmentBuffer As i64
	}
	
	RSP[BottomOffset++] := 0
	RSP[BottomOffset++] := 0
	
	return RSP
}

i8** NULL_ARGUMENTS := null As i8**
i8** NULL_ENVIRONMENT := null As i8**

struct ExecuteParameters {
	IFileHandle* WorkingDirectory
	
	IFileHandle* StandardInput
	IFileHandle* StandardOutput
	IFileHandle* StandardError
	
	i32 ArgumentCount
	i8** Arguments
	
	i32 EnvironmentCount
	i8** Environment
}

define Process* Execute(void* Buffer, ExecuteParameters* Parameters) {
	ELFHeader* ELFData := Buffer As ELFHeader*
	
	;AddressSpaceManager* ProcessAddressSpace := AddressSpaceManager:New(PhysicalMemory)

	;ProcessAddressSpace->MapRange()

	;PageTrie* Trie := Trampoline~>PageTree

	;i32 Size := 0
	;i64 Whatever := Trie->Get(0x40_0000 As void*, PAGE_LEVEL_2M, &Size)

	;Print("0x40_0000 -> %x\n", Whatever)

	;void* UserPML4 := KernelPageAllocator->AllocateVirtual(1)
	;i64 UserPML4Physical := KernelPageAllocator->GetPhysicalAddress(UserPML4)

	;AddressSpaceManager* AddressSpace := KernelHeapAllocate('ASM_USER', #AddressSpaceManager)

	PhysicalPageAllocator* Physical := KernelHeapAllocate('PHEAPUSR', #PhysicalPageAllocator)
	Physical->Initialize()
	Physical->Manager := PhysicalMemory

	void* UserPML4 := PhysicalMemory->Allocate(1) As void*
	FastZeroMemory(UserPML4, PAGE_SIZE)

	PageTrie* AddressSpace := KernelHeapAllocate('PATR_USR', #PageTrie)
	AddressSpace->Initialize(UserPML4, Physical)

	MapDualModePages(AddressSpace)

	MemoryMapper* Mapper := MemoryMapper:New(AddressSpace, PhysicalMemory, null)
	Mapper->Active := true
	
	;i32 UserPageMetaCount := NUMBER_OF_USER_PAGES / 0x1000

	; Juggling to map the user virtual allocator
	;PhysicalAllocation* VirtualAllocatorPhysical := Mapper->AllocatePhysical(UserPageMetaCount)
	;Mapper->Map(ADDRESS_OF_USER_PAGES, VirtualAllocatorPhysical, UserPageMetaCount, PAGE_WRITE | PAGE_PRESENT)
	;Mapper->EnableVirtualMappings()
	
	;FastZeroMemory(ADDRESS_OF_USER_PAGES, NUMBER_OF_USER_PAGES)
	;Mapper->VirtualAllocator := PageHeap:Adopt(ADDRESS_OF_USER_PAGES, NUMBER_OF_USER_PAGES)
	
	MapELF(Mapper, ELFData)
	
	; User-only addresses
	void* UserStackBottom := ADDRESS_OF_USER_STACK
	void* UserStackTop := UserStackBottom + (20 * PAGE_SIZE)
	
	; User-only mapping
	VirtualToPhysicalMapping* StackMapping := Mapper->MapAddressAnonymous(UserStackBottom, 20, PAGE_USER | PAGE_WRITE)
	i64 StackPhysical := StackMapping->Physical->Address

	KernelAddressSpace->MapRange(UserStackBottom, StackPhysical / PAGE_SIZE, 20, PAGE_PRESENT | PAGE_WRITE)
	
	SetMemory(UserStackBottom, 20 * PAGE_SIZE, 0)
	
	i64* UserRSP := SetupExecuteStack(UserStackTop, Parameters->ArgumentCount, Parameters->Arguments, Parameters->EnvironmentCount, Parameters->Environment)
	
	Process* LastProcess := CurrentProcess
	
	CurrentProcess := KernelHeapAllocate('PROC', #Process)
	CurrentProcess->Initialize(ELFData, Parameters->WorkingDirectory)

	CurrentProcess->AddressSpace := AddressSpace
	
	CurrentProcess->AllocateFileDescriptor(Parameters->StandardInput)
	CurrentProcess->AllocateFileDescriptor(Parameters->StandardOutput)
	CurrentProcess->AllocateFileDescriptor(Parameters->StandardError)

	i64 State := AddressSpace->StartWalkMappings()
	VirtualMapping Mapping

	while (AddressSpace->WalkMappingsNext(&State, &Mapping)) {
		i32 Pages := Mapping.Size / PAGE_SIZE

		Info("%x..%x -> %x..%x (%x pages)\n", Mapping.Virtual, Mapping.Virtual + Mapping.Size, Mapping.Physical, Mapping.Physical + Mapping.Size, Pages)
	}
	
	;Panic("nuts 900\n")

	;i32 Size := 0
	;i64 Whatever := Trie->Get(0x40_0000 As void*, PAGE_LEVEL_2M, &Size)

	;Print("0x40_0000 -> %x\n", Whatever)
	
	UserThread* Thread := CurrentProcess~>MainThread
	Thread->Start(2, Mapper, CurrentProcess~>Signals, UserRSP, ELFData->EntryPoint As void*)
	
	return CurrentProcess
}