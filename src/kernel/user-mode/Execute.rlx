#Require "./src/kernel/core/ELFLoader.rlx"
#Require "./src/kernel/user-mode/Process.rlx"

define i64* SetupExecuteStack(void* Stack, i32 ArgumentCount, i8** Arguments, i32 EnvironmentCount, i8** Environment) {
	i32 StringsLength := 0
	
	for (i32 Index := 0, Index < ArgumentCount, Index++) {
		i8* NextArgument := Arguments[Index]
		i32 NextArgumentLength := StringLength(NextArgument)
		
		StringsLength += NextArgumentLength + 1
	}
	for (i32 Index := 0, Index < EnvironmentCount, Index++) {
		i8* NextEnvironment := Arguments[Index]
		i32 NextEnvironmentLength := StringLength(NextEnvironment)
		
		StringsLength += NextEnvironmentLength + 1
	}
	
	if (StringsLength % 16) {
		StringsLength += 16 - (StringsLength % 16)
	}
	
	i32 EnvironmentLength := (EnvironmentCount + 1) * 8
	i32 ArgumentLength := (ArgumentCount + 2) * 8
	
	i64* RSP := Stack - StringsLength - 8 - 16 - EnvironmentLength - ArgumentLength
	
	;Print("RSP (Unaligned) %x\n", RSP)
	
	if (RSP & 16) {
		RSP -= 8
	}
	
	;Print("RSP %x\n", RSP)
	
	i32 TopOffset := 0
	i32 BottomOffset := 0
	
	RSP[BottomOffset++] := ArgumentCount
	
	for (i32 Index := 0, Index < ArgumentCount, Index++) {
		i8* NextArgument := Arguments[Index]
		i32 NextArgumentLength := StringLength(NextArgument)
		
		TopOffset += NextArgumentLength + 1
		
		i8* NextArgumentBuffer := Stack - TopOffset
		
		MoveMemory(NextArgumentBuffer, NextArgument, NextArgumentLength)
		
		RSP[BottomOffset++] := NextArgumentBuffer As i64
	}
	
	RSP[BottomOffset++] := 0
	
	for (i32 Index := 0, Index < EnvironmentCount, Index++) {
		i8* NextEnvironment := Arguments[Index]
		i32 NextEnvironmentLength := StringLength(NextEnvironment)
		
		TopOffset += NextEnvironmentLength + 1
		
		i8* NextEnvironmentBuffer := Stack - TopOffset
		
		MoveMemory(NextEnvironmentBuffer, NextArgument, NextEnvironmentLength)
		
		RSP[BottomOffset++] := NextEnvironmentBuffer As i64
	}
	
	RSP[BottomOffset++] := 0
	RSP[BottomOffset++] := 0
	
	return RSP
}

i8** NULL_ARGUMENTS := null As i8**
i8** NULL_ENVIRONMENT := null As i8**

struct ExecuteParameters {
	FileHandle* WorkingDirectory
	
	FileHandle* StandardInput
	FileHandle* StandardOutput
	FileHandle* StandardError
	
	i32 ArgumentCount
	i8** Arguments
	
	i32 EnvironmentCount
	i8** Environment
}

define Process* Execute(void* Buffer, ExecuteParameters* Parameters) {
	ELFHeader* ELFData := Buffer As ELFHeader*
	
	MemoryMapper* Mapper := MemoryMapper:New(KernelAddressSpace, PhysicalMemory, null)
	
	; Juggling to map the user virtual allocator
	PhysicalAllocation* VirtualAllocatorPhysical := Mapper->AllocatePhysical(1)
	Mapper->Map(ADDRESS_OF_USER_PAGES, VirtualAllocatorPhysical, 1, PAGE_WRITE | PAGE_PRESENT)
	Mapper->EnableVirtualMappings()
	
	Mapper->VirtualAllocator := PageHeap:Adopt(ADDRESS_OF_USER_PAGES As i64, NUMBER_OF_USER_PAGES)
	
	MapELF(Mapper, ELFData)
	
	void* StackBottom := ADDRESS_OF_USER_STACK
	
	Mapper->MapAddressAnonymous(StackBottom, 20, PAGE_USER | PAGE_WRITE)
	
	SetMemory(StackBottom, 20 * PAGE_SIZE, 0)
	
	void* StackTop := StackBottom + (20 * PAGE_SIZE)
	
	Info("Stack Top %x\nStack Bottom %x\n", StackTop, StackBottom)
	
	i64* RSP := SetupExecuteStack(StackTop, Parameters->ArgumentCount, Parameters->Arguments, Parameters->EnvironmentCount, Parameters->Environment)
	
	Process* LastProcess := CurrentProcess
	
	CurrentProcess := KernelHeapAllocate('PROC', #Process)
	CurrentProcess->Initialize(ELFData, Parameters->WorkingDirectory)
	
	CurrentProcess->DefineFileDescriptor(STANDARD_INPUT_FILE_DESCRIPTOR, Parameters->StandardInput)
	CurrentProcess->DefineFileDescriptor(STANDARD_OUTPUT_FILE_DESCRIPTOR, Parameters->StandardOutput)
	CurrentProcess->DefineFileDescriptor(STANDARD_ERROR_FILE_DESCRIPTOR, Parameters->StandardError)
	
	UserThread* Thread := CurrentProcess~>MainThread
	Thread->Start(2, Mapper, CurrentProcess~>Signals, RSP, ELFData->EntryPoint As void*)
	
	return CurrentProcess
}