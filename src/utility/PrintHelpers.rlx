
#Require "./src/utility/x64.rlx"

define void DoStackDumpPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i32 IgnoreFrames := 2
	
	StackFrame* Last := GetRBP() As StackFrame*
	i32 Index := 1
	
	while (Last) {
		if (Last->LastFrame & 1) {
			StackFrame* Temp := Last->LastFrame - 1
			
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				this->Print("	Stack[%i] Try catch address = %x\n", Index, Last->ReturnAddress, Temp)
				Index += 1
			}
			
			Last := Temp
		}
		else {
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				i64* MaybeMagic := (Last - 0x8) As i64*
				i8** MaybeName := (Last - 0x10) As i8**
				
				if (Debug && *MaybeMagic = 0x12345678) {
					this->Print("	Stack[%i] Fn = %s\n", Index, *MaybeName)
				}
				else {
					this->Print("	Stack[%i] Fn callsite = %x\n", Index, Last->ReturnAddress, Last->LastFrame)
				}
				
				Index += 1
			}
			
			Last := Last->LastFrame
		}
	}
}

PrintFormatPrototype StackDumpFormatPrototype {
	Name: "stackdump",
	Format: &DoStackDumpPrint
}

i32 STACK_DUMP_FORMAT_PROTOTYPE_ID := AddPrintFormat(&StackDumpFormatPrototype)


define void DoSpecificStackDumpPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i32 IgnoreFrames := 2
	
	void* RSP := Parameters[*ParameterIndex] As void*
	StackFrame* Last := RSP

	i32 Index := 1
	
	while (Last) {
		if (Last->LastFrame & 1) {
			StackFrame* Temp := Last->LastFrame - 1
			
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				this->Print("	Stack[%i] Try catch address = %x\n", Index, Last->ReturnAddress, Temp)
				Index += 1
			}
			
			Last := Temp
		}
		else {
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				i64* MaybeMagic := (Last - 0x8) As i64*
				i8** MaybeName := (Last - 0x10) As i8**
				
				if (Debug && *MaybeMagic = 0x12345678) {
					this->Print("	Stack[%i] Fn = %s\n", Index, *MaybeName)
				}
				else {
					this->Print("	Stack[%i] Fn callsite = %x\n", Index, Last->ReturnAddress, Last->LastFrame)
				}
				
				Index += 1
			}
			
			Last := Last->LastFrame
		}
	}

	*ParameterIndex += 1
}

PrintFormatPrototype SpecificStackDumpFormatPrototype {
	Name: "stackdump-for",
	Format: &DoSpecificStackDumpPrint
}

i32 SPECIFIC_STACK_DUMP_FORMAT_PROTOTYPE_ID := AddPrintFormat(&SpecificStackDumpFormatPrototype)

define void PrintPadLeft(PrintOutputAdapterPrototype* this, i32 Length, i8* Format, ... Args) {
	i32 ActualLength := RawFormatLength(Format, Args)

	while (ActualLength < Length) {
		this->PrintCharacter(' ')
		ActualLength++
	}

	this->RawPrint(Format, Args)
}

define void DoContextDump(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	AMD64Context* Context := Parameters[*ParameterIndex] As void*

	Print("RIP: ")
	PrintPadLeft(this, 16, "%X", Context->RIP)
	Print(" | FLG: ")
	PrintPadLeft(this, 16, "%X", Context->Flags)
	Print(" | CS : ")
	PrintPadLeft(this, 16, "%X", Context->CS)
	Print(" | SS : ")
	PrintPadLeft(this, 16, "%X", Context->SS)
	Print("\n")

	Print("RAX: ")
	PrintPadLeft(this, 16, "%X", Context->RAX)
	Print(" | RBX: ")
	PrintPadLeft(this, 16, "%X", Context->RBX)
	Print(" | RCX: ")
	PrintPadLeft(this, 16, "%X", Context->RCX)
	Print(" | RDX: ")
	PrintPadLeft(this, 16, "%X", Context->RDX)
	Print("\n")

	Print("RSI: ")
	PrintPadLeft(this, 16, "%X", Context->RSI)
	Print(" | RDI: ")
	PrintPadLeft(this, 16, "%X", Context->RDI)
	Print(" | RBP: ")
	PrintPadLeft(this, 16, "%X", Context->RBP)
	Print(" | RSP: ")
	PrintPadLeft(this, 16, "%X", Context->RSP)
	Print("\n")

	Print("R8 : ")
	PrintPadLeft(this, 16, "%X", Context->R8)
	Print(" | R9 : ")
	PrintPadLeft(this, 16, "%X", Context->R9)
	Print(" | R10: ")
	PrintPadLeft(this, 16, "%X", Context->R10)
	Print(" | R11: ")
	PrintPadLeft(this, 16, "%X", Context->R11)
	Print("\n")

	Print("R12: ")
	PrintPadLeft(this, 16, "%X", Context->R12)
	Print(" | R13: ")
	PrintPadLeft(this, 16, "%X", Context->R13)
	Print(" | R14: ")
	PrintPadLeft(this, 16, "%X", Context->R14)
	Print(" | R15: ")
	PrintPadLeft(this, 16, "%X", Context->R15)
	Print("\n")

	*ParameterIndex += 1
}

PrintFormatPrototype ContextDumpFormatPrototype {
	Name: "context",
	Format: &DoContextDump
}

i32 CONTEXT_DUMP_FORMAT_PROTOTYPE_ID := AddPrintFormat(&ContextDumpFormatPrototype)

define void DoEasyIntegerFormat(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i64 Value := Parameters[*ParameterIndex] As i64
	
	i8[100] Buffer

	i8 Sign := 0

	if (Value < 0) {
		Sign := true
		Value := -Value
	}

	for (i32 Index := 0, Value != 0, Index += 1) {
		Buffer[Index] := NumberToCharacter((Value % 10) As i8)
		Value := Value / 10

		if (Value != 0 && Index % 4 = 2) {
			Buffer[++Index] := '_'
		}
	}

	if (Index = 0) {
		Buffer[0] := '0'
		Index := 1
	}

	if (Sign) {
		Buffer[++Index] := '-'
	}

	MemoryReverse(Buffer, Index)
	Buffer[Index] := 0

	this->Print("%s", Buffer)

	*ParameterIndex += 1
}

PrintFormatPrototype EasyIntegerFormatPrototype {
	Name: "ei",
	Format: &DoEasyIntegerFormat
}

i32 EASY_INTEGER_FORMAT_PROTOTYPE_ID := AddPrintFormat(&EasyIntegerFormatPrototype)
