#Require "@/System.rlx"
#Require "@/Console.rlx"
#Require "@/Debug.rlx"

define void Info(i8* Format, ... Parameters) {
	
}

declare i64 EFIMain(EFI_HANDLE*, EFI_SYSTEM_TABLE*)

define void OnEFIException(i32 ExceptionType, EFI_SYSTEM_CONTEXT_X64* Context) x64 {
	Print("Unhandled EFI exception %x\n", ExceptionType)
	PrintStackDump(Context->RBP As void*)
}

define i64 Main(EFI_HANDLE* ImageHandle, EFI_SYSTEM_TABLE* SystemTable) x64 {
	IMAGE_HANDLE := ImageHandle
	SYSTEM_TABLE := SystemTable
	
	i32 SizeNeeded := 0
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_DEBUG_SUPPORT_PROTOCOL_GUID, null, &SizeNeeded, null)
	EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_DEBUG_SUPPORT_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	i32 Count := SizeNeeded / 8
	
	for (i32 DebugSupportIndex := 0, DebugSupportIndex < Count, DebugSupportIndex++) {
		EFI_HANDLE* Next := Handles[DebugSupportIndex]
		
		EFI_DEBUG_SUPPORT_PROTOCOL* DebugSupport := null
		
		SystemTable->BootServices->HandleProtocol(Next, EFI_DEBUG_SUPPORT_PROTOCOL_GUID, &DebugSupport As void**)
		
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_INVALID_OPCODE, null)
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_INVALID_OPCODE, &OnEFIException)
		
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_PROTECTION_FAULT, null)
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_PROTECTION_FAULT, &OnEFIException)
		
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_PAGE_FAULT, null)
		DebugSupport->RegisterExceptionCallback(EFI_EXCEPTION_X64_PAGE_FAULT, &OnEFIException)
	}
	
	return EFIMain(ImageHandle, SystemTable)
}