define void DoGUIDPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i8* GUID := Parameters[*ParameterIndex] As i8*
	
	this->Print("{")
	
	for (i32 Index := 3, Index >= 0, Index--) {
		this->PrintByte(GUID[Index])
	}
	
	this->Print("-")
	
	for (i32 Index := 5, Index >= 4, Index--) {
		this->PrintByte(GUID[Index])
	}
	
	this->Print("-")
	
	for (i32 Index := 7, Index >= 6, Index--) {
		this->PrintByte(GUID[Index])
	}
	
	this->Print("-")
	
	for (i32 Index := 8, Index < 10, Index++) {
		this->PrintByte(GUID[Index])
	}
	
	this->Print("-")
	
	for (i32 Index := 10, Index < 16, Index++) {
		this->PrintByte(GUID[Index])
	}
	
	this->Print("}")
	
	*ParameterIndex += 1
}

PrintFormatPrototype GUIDFormatPrototype {
	Name: "guid",
	Format: &DoGUIDPrint
}

i32 GUID_FORMAT_PROTOTYPE_ID := AddPrintFormat(&GUIDFormatPrototype)

struct GUIDReader {
    i8* Buffer
    i32 Length

    i32 Index

    define i8 PeekNextCharacter() {
        return this->Buffer[this->Index]
    }
    define i8 GetNextCharacter() {
        return this->Buffer[this->Index++]
    }

    define i8 NextCharacterMatches(i8 Check) {
        if (this->PeekNextCharacter() = Check) {
            this->GetNextCharacter()

            return true
        }

        return false
    }

    define i8 ReadNibble(i8* Out) {
        i8 Peek := this->GetNextCharacter()

        if ('0' <= Peek && Peek <= '9') {
            *Out := (Peek - '0') As i8
        }
        else if ('A' <= Peek && Peek <= 'F') {
            *Out := (10 + (Peek - 'A')) As i8
        }
        else if ('a' <= Peek && Peek <= 'a') {
            *Out := (10 + (Peek - 'a')) As i8
        }
        else {
            return false
        }

        return true
    }

    define i8 ReadByte(i8* pResult) {
        i8 High := 0

        if !(this->ReadNibble(&High)) {
            return false
        }

        i8 Low := 0

        if !(this->ReadNibble(&Low)) {
            return false
        }

        *pResult := ((High << 4) | Low) As i8

        return true
    }

    define i8 ReadGUID(void* RawOut) {
        i8* Out := RawOut

        i8 Wrapped := false

        if (this->NextCharacterMatches('{')) {
            Wrapped := true
        }

        for (i32 Index := 3, Index >= 0, Index--) {
            if !(this->ReadByte(&Out[Index])) {
                return false
            }
        }

        if !(this->NextCharacterMatches('-')) {
            return false
        }

        for (i32 Index := 5, Index >= 4, Index--) {
            if !(this->ReadByte(&Out[Index])) {
                return false
            }
        }

        if !(this->NextCharacterMatches('-')) {
            return false
        }

        for (i32 Index := 7, Index >= 6, Index--) {
            if !(this->ReadByte(&Out[Index])) {
                return false
            }
        }

        if !(this->NextCharacterMatches('-')) {
            return false
        }

        for (i32 Index := 8, Index < 10, Index++) {
            if !(this->ReadByte(&Out[Index])) {
                return false
            }
        }

        if !(this->NextCharacterMatches('-')) {
            return false
        }

        for (i32 Index := 10, Index < 16, Index++) {
            if !(this->ReadByte(&Out[Index])) {
                return false
            }
        }

        if (Wrapped) {
            if !(this->NextCharacterMatches('}')) {
                return false
            }
        }

        return true
    }

    define i8 AssertAtEnd(i8 LastSuccess) {
        if !(LastSuccess) {
            return false
        }

        return this->Index = this->Length
    }
}

define i8 ParseGUID(i8* Input, i32 InputLength, void* Output) {
    GUIDReader Reader {
        Buffer: Input,
        Length: InputLength,
        Index : 0
    }

    return Reader.AssertAtEnd(Reader.ReadGUID(Output))
}

define i8 ParseGUID(i8* Input, void* Output) {
    return ParseGUID(Input, StringLength(Input), Output)
}