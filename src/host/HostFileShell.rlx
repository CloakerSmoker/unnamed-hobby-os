#Require "$/Console.rlx"
#Require "$/AVLTree.rlx"
#Require "$/Debug.rlx"

struct NetworkAddress {
    i8 _
}

struct MemoryM apper {
    i8 _
}

The bug is that initializers don't properly do dynamic casts.
You need to go figure out the annoying ASTVisitor changes needed in the compiler

define void SchedulerYield() {}

define void Info(i8* Format, ... Args) {
    RawPrint(Format, Args)
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/FileBlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

#Require "./src/kernel/file-system/VFS/VFS.rlx"
#Require "./src/kernel/file-system/VFS/VFSDirectory.rlx"
#Require "./src/kernel/file-system/VFS/VFSOverlayDirectory.rlx"

#Require "./src/kernel/file-system/VFS/Ext2.rlx"
#Require "./src/kernel/file-system/VFS/FAT32.rlx"
#Require "./src/kernel/file-system/VFS/Host.rlx"

#Require "./src/kernel/file-system/VFS/Root.rlx"

define aIDirectory* OpenHostDirectory(i8* Path, i8 ReadOnly) {
    i64 Handle := FileOpen(Path, FILE_READ)

    return VFSHostDirectory:New(Handle, ReadOnly)
}

define aIFile* OpenHostFile(i8* Path, i8 ReadOnly) {
    i64 Handle := FileOpen(Path, FILE_READ)

    return VFSHostFile:New(Handle, ReadOnly)
}

aIDirectory* CurrentDirectory := null
aIDirectory* DevicesDirectory := null

#Require "$/AVLTree.rlx"

define i64 ParseBlockCount(i8* ValueString, i8* Scale) {
	i64 Value := AToI(ValueString)
	
	if (ValueString[0] = '0' && ValueString[1] = 'x') {
		Value := AToI(&ValueString[2], 16)
	}
	
	if (Scale != null) {
		if (Scale[0] = 'm') {
			Value *= 0x800	
		}
		else if (Scale[0] = 'b') {
			; Dummy
		}
		else {
			Print("Unknown scale '%s', defaulting to 1\n", Scale)
		}
	}
	
	return Value
}

#Require "./src/kernel/file-system/VFS/shell/Utilities.rlx"

#Require "./src/kernel/file-system/VFS/shell/Common.rlx"
#Require "./src/kernel/file-system/VFS/shell/Loop.rlx"
#Require "./src/kernel/file-system/VFS/shell/Mount.rlx"
#Require "./src/kernel/file-system/VFS/shell/GPT.rlx"
#Require "./src/kernel/file-system/VFS/shell/Format.rlx"
#Require "./src/kernel/file-system/VFS/shell/Random.rlx"

#Require "./src/kernel/file-system/VFS/ZeroDevice.rlx"

define void Main(i64 _ArgC, i8** _ArgV) {
    i8* ScriptFile := null
    i8 ScriptedInput := false
    i8 SilentMode := false

    PointerArray* HostDeviceFilePaths := PointerArray:New()

    for (i32 Index := 1, Index < _ArgC, Index++) {
        i8* Arg := _ArgV[Index]

        if (StringEquals(Arg, "--script")) {
            ScriptedInput := true
        }
        else if (StringEquals(Arg, "--silent")) {
            SilentMode := true
        }
        else if (StringEquals(Arg, "--script-file")) {
            ScriptedInput := true
            ScriptFile := _ArgV[++Index]

            STDIN := FileOpen(ScriptFile, FILE_READ)
        }
        else if (StringEquals(Arg, "--host-device")) {
            HostDeviceFilePaths->Push(_ArgV[++Index])
        }
    }

    if (SilentMode) {
        i64 RealSTDOUT := STDOUT
        STDOUT := -1
    }

    VFSDirectory* _Root := VFSDirectory:New()
    aIDirectory* Root := _Root
    MountRoot(Root)

    DevicesDirectory := VFSDirectory:New()
    Mount(Root, "/dev", DevicesDirectory)

    VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::File,
        Name: "zero",
        File: ZeroDeviceFile:New()
    }

    DevicesDirectory->Insert(&Entry)

    i32 Count := HostDeviceFilePaths->Count()

    for (i32 Index := 0, Index < Count, Index++) {
        i8* HostDeviceName := HostDeviceFilePaths->At(Index)

        i8* HostDeviceFilePath := FormatString("/dev/%s", HostDeviceName)
        aIFile* HostDeviceFile := OpenHostFile(HostDeviceFilePath, true)

        VFSDirectoryEntry HostDeviceEntry {
            Type: VFSDirectoryEntryType::File,
            Name: HostDeviceName,
            File: HostDeviceFile
        }

        DevicesDirectory->Insert(&HostDeviceEntry)
    }

    aIDirectory* HostDirectory := OpenHostDirectory(".", false)

    Mount(Root, "/host", HostDirectory)

    CurrentDirectory := VFSRootDirectory

    loop {
        if !(ScriptedInput) {
            Print(">")
        }

        i8* Line := ReadLine()

        while (StringLength(Line) = 0) {
            Line := ReadLine()
        }

        if (ScriptedInput) {
            Print(">%s\n", Line)
        }

        i64 ArgC := 0
        i8** ArgV := null
        
        ParseCommandLine(Line, &ArgC, &ArgV)
        i8* CommandName := ArgV[0]

        i8 Loud := false ; Only valid in silent mode

        if (CommandName[0] = '#') {
            continue
        }
        else if (CommandName[0] = '@') {
            CommandName += 1
            
            if (SilentMode) {
                STDOUT := RealSTDOUT
                Loud := true
            }
        }

        if (StringEquals(CommandName, "exit")) {
            break
        }
        else if (StringEquals(CommandName, "end-script")) {
            ScriptedInput := false
            continue
        }

        ShellCommand* Command := LookupCommand(CommandName)

        if (Command = null) {
            Print("'%s' command not found\n", CommandName)
        }
        else {
            Command->Callback(ArgC, ArgV)
        }

        if (Loud) {
            STDOUT := -1
        }
    }

    return 0
}