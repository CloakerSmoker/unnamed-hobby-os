#Require "$/Console.rlx"
#Require "$/AVLTree.rlx"
#Require "$/Debug.rlx"

define void SchedulerYield() {}

define void Info(i8* Format, ... Args) {
    RawPrint(Format, Args)
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/FileBlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

#Require "./src/kernel/file-system/VFS/VFS.rlx"
#Require "./src/kernel/file-system/VFS/VFSDirectory.rlx"
#Require "./src/kernel/file-system/VFS/VFSOverlayDirectory.rlx"

#Require "./src/kernel/file-system/VFS/Ext2.rlx"
#Require "./src/kernel/file-system/VFS/FAT32.rlx"
#Require "./src/kernel/file-system/VFS/Host.rlx"

#Require "./src/kernel/file-system/VFS/Root.rlx"

define IDirectory* OpenHostDirectory(i8* Path) {
    i64 Handle := FileOpen(Path, FILE_READ)

    return VFSHostDirectory:New(Handle)
}

IDirectory* CurrentDirectory := null
IDirectory* DevicesDirectory := null

#Require "$/AVLTree.rlx"

struct ShellCommand {
    i8* Name,
    void(i64, i8**) Callback
}

AVLTree* Commands := AVLTree:New(#ShellCommand)

define i32 RegisterCommand(i8* Name, void(i64, i8**) Callback) {
    ShellCommand Command {
        Name: Name,
        Callback: Callback
    }

    Commands->Insert(FNV1A(Name), &Command)

    return Commands->Count()
}

define ShellCommand* LookupCommand(i8* Name) {
    return Commands->Get(FNV1A(Name))
}

define i64 ParseBlockCount(i8* ValueString, i8* Scale) {
	i64 Value := AToI(ValueString)
	
	if (ValueString[0] = '0' && ValueString[1] = 'x') {
		Value := AToI(&ValueString[2], 16)
	}
	
	if (Scale != null) {
		if (Scale[0] = 'm') {
			Value *= 0x800	
		}
		else if (Scale[0] = 'b') {
			; Dummy
		}
		else {
			Print("Unknown scale '%s', defaulting to 1\n", Scale)
		}
	}
	
	return Value
}

#Require "./src/kernel/file-system/VFS/shell/Utilities.rlx"

#Require "./src/kernel/file-system/VFS/shell/Common.rlx"
#Require "./src/kernel/file-system/VFS/shell/Loop.rlx"
#Require "./src/kernel/file-system/VFS/shell/Mount.rlx"
#Require "./src/kernel/file-system/VFS/shell/GPT.rlx"

#Require "./src/kernel/file-system/VFS/ZeroDevice.rlx"

define void Main() {
    IDirectory* Root := VFSDirectory:New()
    MountRoot(Root)

    DevicesDirectory := VFSDirectory:New()
    Mount(Root, "/dev", DevicesDirectory)

    VFSDirectoryEntry Entry {
        Type: VFSDirectoryEntryType::File,
        Name: "zero",
        File: ZeroDeviceFile:New()
    }

    DevicesDirectory->Insert(&Entry)

    Mount(Root, "/host", OpenHostDirectory("."))

    CurrentDirectory := VFSRootDirectory

    loop {
        Print(">")
        i8* Line := ReadLine()

        i64 ArgC := 0
        i8** ArgV := null
        
        ParseCommandLine(Line, &ArgC, &ArgV)
        i8* CommandName := ArgV[0]

        ShellCommand* Command := LookupCommand(CommandName)

        if (Command = null) {
            Print("'%s' command not found\n", CommandName)
        }
        else {
            Command->Callback(ArgC, ArgV)
        }
    }
}