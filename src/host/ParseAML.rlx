#Require "$/Memory.rlx"
#Require "$/File.rlx"
#Require "$/Console.rlx"
#Require "$/Exception.rlx"
#Require "$/Debug.rlx"

define void Indent(i32 Depth) {
	for (i32 Index := 0, Index < Depth, Index++) {
		Print("\t")
	}
}

#Require "./src/drivers/ACPI/AML/Parser.rlx"

define void PrintTerms(i32 Depth, i32 Count, AMLTerm** Terms) {
	for (i32 Index := 0, Index < Count, Index++) {
		PrintTerm(Depth, Terms[Index])
		Print("\n")
	}
}

define void PrintScope(i32 Depth, AMLScope* Scope) {
	Indent(Depth)
	Scope->Print()
	Print("\n")

	i32 Count := Scope~>Members->Count()

	if (Count) {
		for (i32 Index := 0, Index < Count, Index++) {
			AMLScopeMember* Member := Scope~>Members->At(Index)


			if (Member->Kind = AML_MEMBER_KIND_SCOPE) {
				PrintScope(Depth + 1, Member->ScopeValue)
			}
			else {
				Member->Print(Depth + 1)
				Print("\n")
			}
		}
	}
}

define void Main() {
	Print("%x %x\n", #AMLTerm, #AMLTermArg)
	Print("%x\n", (null As AMLTerm*)~>Statement~>WhileLoop~>Body)

	i64 F := FileOpen("dsdt.aml.bin", FILE_READ)
	
	i32 Size := FileGetSize(F)
	void* AML := FileReadAll(F)
	
	FileClose(F)
	
	AMLParser* P := Alloc(#AMLParser)
	P->Initialize()
	
	P->Buffer := AML
	P->Length := Size
	
	i32 Count := 0
	AMLTerm** Terms := null
	P->ParseTopLevelBlock(Size, &Count, &Terms)

	Print("===\nDone with method declarations\n===\n")

	PrintScope(0, P->RootScope)
	
	;for (i32 Index := 0, Index < Count, Index++) {
	;	Terms[Index]->Print()
	;}
	
	P->ParseBodyBlocks()
	
	;for (i32 Index := 0, Index < Count, Index++) {
	;	Terms[Index]->Print()
	;}

	PrintScope(0, P->RootScope)
}