; Int 0x20, IRQ0

#Require "./src/utility/x64.rlx"
#Require "./src/kernel/core/Events.rlx"

struct PITCounterMode {
	i64 WholePerTick
	i64 FractionPerTick
	i64 FractionToWholeDivisor
	i16 ReloadValue
	
	define i64 GuessHZ() {
		return 1000 / this->WholePerTick
	}
}

PITCounterMode PIT_100HZ_CONFIG {
	; I really wish I'd wrote down how I got these numbers
	
	WholePerTick: 			10, 
	FractionPerTick: 		6872852, 
	FractionToWholeDivisor: 1000000000,
	ReloadValue:			11931
}

PITCounterMode* PIT_100HZ := &PIT_100HZ_CONFIG

i8 PIT_DATA_PORTS_BASE := 0x40
i8 PIT_COMMAND_PORT := 0x43

i8 PIT_CHANNEL_0 := 0
i8 PIT_CHANNEL_1 := 1
i8 PIT_CHANNEL_2 := 2

i8 PIT_ACCESS_LATCH := 0
i8 PIT_ACCESS_LOWBYTE := 1
i8 PIT_ACCESS_HIGHBYTE := 2
i8 PIT_ACCESS_BOTHBYTE := 3

i8 PIT_MODE_RATE_GENERATOR := 6

i8 PC_SPEAKER_PORT := 0x61
i8 PC_SPEAKER_PIT_MASK := 0b1
i8 PC_SPEAKER_STATE_MASK := 0b10
i8 PC_SPEAKER_ENABLE := PC_SPEAKER_PIT_MASK | PC_SPEAKER_STATE_MASK
i8 PC_SPEAKER_DISABLE := ~PC_SPEAKER_ENABLE

define void InitializePITChannel(i8 Channel, i8 AccessMode, i8 OperatingMode, i16 Reload) {
	i8 Command := ((Channel << 6) | (AccessMode << 4) | (OperatingMode)) As i8

	OutB(PIT_COMMAND_PORT, Command) 
	OutB(PIT_DATA_PORTS_BASE + Channel, (Reload & 0xFF) As i8)
	OutB(PIT_DATA_PORTS_BASE + Channel, (Reload >> 8) As i8)
}

define void SetPITMode(PITCounterMode* Mode) {
	InitializePITChannel(PIT_CHANNEL_0, PIT_ACCESS_BOTHBYTE, PIT_MODE_RATE_GENERATOR, Mode->ReloadValue)
}

define void HangPITChannel(i8 Channel) {
	i8 Command := ((Channel << 6) | (PIT_ACCESS_BOTHBYTE << 4) | (PIT_MODE_RATE_GENERATOR)) As i8

	OutB(PIT_COMMAND_PORT, Command) 
	OutB(PIT_DATA_PORTS_BASE + Channel, 0)
}



define void PlayRawSound(i32 Counter) {
	InitializePITChannel(PIT_CHANNEL_2, PIT_ACCESS_BOTHBYTE, PIT_MODE_RATE_GENERATOR, Counter As i16)

	i8 State := InB(PC_SPEAKER_PORT)

	if !(State & PC_SPEAKER_ENABLE) {
		OutB(PC_SPEAKER_PORT, State | PC_SPEAKER_ENABLE)
	}
}
define void PlaySound(i32 Frequency) {
	PlayRawSound(1193180 / Frequency)
}

define void StopSound() {
	OutB(PC_SPEAKER_PORT, InB(PC_SPEAKER_PORT) & PC_SPEAKER_DISABLE)
}