
i16 PIC_1_COMMAND := 0x20
i16 PIC_1_DATA := 0x21

i16 PIC_2_COMMAND := 0xA0
i16 PIC_2_DATA  := 0xA1

i8 PIC_ICW1_ICW4 := 0x1
i8 PIC_ICW1_SINGLE := 0x2
i8 PIC_ICW1_INTERVAL4 := 0x4
i8 PIC_ICW1_LEVEL := 0x8
i8 PIC_ICW1_INIT := 0x10

i8 PIC_ICW4_8086 := 0x1
i8 PIC_ICW4_AUTO := 0x2
i8 PIC_ICW4_BUFFERED_SLAVE := 0x8
i8 PIC_ICW4_BUFFERED_MASTER := 0xC
i8 PIC_ICW4_SFNM := 0x10

i8 PIC_1_OFFSET
i8 PIC_2_OFFSET

define void OutPIC(i16 Port, i8 Value) {
	OutB(Port, Value)
	IOWait()
}

define void RemapPIC(i8 Offset) {
	PIC_1_OFFSET := Offset
	PIC_2_OFFSET := (Offset + 8) As i8
	
	OutPIC(PIC_1_COMMAND, PIC_ICW1_INIT | PIC_ICW1_ICW4)
	OutPIC(PIC_2_COMMAND, PIC_ICW1_INIT | PIC_ICW1_ICW4)
	
	OutPIC(PIC_1_DATA, PIC_1_OFFSET)
	OutPIC(PIC_2_DATA, PIC_2_OFFSET)
	
	OutPIC(PIC_1_DATA, 0x4)
	OutPIC(PIC_2_DATA, 0x02)
	
	OutPIC(PIC_1_DATA, PIC_ICW4_8086)
	OutPIC(PIC_2_DATA, PIC_ICW4_8086)
	
	OutPIC(PIC_1_DATA, 0xFF As i8)
	OutPIC(PIC_2_DATA, 0xFF As i8)
}

define i32 IRQToIDT(i32 IRQ) {
	if (LocalAPIC->IsEnabled) {
		return IRQ
	}

	if (IRQ >= 8) {
		return PIC_2_OFFSET + IRQ - 8
	}
	else {
		return PIC_1_OFFSET + IRQ
	}
}

define void SendEOI(i8 IRQLine) {
	if (LocalAPIC->IsEnabled) {
		LocalAPIC->EOI()
		return
	}
	
	if (IRQLine >= 8) {
		OutPIC(PIC_2_COMMAND, 0x20)
	}
	
	OutPIC(PIC_1_COMMAND, 0x20)
}

define void EnablePICLine(i8 IRQLine, i8 Enabled) {
	if (LocalAPIC->IsEnabled) {
		FirstIOAPIC->ForwardInterrupt(IRQLine, LocalAPIC->ID, PIC_1_OFFSET + IRQLine)
		
		return
	}
	
	i16 Port := PIC_1_DATA
	
	if (IRQLine >= 8) {
		Port := PIC_2_DATA
		IRQLine -= 8
	}
	
	i32 Value := InB(Port)
	
	if (Enabled) {
		Value &= ~(1 << IRQLine)
	}
	else {
		Value |= (1 << IRQLine)
	}
	
	OutPIC(Port, Value As i8)
}

define void DisablePIC() {
	OutPIC(PIC_1_DATA, 0xFF As i8)
	OutPIC(PIC_2_DATA, 0xFF As i8)
}