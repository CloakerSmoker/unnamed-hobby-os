#Require "./src/drivers/SATA.rlx"

namespace ICH9::AHCI {
    enum DeviceSignature {
        ATA := 0x101
        ATAPI := 0xEB140101
        SEMB := 0xC33C0101
        PM := 0x96690101
    }

    enum PowerManagementState {
        DeviceNotPresent := 0
        Active := 1
        Partial := 2
        Slumber := 6
    }

    enum InterfaceSpeed {
        DeviceNotPresent := 0
        Generation1 := 1
        Generation2 := 2
    }

    enum DeviceDetection {
        DeviceNotPresent := 0
        NoPhyCommunication := 1
        DevicePresent := 3
        PhyOffline := 4
    }

    namespace HBA {
        bits PortControlCommand As i32 {
            [0] Start
            [3] CommandListOverride
            [4] RecieveEnabled
        }

        bits PortControlStatus As i32 {
            [15] ControllerRunning
            [14] RecieveRunning
        }

        bits PortInterruptStatus As i32 {
            [30] TaskFileError
        }

        bits TaskFileData As i32 {
            [0] Error
            [3] DataRequest
            [7] Busy
        }

        bits SATAStatus As i32 {
            PowerManagementState [8:11] InterfacePowerManagement
            InterfaceSpeed [4:7] InterfaceSpeed
            DeviceDetection [0:3] DeviceDetection
        }

        struct PortControl {
            i32 CommandListBaseAddressLow
            i32 CommandListBaseAddressHigh

            i32 FISBaseAddressLow
            i32 FISBaseAddressHigh
            
            union {
                PortInterruptStatus InterruptStatus
            }

            i32 InterruptEnable

            union {
                i32 CommandStatus
                PortControlCommand Command
                PortControlStatus Status
            }

            i32 Reserved

            union {
                i32 RawTaskFileData
                TaskFileData TaskFileData
            }

            i32 Signature

            union {
                i32 RawSATA_Status

                SATAStatus SATAStatus
            }

            i32 SATA_Control
            i32 SATA_Error
            i32 SATA_Active

            i32 CommandIssue

            i32 SATA_Notification

            i32 FISBasedSwitchControl

            i8[0x2c] Reserved2

            i8[0x10] VendorSpecific

            define SATA::DeviceType GuessType() {
                SATAStatus Status := this->SATAStatus

                if (Status->DeviceDetection != DeviceDetection::DevicePresent) {
                    return SATA::DeviceType::None
                }
                else if (Status->InterfacePowerManagement != PowerManagementState::Active) {
                    return SATA::DeviceType::None
                }
                
                i32 Signature := this->Signature

                if (Signature = DeviceSignature::ATAPI) {
                    return SATA::DeviceType::SATAPI
                }
                else if (Signature = DeviceSignature::SEMB) {
                    return SATA::DeviceType::EnclosureBridge
                }
                else if (Signature = DeviceSignature::PM) {
                    return SATA::DeviceType::PortMultiplier
                }
                else {
                    return SATA::DeviceType::SATA
                }
            }
        }

        bits _GlobalHostControl As i32 {
            [0] ControllerReset
            [1] InterruptEnable
            [2] MSINeedsMet
            [31] AHCIEnable
        }

        struct HostControl {
            i32 HostCapability

            union {
                i32 RawGlobalHostControl
                _GlobalHostControl GlobalHostControl
            }

            i32 InterruptStatus
            i32 PortsImplemented
            i32 Version
            i32 CommandCompletionCoalescingControl
            i32 CommandCompletionCoalescingPorts
            i32 EnclosureManagementLocation
            i32 EnclosureManagementControl
            i32 HostCapabilitiesExtended
            i32 BIOSHandoffControl

            i8[0x74] Reserved
            i8[0x60] VendorSpecific

            PortControl[32] Ports
        }

        enum TransferDirection {
            DeviceToHost := 0,
            HostToDevice := 1
        }

        struct CommandHeader {
            bits As i16 {
                [0:4] DWORDCount
                [5] UseATAPI
                TransferDirection [6] Direction
                [7] Prefetchable
                [8] Reset
                [9] SelfTest
                [10] ClearBusy
                [12:15] PortMultiplierPort
            }

            i16 PhysicalDescriptorTableLength

            i32 PhysicalDescriptorBytesTransferred

            i32 CommandTableDescriptorBaseAddressLow
            i32 CommandTableDescriptorBaseAddressHigh

            i32[4] Reserved
        }

        struct PhysicalRegionDescriptor {
            i32 BaseAddressLow
            i32 BaseAddressHigh

            define void SetBaseAddress(i64 Address) {
                this->BaseAddressLow := (Address & 0xFFFF_FFFF) As i32
                this->BaseAddressHigh := ((Address >> 32) & 0xFFFF_FFFF) As i32
            }

            i32 Reserved

            bits As i32 {
                [0:22] ByteCount
                [31] InterruptOnCompletion
            }
        }

        struct CommandTable {
            i8[0x40] FIS

            i8[0x10] ATAPICommand

            i8[0x30] Reserved

            PhysicalRegionDescriptor[0] PhysicalRegions
        }

        struct CommandList {
            CommandTable[32] Commands
        }
    }

    ; MMIO -
    ; Controller 0x100
    ; Ports 0x1000
    ;  0x1100

    ; Per Port:
    ;  Command List:
    ;   0x20 * 32 = 0x400
    ;  Recieved FIS:
    ;   0x100
    ; Total: 0x500
    
    ; Per Command List:
    ;  Command Header:
    ;   0x80
    ;  Physical Regions:
    ;   N * 0x10

    ; With 8 physical regions (max) per command:
    ;  Command table: 0x100 bytes per
    ;  0x20 command tables: 0x2000 bytes total (2 pages)

    struct CommandTableEntry {
        HBA::CommandTable Command
        HBA::PhysicalRegionDescriptor[8] RegionDescriptors

        define void Zero() {
            FastZeroMemory(this, #self)
        }
    }

    struct CommandTable {
        CommandTableEntry[32] Commands
    }

    struct CommandHeaderList {
        HBA::CommandHeader[32] Headers
    }

    struct DeviceCommand {
        i32 Slot
        HBA::CommandHeader* Header
        CommandTableEntry* Table
        HBA::PhysicalRegionDescriptor* Regions

        i32 RegionCount

        union {
            void* RawFIS
            SATA::FIS::SetDeviceRegisters* SetDeviceRegisters
        }

        define void MakeTransfer(HBA::TransferDirection Direction, ATA::Command Command) {
            this->Header->Direction := Direction

            SATA::FIS::SetDeviceRegisters* SDR := this->SetDeviceRegisters
            
            SDR->Type := SATA::FIS::Type::HostToDevice
            SDR->CommandOrControl := SATA::FIS::CommandControl::Command

            SDR->Command := Command
        }

        define void SetTransferSize(i64 RawBlockCount) {
            i32 BlockCount := RawBlockCount As i32

            i32 BYTES_PER_PRDT := 0x40_0000 ; 2 ** 22

            i32 ByteCount := BlockCount * 512
            i32 RegionCount := ByteCount / BYTES_PER_PRDT

            for (i32 Index := 0, Index < RegionCount, Index++) {
                HBA::PhysicalRegionDescriptor* Region := this->Regions[Index]

                Region->ByteCount := BYTES_PER_PRDT - 1
            }

            if (ByteCount % BYTES_PER_PRDT) {
                HBA::PhysicalRegionDescriptor* LastRegion := this->Regions[RegionCount++]

                LastRegion->ByteCount := ByteCount % BYTES_PER_PRDT
            }

            this->Header->PhysicalDescriptorTableLength := RegionCount As i16
            this->SetDeviceRegisters->Count := BlockCount As i16
        }

        define void SetTransferDeviceLocation(i64 Base) {
            SATA::FIS::SetDeviceRegisters* SDR := this->SetDeviceRegisters

            SDR->SetLBA(Base)
        }

        define void SetTransferHostLocation(void* Where) {
            i32 BYTES_PER_PRDT := 0x40_0000 ; 2 ** 22

            i64 WherePhysical := VirtualToPhysical(Where)

            i32 RegionCount := this->Header->PhysicalDescriptorTableLength

            for (i32 Index := 0, Index < RegionCount, Index++) {
                HBA::PhysicalRegionDescriptor* Region := this->Regions[Index]

                Region->SetBaseAddress(WherePhysical + (Index * BYTES_PER_PRDT))
            }

            HBA::PhysicalRegionDescriptor* LastRegion := this->Regions[this->RegionCount - 1]

            LastRegion->InterruptOnCompletion := true
        }
    }

    struct DevicePort {
        i32 Index
        HBA::PortControl* Control
        SATA::DeviceType Type

        CommandHeaderList* CommandHeaderList
        i64 PhysicalCommandHeaderList

        SATA::FIS::ReceivedFIS* ReceivedFIS
        i64 PhysicalRecievedFIS

        CommandTableEntry* CommandTables
        i64 PhysicalCommands

        DeviceCommand[32] Commands

        union {
            i8[512] IdentifySector
            ATAIdentificationSpace IdentifyData
        }

        i8[30] Model
        i8[50] SerialNumber

        static self* New(i32 Index, HBA::PortControl* Control) {
            self* this := Alloc(#self)

            this->Index := Index
            this->Control := Control
            this->Type := Control->GuessType()

            return this
        }

        define void EnableInterrupts() {
            this->Control->InterruptEnable := -1
        }
        define void DisableInterrupts() {
            this->Control->InterruptEnable := 0
        }

        define void DumpTaskFileData() {
            HBA::TaskFileData TFD := this->Control->TaskFileData

            if (TFD->Error) {
                Info("[Error] ")
            }
            
            if (TFD->DataRequest) {
                Info("[DataRequest] ")
            }

            if (TFD->Busy) {
                Info("[Busy] ")
            }
        }

        define void DumpCommandIssue() {
            i32 CI := this->Control->CommandIssue

            for (i32 Index := 0, Index < 32, Index++) {
                i32 Mask := 1 << Index

                if (CI & Mask) {
                    Info("1")
                }
                else {
                    Info("0")
                }
            }
        }

        define void Dump() {
            Info("TFD: ")
            this->DumpTaskFileData()
            Info("\n")

            Info("CI: ")
            this->DumpCommandIssue()
            Info("\n")
        }

        define i32 FindFreeCommandSlot() {
            i32 Allocated := this->Control->CommandIssue | this->Control->SATA_Active

            for (i32 Slot := 0, Slot < 32, Slot++) {
                i32 Bit := 1 << Slot

                if !(Allocated & Bit) {
                    return Slot
                }
            }

            Panic("Could not find free AHCI command slot")
            return 0
        }

        define void SpinUntilNotBusy() {
            i32 Count := 0

            HBA::PortControl* Control := this->Control

            while (Control->TaskFileData->Busy || Control->TaskFileData->DataRequest) {
                Count++

                if (Count >= 0x1_0000) {
                    Panic("AHCI Port is hung")
                    return
                }
            }
        }

        define DeviceCommand* PrepareCommand() {
            i32 Slot := this->FindFreeCommandSlot()

            HBA::CommandHeader* CommandHeader := this->CommandHeaderList->Headers[Slot]

            CommandHeader->DWORDCount := ((#HBA::CommandHeader) / 4) As i8

            ; Set up command table
            CommandTableEntry* Table := this->CommandTables[Slot]

            Table->Zero()

            ; Set up physical regions

            HBA::PhysicalRegionDescriptor* Descriptor := Table->RegionDescriptors[0]

            DeviceCommand* Out := this->Commands[Slot]
            
            Out->Slot := Slot
            Out->Header := CommandHeader
            Out->Table := Table
            Out->Regions := Descriptor
            Out->RawFIS := Table~>Command->FIS As void*

            return Out
        }

        define void IssueCommand(DeviceCommand* Command) {
            this->SpinUntilNotBusy()
            
            ;Info("Issue FIS:\n%hexdump\n", Command->RawFIS, 0x40)

            i32 SlotMask := 1 << Command->Slot
            this->Control->CommandIssue := SlotMask

            i32 Spin := 0

            loop {
                Spin++

                if !(this->Control->CommandIssue & SlotMask) {
                    break
                }

                if (this->Control->InterruptStatus->TaskFileError) {
                    Panic("AHCI command error\n")
                    return
                }

                if (Spin > 0x20) {
                    Panic("AHCI command timeout\n")
                    return
                }
            }
        }

        define void Reset() {
            DeviceCommand* Command := this->PrepareCommand()

            ; TODO: Compiler bug. `::ICH9::AHCI::` is required to avoid a compiler crash

            Command->MakeTransfer(::ICH9::AHCI::HBA::TransferDirection::DeviceToHost, ATA::Command::DEVICE_RESET)

            this->IssueCommand(Command)
        }

        define void DecodeIdentityString(i8* In, i32 Size, i8* Out) {
            for (i32 CopyIndex := 0, CopyIndex < Size, CopyIndex += 2) {
                Out[CopyIndex] := In[CopyIndex + 1]
                Out[CopyIndex + 1] := In[CopyIndex]
            }
            
            Out[Size] := 0
            
            for (i32 Index := Size - 1, Index >= 0, Index--) {
                if (Out[Index] = ' ') {
                    Out[Index] := 0
                }
                else {
                    break
                }
            }
        }

        define void Identify() {
            ;this->Control->InterruptStatus := 0xFF_FF_FF_FF

            DeviceCommand* Command := this->PrepareCommand()

            Command->MakeTransfer(HBA::TransferDirection::DeviceToHost, ATA::Command::IDENTIFY_DEVICE)
            Command->SetTransferSize(1)
            Command->SetTransferHostLocation(this->IdentifySector)

            this->IssueCommand(Command)

            this->DecodeIdentityString(this->IdentifyData->Model, 40, this->Model)
            this->DecodeIdentityString(this->IdentifyData->SerialNumber, 40, this->SerialNumber)

        }

        define void Read(i64 StartBlock, i64 BlockCount, void* Buffer) {
            ;this->Control->InterruptStatus := 0xFF_FF_FF_FF

            DeviceCommand* Command := this->PrepareCommand()

            Command->MakeTransfer(HBA::TransferDirection::DeviceToHost, ATA::Command::READ_DMA_EXT)
            Command->SetTransferSize(BlockCount)
            Command->SetTransferDeviceLocation(StartBlock)
            Command->SetTransferHostLocation(Buffer)

            Command->SetDeviceRegisters->Device := (1 << 6) As i8 ; READ_DMA_EXT specifies bit 6 must be set

            this->IssueCommand(Command)
        }

        define void Write(i64 StartBlock, i64 BlockCount, void* Buffer) {
            ;this->Control->InterruptStatus := 0xFF_FF_FF_FF

            DeviceCommand* Command := this->PrepareCommand()

            Command->MakeTransfer(HBA::TransferDirection::DeviceToHost, ATA::Command::WRITE_DMA_EXT)
            Command->SetTransferSize(BlockCount)
            Command->SetTransferDeviceLocation(StartBlock)
            Command->SetTransferHostLocation(Buffer)

            this->IssueCommand(Command)
        }

        define void StartCommands() {
            HBA::PortControlCommand Command

            Command.Start := true
            Command.CommandListOverride := true
            Command.RecieveEnabled := true
            
            this->Control->Command := Command
        }
        
        define void StopCommands() {
            this->Control->Command.Start := false
            this->Control->Command.RecieveEnabled := false

            loop {
                if (this->Control->Status.RecieveRunning) {
                    continue
                }
                else if (this->Control->Status.ControllerRunning) {
                    continue
                }

                break
            }
        }
    }

    struct Controller {
        PCIeDevice* Device

        void* MemoryBase

        HBA::HostControl* HostControl
        
        PointerArray* Ports ; <DevicePort*>

        define void Log(i8* Format, ... Args) {
            i8[200] Buffer

            i32 Length := RawFormatString(Buffer, 300, Format, Args)
            Buffer[Length] := 0

            Info("%pcie: ICH9: %s\n", this->Device, Buffer)
            Print("ICH9: SATA: %s\n", Buffer)
        }

        static void ServiceInterrupt() {
            Info("AHCI INTERRUPT!!!\n")

            LocalAPIC->EOI()
        }

        static void OnInterrupt() asm {
            call, @InterruptSetup
		    call, @self:ServiceInterrupt
		    jmp, @InterruptReturn
        }

        define void InitializePorts() {
            i32 Count := this->Ports->Count()

            for (i32 Index := 0, Index < Count, Index++) {
                DevicePort* Port := this->Ports->At(Index)

                Port->CommandHeaderList := KernelPageAllocator->AllocateVirtual(1)
                SplitLowHigh(Port->CommandHeaderList, Port->Control~>CommandListBaseAddressLow, Port->Control~>CommandListBaseAddressHigh)

                Port->ReceivedFIS := KernelPageAllocator->AllocateVirtual(1)
                SplitLowHigh(Port->ReceivedFIS, Port->Control~>FISBaseAddressLow, Port->Control~>FISBaseAddressHigh)

                Port->CommandTables := KernelPageAllocator->AllocateVirtual(1)

                for (i32 CommandIndex := 0, CommandIndex < 32, CommandIndex++) {
                    HBA::CommandHeader* Header := Port->CommandHeaderList->Headers[CommandIndex]

                    Header->PhysicalDescriptorTableLength := 8
                    SplitLowHigh(Port->CommandTables[CommandIndex], Header~>CommandTableDescriptorBaseAddressLow, Header~>CommandTableDescriptorBaseAddressHigh)
                }
            }
        }

        define void Initialize(PCIeDevice* Device) {
            this->Device := Device

            /*Info("AHCI_HBA_HOST_CONTROL: %x\n", #HBA::HostControl)
            Info("AHCI_HBA_PORT_CONTROL: %x\n", #HBA::PortControl)
            Info("AHCI_HBA_COMMAND_HEADER: %x\n", #HBA::CommandHeader)
            Info("AHCI_HBA_COMMAND_TABLE: %x\n", #HBA::CommandTable)
            Info("AHCI_HBA_PHYSICAL_REGION_DESCRIPTOR: %x\n", #HBA::PhysicalRegionDescriptor)
            */

            DisableInterrupts()
            Device->EnableMSI(20)
            InsertIDTEntry(IRQToIDT(20), &self:OnInterrupt, true)
            EnablePICLine(20, true)
            EnableInterrupts()

            i64 ControllerPhysicalAddress := Device->ReadBAR(5) & 0xFFFF_FFFF
            i32 Size := Device->GetBARSize(5)

            this->MemoryBase := ControllerPhysicalAddress As void*

            i64 MMIOPage := (ControllerPhysicalAddress & PCI_BAR_MEMORY_MASK) / PAGE_SIZE
            i32 MMIOSize := Size / PAGE_SIZE

            KernelAddressSpace->MapRange(this->MemoryBase, MMIOPage, MMIOSize, PAGE_PRESENT | PAGE_WRITE)

            this->HostControl := this->MemoryBase

            this->Log("Version %x", this->HostControl->Version)

            i32 DeviceCount := 0
            this->Ports := PointerArray:New()

            i32 PortsImplemented := this->HostControl->PortsImplemented

            for (i32 Index := 0, Index < 32, Index++) {
                i32 Mask := 1 << Index

                if (PortsImplemented & Mask) {
                    HBA::HostControl* HostControl := this->HostControl
                    HBA::PortControl* Ports := HostControl->Ports
                    HBA::PortControl* Port := Ports[Index]

                    SATA::DeviceType Type := Port->GuessType()

                    if (Type != SATA::DeviceType::None) {
                        this->Ports->Push(DevicePort:New(Index, Port))
                    }

                    this->Log("Port %i present, %s type device", Index, nameof:(Type))
                }
            }

            this->InitializePorts()

            this->HostControl->GlobalHostControl.ControllerReset := true
            this->HostControl->GlobalHostControl.AHCIEnable := true
            this->HostControl->GlobalHostControl.InterruptEnable := true
        }
    }
}