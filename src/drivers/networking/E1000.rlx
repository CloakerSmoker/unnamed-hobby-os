

i32 PCI_VENDOR_INTEL := 0x8086

i32 PCI_DEVICE_INTEL_E1000 := 0x100E
i32 PCI_DEVICE_INTEL_I217 := 0x153A
i32 PCI_DEVICE_INTEL_82577LM := 0x10EA
i32 PCI_DEVICE_INTEL_82574L := 0x10D3

i32 E1000_BUFFER_COUNT := 8

i32 E1000_REGISTER_CTRL        := 0x0000
i32 E1000_REGISTER_STATUS      := 0x0008
i32 E1000_REGISTER_EEPROM      := 0x0014
i32 E1000_REGISTER_CTRL_EXT    := 0x0018

i32 E1000_REGISTER_FCAL        := 0x0028
i32 E1000_REGISTER_FCAH        := 0x002C
i32 E1000_REGISTER_FCT         := 0x0030
i32 E1000_REGISTER_FCTTV       := 0x0170

i32 E1000_REGISTER_ICR         := 0x00C0
i32 E1000_REGISTER_ICS         := 0x00C8
i32 E1000_REGISTER_IMS         := 0x00D0
i32 E1000_REGISTER_IMC         := 0x00D8
i32 E1000_REGISTER_RCTRL       := 0x0100
i32 E1000_REGISTER_TIPG        := 0x0410
i32 E1000_REGISTER_RXDESCLO    := 0x2800
i32 E1000_REGISTER_RXDESCHI    := 0x2804
i32 E1000_REGISTER_RXDESCLEN   := 0x2808
i32 E1000_REGISTER_RXDESCHEAD  := 0x2810
i32 E1000_REGISTER_RXDESCTAIL  := 0x2818

i32 E1000_REGISTER_TCTRL       := 0x0400
i32 E1000_REGISTER_TXDESCLO    := 0x3800
i32 E1000_REGISTER_TXDESCHI    := 0x3804
i32 E1000_REGISTER_TXDESCLEN   := 0x3808
i32 E1000_REGISTER_TXDESCHEAD  := 0x3810
i32 E1000_REGISTER_TXDESCTAIL  := 0x3818

i32 E1000_REGISTER_RDTR        := 0x2820
i32 E1000_REGISTER_RXDCTL      := 0x2820
i32 E1000_REGISTER_RADV        := 0x2820
i32 E1000_REGISTER_RSRPD       := 0x2820

i32 E1000_REGISTER_COUNTERS_BASE := 0x4000
i32 E1000_REGISTER_COUNTERS_SIZE := 0x40

i32 E1000_REGISTER_MTA_BASE    := 0x5200
i32 E1000_REGISTER_MTA_SIZE    := 0x80

i32 E1000_REGISTER_RAL0        := 0x5400
i32 E1000_REGISTER_RAH0        := 0x5404

i32 E1000_RAH0_AV              := 1 << 31


i32 E1000_CTRL_LRST            := 1 << 3
i32 E1000_CTRL_ASDE            := 1 << 5
i32 E1000_CTRL_SLU             := 1 << 6
i32 E1000_CTRL_ILOS            := 1 << 7
i32 E1000_CTRL_RST             := 1 << 26
i32 E1000_CTRL_RFCE            := 1 << 27
i32 E1000_CTRL_VME             := 1 << 30
i32 E1000_CTRL_PHY_RST         := 1 << 31

i32 E1000_STATUS_LU          := 1 << 1
i32 E1000_STATUS_SPEED_MASK  := (1 << 6) | (1 << 7)
i8  E1000_STATUS_SPEED_SHIFT := 6

i32 E1000_STATUS_SPEED_10    := 0b00
i32 E1000_STATUS_SPEED_100   := 0b01
i32 E1000_STATUS_SPEED_1000  := 0b10
i32 E1000_STATUS_SPEED_1000  := 0b11

i32 E1000_RCTL_EN            := 1 << 1  ; Receiver Enable
i32 E1000_RCTL_SBP           := 1 << 2  ; Store Bad Packets
i32 E1000_RCTL_UPE           := 1 << 3  ; Unicast Promiscuous Enabled
i32 E1000_RCTL_MPE           := 1 << 4  ; Multicast Promiscuous Enabled
i32 E1000_RCTL_LPE           := 1 << 5  ; Long Packet Reception Enable
i32 E1000_RCTL_LBM_NONE      := 0 << 6  ; No Loopback
i32 E1000_RCTL_LBM_PHY       := 3 << 6  ; PHY or external SerDesc loopback
i32 E1000_RCTL_RDMTS_HALF    := 0 << 8  ; Free Buffer Threshold is 1/2 of RDLEN
i32 E1000_RCTL_RDMTS_QUARTER := 1 << 8  ; Free Buffer Threshold is 1/4 of RDLEN
i32 E1000_RCTL_RDMTS_EIGHTH  := 2 << 8  ; Free Buffer Threshold is 1/8 of RDLEN
i32 E1000_RCTL_MO_36         := 0 << 12 ; Multicast Offset - bits 47:36
i32 E1000_RCTL_MO_35         := 1 << 12 ; Multicast Offset - bits 46:35
i32 E1000_RCTL_MO_34         := 2 << 12 ; Multicast Offset - bits 45:34
i32 E1000_RCTL_MO_32         := 3 << 12 ; Multicast Offset - bits 43:32
i32 E1000_RCTL_BAM           := 1 << 15 ; Broadcast Accept Mode
i32 E1000_RCTL_VFE           := 1 << 18 ; VLAN Filter Enable
i32 E1000_RCTL_CFIEN         := 1 << 19 ; Canonical Form Indicator Enable
i32 E1000_RCTL_CFI           := 1 << 20 ; Canonical Form Indicator Bit Value
i32 E1000_RCTL_DPF           := 1 << 22 ; Discard Pause Frames
i32 E1000_RCTL_PMCF          := 1 << 23 ; Pass MAC Control Frames
i32 E1000_RCTL_SECRC         := 1 << 26 ; Strip Ethernet CRC

i32 E1000_RCTL_BSIZE_256   := 3 << 16
i32 E1000_RCTL_BSIZE_512   := 2 << 16
i32 E1000_RCTL_BSIZE_1024  := 1 << 16
i32 E1000_RCTL_BSIZE_2048  := 0 << 16
i32 E1000_RCTL_BSIZE_4096  := (3 << 16) | (1 << 25)
i32 E1000_RCTL_BSIZE_8192  := (2 << 16) | (1 << 25)
i32 E1000_RCTL_BSIZE_16384 := (1 << 16) | (1 << 25)

i8 E1000_CMD_EOP  := (1 << 0) As i8 ; End of Packet
i8 E1000_CMD_IFCS := (1 << 1) As i8 ; Insert FCS
i8 E1000_CMD_IC   := (1 << 2) As i8 ; Insert Checksum
i8 E1000_CMD_RS   := (1 << 3) As i8 ; Report Status
i8 E1000_CMD_RPS  := (1 << 4) As i8 ; Report Packet Sent
i8 E1000_CMD_VLE  := (1 << 6) As i8 ; VLAN Packet Enable
i8 E1000_CMD_IDE  := (1 << 7) As i8 ; Interrupt Delay Enable

i32 E1000_TCTL_EN         := 1 << 1  ; Transmit Enable
i32 E1000_TCTL_PSP        := 1 << 3  ; Pad Short Packets
i8  E1000_TCTL_CT_SHIFT   := 4       ; Collision Threshold
i8  E1000_TCTL_COLD_SHIFT := 12      ; Collision Distance
i32 E1000_TCTL_SWXOFF     := 1 << 22 ; Software XOFF Transmission
i32 E1000_TCTL_RTLC       := 1 << 24  ; Re-transmit on Late Collision
i32 E1000_TCTL_RRTHRESH_4 := 1 << 29

i8 E1000_TSTA_DD := 0b0001 ; Descriptor Done
i8 E1000_TSTA_EC := 0b0010 ; Excess Collisions
i8 E1000_TSTA_LC := 0b0100 ; Late Collision
i8 E1000_LSTA_TU := 0b1000 ; Transmit Underrun

i32 E1000_IMS_TXDW    := 1 << 0
i32 E1000_IMS_TXQE    := 1 << 1
i32 E1000_IMS_LSC     := 1 << 2
i32 E1000_IMS_RXDMT0  := 1 << 4
i32 E1000_IMS_DSW     := 1 << 5
i32 E1000_IMS_RXO     := 1 << 6
i32 E1000_IMS_RXT     := 1 << 7
i32 E1000_IMS_MDAC    := 1 << 9
i32 E1000_IMS_PHYINT  := 1 << 12
i32 E1000_IMS_LSECPN  := 1 << 14
i32 E1000_IMS_TXD_LOW := 1 << 15
i32 E1000_IMS_SRPD    := 1 << 16
i32 E1000_IMS_ACK     := 1 << 17
i32 E1000_IMS_MNG     := 1 << 18
i32 E1000_IMS_EPRST   := 1 << 20
i32 E1000_IMS_ECCER   := 1 << 22

struct E1000ReceiveBuffer unaligned {
	i64 Address
	i16 Length
	i16 Checksum
	i8 Status
	i8 Errors
	i16 Special

	define void Info() {
		i8*[8] StatusNames {
			"DONE", "END-OF-PACKET", "IGNORE-CHECKSUM",
			"VLAN-MATCH", "RESERVED", "TCP-CHECKSUM",
			"IP-CHECKSUM", "IN-EXACT"
		}

		Info("Recv Buffer {\n")
		Info("\tLength %x\n", this->Length)
		Info("\tChecksum %x\n", this->Checksum)

		Info("\tStatus %x (", this->Status)
		
		i8 Previous := false

		for (i8 Shift := 0, Shift < 8, Shift++) {
			i32 Mask := 1 << Shift

			if (this->Status & Mask) {
				if (Previous) {
					Info("%c", ',')
				}

				Info(StatusNames[Shift])
				Previous := true
			}
		}

		Info(")\n")

		Info("\tErrors %x\n", this->Errors)
		Info("\tSpecial %x\n", this->Special)
		Info("}\n")
	}
}

i32 E1000_RECEIVE_STATUS_DONE := 1 << 0
i32 E1000_RECEIVE_STATUS_EOP := 1 << 1
i32 E1000_RECEIVE_STATUS_IXSM := 1 << 2
i32 E1000_RECEIVE_STATUS_VP := 1 << 3
i32 E1000_RECEIVE_STATUS_TCPCS := 1 << 5
i32 E1000_RECEIVE_STATUS_IPCS := 1 << 6
i32 E1000_RECEIVE_STATUS_PIF := 1 << 7

struct E1000TransmitBuffer unaligned {
	i64 Address
	i16 Length
	i8 ChecksumOffset
	i8 Command
	i8 Status
	i8 ChecksumStart
	i16 Special
}

bits E1000ICRBits As i32 {
	[0:1] DescriptorWriteBack
	[1:2] TransmitQueueEmpty
	[2:3] LinkStatusChange
}

E1000* RootE1000 := null

struct E1000 {
	PCIeDevice* PCIe
	
	i8 UseMMIO
	
	union {
		void* MemoryBase
		i16 IOBase
	}
	
	i8 HasEEProm
	
	E1000ReceiveBuffer* ReceiveBuffers
	i32 ReceiveIndex
	
	E1000TransmitBuffer* TransmitBuffers
	i32 TransmitIndex
	
	E1000* Next
	
	define void Write(i32 Address, i32 Value) {
		if (this->UseMMIO) {
			*((this->MemoryBase + Address) As i32*) := Value
		}
		else {
			OutL(this->IOBase, Address)
			OutL(this->IOBase + 4 As i16, Value)
		}
	}
	define i32 Read(i32 Address) {
		if (this->UseMMIO) {
			return *((this->MemoryBase + Address) As i32*)
		}
		else {
			OutL(this->IOBase, Address)
			return InL(this->IOBase + 4 As i16)
		}
	}
	
	define void Set(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old | Mask)
	}
	define void Clear(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old & ~Mask)
	}
	
	define i8 CheckForEEProm() {
		return false
		
		this->Write(E1000_REGISTER_EEPROM, 1)
		
		for (i32 Index := 0, Index < 1000, Index++) {
			i32 Value := this->Read(E1000_REGISTER_EEPROM)
			
			if (Value & 0x10) {
				return true
			}
		}
		
		return false
	}
	
	define i16 ReadEEProm(i32 Address) {
		i32 Data := 0
		i32 Temp := 0
		
		if (this->HasEEProm) {
			this->Write(E1000_REGISTER_EEPROM, 1 | (Address << 8))
			
			loop {
				Temp := this->Read(E1000_REGISTER_EEPROM)
				
				if !(Temp & (1 << 4)) {
					break
				}
			}
		}
		else {
			this->Write(E1000_REGISTER_EEPROM, 1 | (Address << 2))
			
			loop {
				Temp := this->Read(E1000_REGISTER_EEPROM)
				
				if !(Temp & (1 << 1)) {
					break
				}
			}
		}
		
		return ((Temp >> 16) & 0xFFFF) As i16
	}
	
	union {
		i8[6] MAC
		i64 MACPadding
	}
	
	define void ReadMACAddress() {
		if (this->HasEEProm) {
			i16* MACi16 := this~>MAC As i16*
			
			MACi16[0] := this->ReadEEProm(0)
			MACi16[1] := this->ReadEEProm(1)
			MACi16[2] := this->ReadEEProm(2)
		}
		else {
			i32* MACi32 := this~>MAC As i32*
			
			MACi32[0] := this->Read(E1000_REGISTER_RAL0)
			MACi32[1] := this->Read(E1000_REGISTER_RAH0)
		}
	}
	define void SetMACAddress(void* RawMAC) {
		i32* MAC := RawMAC
		
		this->Write(E1000_REGISTER_RAL0, MAC[0])
		this->Write(E1000_REGISTER_RAH0, MAC[1] & 0xFFFF)
		this->Set(E1000_REGISTER_RAH0, E1000_RAH0_AV)
	}
	
	void** ReceiveBuffersVirtual
	
	define void SetupReceive() {
		E1000ReceiveBuffer* Buffers := KernelPageAllocator->AllocateVirtual(1)
		i64 BuffersPhysical := KernelAddressSpace->VirtualToPhysical(Buffers)
		
		this->ReceiveBuffers := Buffers
		this->ReceiveIndex := 0
		
		this->ReceiveBuffersVirtual := Alloc('RX', E1000_BUFFER_COUNT * 8)
		
		for (i32 Index := 0, Index < E1000_BUFFER_COUNT, Index++) {
			void* Buffer := KernelPageAllocator->AllocateVirtual(2)
			
			this->ReceiveBuffersVirtual[Index] := Buffer
			
			Buffers[Index]->Address := KernelAddressSpace->VirtualToPhysical(Buffer)
			Buffers[Index]->Status := 0
		}
		
		this->Write(E1000_REGISTER_RXDESCLO, (BuffersPhysical & 0xFFFF_FFFF) As i32)
		this->Write(E1000_REGISTER_RXDESCHI, ((BuffersPhysical >> 32) & 0xFFFF_FFFF) As i32)
		
		this->Write(E1000_REGISTER_RXDESCLEN, E1000_BUFFER_COUNT * #E1000ReceiveBuffer)
		
		this->Write(E1000_REGISTER_RXDESCHEAD, 0)
		this->Write(E1000_REGISTER_RXDESCTAIL, E1000_BUFFER_COUNT - 1)
		
		this->Write(E1000_REGISTER_RCTRL, E1000_RCTL_EN
		                                      | E1000_RCTL_SBP
											  | E1000_RCTL_UPE
											  | E1000_RCTL_MPE
											  | E1000_RCTL_LBM_NONE
											  | E1000_RCTL_RDMTS_HALF
											  | E1000_RCTL_BAM
											  | E1000_RCTL_SECRC
											  | E1000_RCTL_BSIZE_8192
		)
	}
	
	void** TransmitBuffersVirtual
	
	define void SetupTransmit() {
		E1000TransmitBuffer* Buffers := KernelPageAllocator->AllocateVirtual(1)
		i64 BuffersPhysical := KernelAddressSpace->VirtualToPhysical(Buffers)
		
		this->TransmitBuffers := Buffers
		this->TransmitIndex := 0
		
		this->TransmitBuffersVirtual := Alloc('TX', E1000_BUFFER_COUNT * 8)
		
		for (i32 Index := 0, Index < E1000_BUFFER_COUNT, Index++) {
			void* Buffer := KernelPageAllocator->AllocateVirtual(2)
			
			this->TransmitBuffersVirtual[Index] := Buffer
			
			Buffers[Index]->Address := KernelAddressSpace->VirtualToPhysical(Buffer)
			Buffers[Index]->Status := E1000_TSTA_DD
			Buffers[Index]->Command := 0
		}
		
		this->Write(E1000_REGISTER_TXDESCLO, (BuffersPhysical & 0xFFFF_FFFF) As i32)
		this->Write(E1000_REGISTER_TXDESCHI, ((BuffersPhysical >> 32) & 0xFFFF_FFFF) As i32)
		
		this->Write(E1000_REGISTER_TXDESCLEN, E1000_BUFFER_COUNT * #E1000TransmitBuffer)
		
		this->Write(E1000_REGISTER_TXDESCHEAD, 0)
		this->Write(E1000_REGISTER_TXDESCTAIL, 0)
		
		i32 F := E1000_TCTL_EN
		                                | E1000_TCTL_PSP
		                                | 15 << E1000_TCTL_CT_SHIFT
		                                | 64 << E1000_TCTL_COLD_SHIFT
		                                | E1000_TCTL_RTLC
										
		Info("TCTL %x\n", F)
		
		this->Write(E1000_REGISTER_TCTRL, F
		)
	}
	
	define void EnableInterrupts() {
		this->Write(E1000_REGISTER_IMS, E1000_IMS_LSC | E1000_IMS_RXO | E1000_IMS_TXQE | E1000_IMS_TXDW | E1000_IMS_RXT)
		this->Read(E1000_REGISTER_ICR)
		this->Read(E1000_REGISTER_ICR)
	}
	
	define void Reset() {
		this->Write(E1000_REGISTER_CTRL, E1000_CTRL_RST)
		SleepMS(1000)
	}
	
	define void Setup() {
		;this~>PCI->SetBusMaster(true)
		;this~>PCI->EnableIRQ(true)
		
		this->Reset()
		
		this->HasEEProm := this->CheckForEEProm()
		
		; disable link reset, disable PHY reset, disable invert loss of signal, disable receive flow control
		;this->Clear(E1000_REGISTER_CTRL, E1000_CTRL_LRST | E1000_CTRL_PHY_RST | E1000_CTRL_ILOS | E1000_CTRL_RFCE)
		
		; double disable flow control
		this->Write(E1000_REGISTER_FCAL, 0)
		this->Write(E1000_REGISTER_FCAH, 0)
		this->Write(E1000_REGISTER_FCT, 0)
		this->Write(E1000_REGISTER_FCTTV, 0)
		
		; disable vlans
		this->Clear(E1000_REGISTER_CTRL, E1000_CTRL_VME)
		
		; Clear MTA
		for (i32 Index := 0, Index < E1000_REGISTER_MTA_SIZE, Index++) {
			;this->Write(E1000_REGISTER_MTA_BASE + (Index * 4), 0)
		}
		
		; Clear counters
		for (i32 Index := 0, Index < E1000_REGISTER_COUNTERS_SIZE, Index++) {
			;this->Write(E1000_REGISTER_COUNTERS_BASE + (Index * 4), 0)
		}
		
		this->ReadMACAddress()
		this->SetMACAddress(this~>MAC)
		
		this->SetupReceive()
		this->SetupTransmit()

		EnableInterrupts()
		this->EnableInterrupts()

		; automatic speed detection, set link up
		this->Set(E1000_REGISTER_CTRL, E1000_CTRL_ASDE | E1000_CTRL_SLU)
		
		i32 Status := this->Read(E1000_REGISTER_STATUS)
		
		Print("E1000 setup done\n")
		Print(" Link is ")
		
		if (Status & E1000_STATUS_LU) {
			Print("UP\n")
		}
		else {
			Print("DOWN\n")
		}
		
		i8*[4] Speeds {"10 Mb/s", "100 Mb/s", "1000 Mb/s", "1000 Mb/s"}
		
		i32 Speed := (Status & E1000_STATUS_SPEED_MASK) >> E1000_STATUS_SPEED_SHIFT
		
		Print(" Speed: %s\n", Speeds[Speed])
		
		;this->Write(E1000_REGISTER_ICS, E1000_IMS_LSC)
	}
	
	define void Send(void* Data, i32 Size) {
		DisableInterrupts()
		
		i32 Head := this->Read(E1000_REGISTER_TXDESCHEAD)
		i32 Tail := this->Read(E1000_REGISTER_TXDESCTAIL)
		
		i32 Next := (Tail + 1) % E1000_BUFFER_COUNT
		
		E1000TransmitBuffer* Buffer := this->TransmitBuffers[Tail]
		
		Buffer->Status := 0
		Buffer->Length := Size As i16
		Buffer->Command := E1000_CMD_EOP | E1000_CMD_IFCS | E1000_CMD_RPS | E1000_CMD_RS
		
		MoveMemory(this->TransmitBuffersVirtual[Tail], Data, Size)
		
		this->Write(E1000_REGISTER_TXDESCTAIL, Next)
		
		EnableInterrupts()
		
		;loop {
		;	Info("Packet status %x, %x\n", Buffer->Status, Buffer->Command)
		;}
	}

	define void OnRecieve() {

		E1000ReceiveBuffer* Buffer := this->ReceiveBuffers[this->ReceiveIndex]

		while (Buffer->Status & E1000_RECEIVE_STATUS_DONE) {
			Buffer->Info()

			Buffer->Status := 0

			i32 Tail := this->ReceiveIndex
			this->ReceiveIndex := (this->ReceiveIndex + 1) % E1000_BUFFER_COUNT

			this->Write(E1000_REGISTER_RXDESCTAIL, Tail)

			Buffer := this->ReceiveBuffers[this->ReceiveIndex]
		}
	}

	define void ServiceInterrupt() {
		

	}
	
	static void ServiceInterrupt() {
		E1000* Current := RootE1000
		
		while (Current->Next != null) {
			Current := Current->Next
		}

		i32 ICR := Current->Read(E1000_REGISTER_ICR)
		
		Print("E1000 Interrupt on %x\n", Current)
		Print(" ICR: %x\n", ICR)

		Current->OnRecieve()

		if (ICR & E1000_IMS_RXT) {
			;Info("%hexdump", Current->ReceiveBuffersVirtual[0], 0x100)
		}

		LocalAPIC->EOI()
	}
	
	static void OnIRQ() asm {
		call, @InterruptSetup
		call, @E1000:ServiceInterrupt
		jmp, @InterruptReturn
	}
	
	define void Initialize(PCIeDevice* PCIe) {
		this->PCIe := PCIe

		if (RootE1000) {
			E1000* Current := RootE1000
			
			while (Current->Next != null) {
				Current := Current->Next
			}
			
			Current->Next := this
		}
		else {
			RootE1000 := this
			
			InsertIDTEntry(IRQToIDT(19), &E1000:OnIRQ, true)
			EnablePICLine(19, true)
		}
		
		;this~>PCI->Bus := Bus
		;this~>PCI->Slot := Slot
		;this~>PCI->Function := Function
		
		;Info("IRQ %i\n", this~>PCI->Read(PCI_HEADER_INTERRUPT_PIN))
		
		;this~>PCI->SetIRQ(9)
				
		i32 Size := this->PCIe->GetBARSize(0)
		i32 BAR0 := 0x7000_0000
		this->PCIe->WriteBAR(0, BAR0)
		
		Info("BAR0: %x, %x\n", BAR0, Size)

		if (BAR0 & PCI_BAR_IS_PORT) {
			this->UseMMIO := false
			this->IOBase := (BAR0 & PCI_BAR_PORT_MASK) As i16
		}
		else {
			this->UseMMIO := true
			this->MemoryBase := ((BAR0 As i64) & PCI_BAR_MEMORY_MASK) As void*
			
			i64 MMIOPhysicalPage := (this->MemoryBase As i64) / PAGE_SIZE
			i32 MMIOSize := Size / PAGE_SIZE
			
			KernelAddressSpace->MapRange(this->MemoryBase, MMIOPhysicalPage, MMIOSize, PAGE_PRESENT | PAGE_WRITE)
		}
	}
}