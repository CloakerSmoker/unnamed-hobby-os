
#Require "$/AVLTree.rlx"

i8 AML_WHILE_OP := 0xA2 As i8

struct AMLWhileLoop {
	i32 Length
	AMLTermArg* Condition
	i32 Count
	AMLTerm** Body
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("While (")
		this->Condition->Print()
		Print(") {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Body[Index])
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

i8 AML_IF_OP := 0xA0 As i8

struct AMLIfStatement {
	i32 Length
	AMLTermArg* Condition
	i32 Count
	AMLTerm** Body
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("If (")
		this->Condition->Print()
		Print(") {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Body[Index])
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

i8 AML_ELSE_OP := 0xA1 As i8

struct AMLElseStatement {
	i32 Length
	i32 Count
	AMLTerm** Body
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Else {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Body[Index])
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

i8 AML_RETURN_OP := 0xA4 As i8

struct AMLReturnStatement {
	AMLTermArg* Value
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Return ")
		this->Value->Print()
	}
}

struct AMLStatementOpcode {
	union {
		AMLIfStatement* IfStatement
		AMLElseStatement* ElseStatement
		AMLWhileLoop* WhileLoop
		AMLReturnStatement* ReturnStatement
	}
	
	i8 Kind
	
	define void Print(i32 Depth) {
		if (this->Kind = AML_IF_OP) {
			this->IfStatement->Print(Depth)
		}
		else if (this->Kind = AML_ELSE_OP) {
			this->ElseStatement->Print(Depth)
		}
		else if (this->Kind = AML_WHILE_OP) {
			this->WhileLoop->Print(Depth)
		}
		else if (this->Kind = AML_RETURN_OP) {
			this->ReturnStatement->Print(Depth)
		}
	}
}


struct AMLDefineRegion {
	AMLNameString* Name
	i8 AddressSpace
	AMLTermArg* Offset
	AMLTermArg* Length
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLDefineRegion ")
		this->Name->Print()
		Print(" %x { ", this->AddressSpace)
		this->Offset->Print()
		Print(", ")
		this->Length->Print()
		Print(" }")
	}
}


i8 AML_DEFINE_METHOD_COUNT_MASK := 0b0000_0_111

struct AMLMethod {
	i32 Length
	AMLNameString* Name
	i8 Flags
	i32 Count
	AMLTerm** Terms
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLMethod ")
		this->Name->Print()
		Print(" %x {\n", this->Flags)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Terms[Index])
			Print("\n")
		}

		Indent(Depth)
		Print("}")
	}
	
	define i32 ParameterCount() {
		return this->Flags & 0b0000_0_111
	}
}

i8 AML_FIELD_NAMED := 0
i8 AML_FIELD_RESERVED := 1
i8 AML_FIELD_ACCESS := 2
i8 AML_FIELD_EXT_ACCESS := 3
i8 AML_FIELD_CONNECT := 4

struct AMLNamedField {
	AMLNameString* Name
	i32 Length
	
	define void Print() {
		this->Name->Print()
		Print(": %x", this->Length)
	}
}

struct AMLField {
	i8 Kind
	
	union {
		AMLNamedField* Named
	}
	
	define void Print() {
		this->Named->Print()
	}
}

struct AMLDefineField {
	i32 Length
	AMLNameString* Name
	i8 Flags
	i32 Count
	AMLField** Fields
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLDefineField ")
		this->Name->Print()
		Print(" %x {\n", this->Flags)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Indent(Depth + 1)
			this->Fields[Index]->Print()
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

struct AMLDefineDevice {
	i32 Length
	AMLNameString* Name
	i32 Count
	AMLTerm** Terms
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLDefineDevice ")
		this->Name->Print()
		Print(" {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Terms[Index])
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

i8 AML_MEMBER_KIND_METHOD := 1
i8 AML_MEMBER_KIND_SCOPE := 2
i8 AML_MEMBER_KIND_DEVICE := 3

struct AMLScopeMember {
	union {
		AMLMethod* MethodValue
		AMLScope* ScopeValue
		AMLDefineDevice* DeviceValue
		void* Value
	}

	i32 NameSegment

	i8 Kind

	define void Print(i32 Depth) {
		if (this->Kind = AML_MEMBER_KIND_METHOD) {
			this->MethodValue->Print(Depth)
		}
		else if (this->Kind = AML_MEMBER_KIND_DEVICE) {
			this->DeviceValue->Print(Depth)
		}
	}
}

struct AMLScope {
	AMLScope* Parent
	
	i8 IsRoot
	i32 NameSegment

	AVLTree Members ; <i32, AMLScopeMember>
	
	define void Initialize(i8 IsRoot, i32 NameSegment) {
		this->IsRoot := IsRoot
		this->NameSegment := NameSegment
		
		this~>Members->ValueSize := #AMLScopeMember
	}

	define void AddOwnMember(i8 Kind, i32 NameSegment, void* Value) {
		AMLScopeMember Member {
			NameSegment: NameSegment,
			Kind: Kind,
			Value: Value
		}

		this~>Members->Insert(NameSegment, &Member)
	}

	define void* FindOwnMember(i8 Kind, i32 NameSegment) {
		AMLScopeMember* Member := this~>Members->Get(NameSegment)

		if (Member = null) {
			return null
		}

		if (Member->Kind != Kind) {
			return null
		}

		return Member->Value
	}

	define i8 HasOwnMember(i8 Kind, i32 NameSegment) {
		return this->FindOwnMember(Kind, NameSegment) != null
	}
	
	define void AddChildScope(AMLScope* Child) {
		Child->Parent := this

		this->AddOwnMember(AML_MEMBER_KIND_SCOPE, Child->NameSegment, Child)
	}
	
	static AMLScope* New() {
		AMLScope* this := Alloc(#AMLScope)
		
		this->Initialize(true, 0)
		
		return this
	}
	
	static AMLScope* New(AMLScope* Parent, i32 NameSegment) {
		AMLScope* this := Alloc(#AMLScope)
		
		this->Initialize(false, NameSegment)
		
		Parent->AddChildScope(this)
		
		return this
	}
	
	define AMLScope* FindChildScope(i32 NameSegment) {
		return this->FindOwnMember(AML_MEMBER_KIND_SCOPE, NameSegment)
	}
	
	define AMLScope* FindOrAddChildScope(i32 NameSegment) {
		AMLScope* Result := this->FindChildScope(NameSegment)
		
		if !(Result) {
			Result := AMLScope:New(this, NameSegment)
		}
		
		return Result
	}
	
	define void Print() {
		if (this->Parent) {
			this->Parent->Print()
			Print(".")
		}
		
		if (this->IsRoot) {
			Print("\\")
		}
		
		Print("%l", this->NameSegment)
	}

	define i8 HasMember(i8 Kind, i32 NameSegment) {
		AMLScope* Current := this

		while (Current) {
			if (Current->HasOwnMember(Kind, NameSegment)) {
				return true
			}

			Current := Current->Parent
		}

		return false
	}
	
	define void* FindMember(i8 Kind, i32 NameSegment) {
		AMLScope* Current := this
		
		while (Current) {
			void* Result := Current->FindOwnMember(Kind, NameSegment)
			
			if (Result) {
				return Result
			}
			
			Current := Current->Parent
		}
		
		return null
	}

	define void AddMember(i8 Kind, i32 NameSegment, void* Value) {
		this->AddOwnMember(Kind, NameSegment, Value)
	}
	

}

struct AMLDefineScope {
	i32 Length
	AMLNameString* Name
	i32 Count
	AMLTerm** Terms
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLScope ")
		this->Name->Print()
		Print(" {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Terms[Index])
			Print("\n")
		}
		
		Indent(Depth)
		Print("}")
	}
}

struct AMLDefineName {
	AMLNameString* Name
	AMLDataObject* Data
	
	define void Print(i32 Depth) {
		Indent(Depth)
		this->Name->Print()
		Print(": ")
		this->Data->Print()
	}
}

i8 AML_EXT_MUTEX_OP := 0x01

struct AMLDefineMutex {
	AMLNameString* Name
	i8 Info
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Mutex(")
		this->Name->Print()
		Print(", %x)", this->Info)
	}
}

i8 AML_EXT_ACQUIRE_OP := 0x23

struct AMLAcquireMutex {
	AMLSuperName* Name
	i16 Info
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Acquire(")
		this->Name->Print()
		Print(", %x)", this->Info)
	}
}

i8 AML_EXT_RELEASE_OP := 0x27

struct AMLReleaseMutex {
	AMLSuperName* Name
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Release(")
		this->Name->Print()
		Print(")")
	}
}

i8 AML_CREATE_DOUBLE_WORD_FIELD_OP := 0x8A As i8
i8 AML_CREATE_BYTE_FIELD_OP := 0x8C As i8

struct AMLCreateField {
	AMLTermArg* Buffer
	AMLTermArg* Offset
	AMLNameString* Name
	
	i8 Kind
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Create")
		
		if (this->Kind = AML_CREATE_BYTE_FIELD_OP) {
			Print("Byte")
		}
		else if (this->Kind = AML_CREATE_DOUBLE_WORD_FIELD_OP) {
			Print("DWord")
		}
		
		Print("Field(")
		PrintTermArg(this->Buffer)
		Print(", ")
		PrintTermArg(this->Offset)
		Print(", ")
		this->Name->Print()
		Print(")")
	}
}

i8 AML_NOTIFY_OP := 0x86 As i8

struct AMLNotify {
	AMLSuperName* Name
	AMLTermArg* Argument
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("Notify(")
		this->Name->Print()
		Print(", ")
		this->Argument->Print()
		Print(")")
	}
}

i8 AML_EXT_PROCESSOR_OP := 0x83 As i8

struct AMLDefineProcessor {
	i32 Length
	AMLNameString* Name
	i8 ProcessorID
	i32 BlockAddress
	i8 BlockLength
	
	i32 Count
	AMLTerm** Terms
	
	define void Print(i32 Depth) {
		Indent(Depth)
		Print("AMLDefineProcessor ")
		this->Name->Print()
		Print("(%x, %x, %x) {\n", this->ProcessorID, this->BlockAddress, this->BlockLength)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(Depth + 1, this->Terms[Index])
		}
		
		Indent(Depth)
		Print("}")
	}
	
}

i8 AML_CONTINUE_OP := 0x9F As i8
i8 AML_NO_OP := 0xA3 As i8
i8 AML_BREAK_OP := 0xA5 As i8

i8 AML_MAGIC_REPARSE_OP := 0x1

i8 AML_ALIAS_OP := 0x6
i8 AML_NAME_OP := 0x8
i8 AML_SCOPE_OP := 0x10
i8 AML_METHOD_OP := 0x14

i8 AML_EXT_REGION_OP := 0x80 As i8
i8 AML_EXT_FIELD_OP := 0x81 As i8
i8 AML_EXT_DEVICE_OP := 0x82 As i8

i8 AML_EXPRESSION_OP := 0x96 As i8
i8 AML_STATEMENT_OP := 0x97 As i8
i8 AML_FIELD_OP := 0x98 As i8

struct AMLTerm {
	union {
		AMLDefineRegion* Region
		AMLDefineField* Field
		AMLDefineScope* Scope

		AMLMethod* Method

		AMLExpressionOpcode* Expression
		AMLStatementOpcode* Statement
		AMLDefineDevice* Device
		AMLDefineName* Name
		AMLDefineMutex* Mutex
		AMLAcquireMutex* Acquire
		AMLReleaseMutex* Release
		AMLCreateField* CreateField
		AMLNotify* Notify
		AMLDefineProcessor* Processor
	}
	
	i8 Kind
	
	define void Print(i32 Depth) {
		if (this->Kind = AML_NAME_OP) {
			this->Name->Print(Depth)
		}
		else if (this->Kind = AML_SCOPE_OP) {
			this->Scope->Print(Depth)
		}
		else if (this->Kind = AML_METHOD_OP) {
			this->Method->Print(Depth)
		}
		else if (this->Kind = AML_EXPRESSION_OP) {
			Indent(Depth)
			this->Expression->Print()
		}
		else if (this->Kind = AML_STATEMENT_OP) {
			this->Statement->Print(Depth)
		}
		else if (this->Kind = AML_FIELD_OP) {
			this->CreateField->Print(Depth)
		}
		else if (this->Kind = AML_NOTIFY_OP) {
			this->Notify->Print(Depth)
		}
		else if (this->Kind = AML_CONTINUE_OP) {
			Indent(Depth)
			Print("Continue")
		}
		else if (this->Kind = AML_BREAK_OP) {
			Indent(Depth)
			Print("Break")
		}
		else if (this->Kind = AML_NO_OP) {
			Indent(Depth)
			Print("Noop")
		}
		else if (this->Kind = AML_EXT_MUTEX_OP) {
			this->Mutex->Print(Depth)
		}
		else if (this->Kind = AML_EXT_ACQUIRE_OP) {
			this->Acquire->Print(Depth)
		}
		else if (this->Kind = AML_EXT_RELEASE_OP) {
			this->Release->Print(Depth)
		}
		else if (this->Kind = AML_EXT_REGION_OP) {
			this->Region->Print(Depth)
		}
		else if (this->Kind = AML_EXT_FIELD_OP) {
			this->Field->Print(Depth)
		}
		else if (this->Kind = AML_EXT_DEVICE_OP) {
			this->Device->Print(Depth)
		}
		else if (this->Kind = AML_EXT_PROCESSOR_OP) {
			this->Processor->Print(Depth)
		}
	}
}

define void PrintTerm(i32 Depth, AMLTerm* Term) {
	Term->Print(Depth)
}