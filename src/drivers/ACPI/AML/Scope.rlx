
enum AML_SCOPE_KIND {
    NONE,
    ROOT,
    SCOPE,
    DEVICE
}

struct AMLScope {
    union {
        AMLDevice* Device

        void* Value
    }

    i32 NameSegment
    AML_SCOPE_KIND Kind

    AVLTree Children ; <i32, AMLScope*>

    define void Initialize() {
        this~>Members->ValueSize := #AMLScope
    }

    define void Initialize(i32 NameSegment, AML_SCOPE_KIND Kind, void* Value) {
		this->NameSegment := NameSegment
		this->Kind := Kind
        this->Value := Value
		
		this~>Members->ValueSize := #AMLScope
	}

    define void AddChild(i32 NameSegment, AML_SCOPE_KIND Kind, void* Value) {
        AMLScope Child

        ZeroMemory(&Child, #AMLScope)

        Child.Initialize(Kind, NameSegment, Value)

        this~>Children->Insert(NameSegment, &Child)
    }

    define AMLScope* FindOwnChild(i32 NameSegment) {
        return this~>Children->Get(NameSegment)
    }
    define i8 HasOwnChild(i32 NameSegment) {
        return this->FindChild(NameSegment) != null
    }

    define AMLScope* FindChild(i32 NameSegment) {
		AMLScope* Current := this
		
		while (Current) {
			AMLScope* Result := Current->FindOwnChild(NameSegment)
			
			if (Result) {
				return Result
			}
			
			Current := Current->Parent
		}
		
		return null
	}

    define i8 HasChild(i32 NameSegment) {
		AMLScope* Current := this

		while (Current) {
			if (Current->HasOwnChild(NameSegment)) {
				return true
			}

			Current := Current->Parent
		}

		return false
	}
}