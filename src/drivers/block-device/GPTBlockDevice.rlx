#Require "./src/drivers/GPT.rlx"
#Require "$/StringBase.rlx"

declare BlockDevicePrototype* GetGPTPartitionBlockDevicePrototype()

struct GPTPartitionBlockDeviceInstance {
	#Include "./src/drivers/block-device/BlockDeviceInstance.rlx"
	
	GPTPartitionEntry Entry
	i32 EntryIndex
	
	GPTDevice* GPTParent
	
	define void Read(i64 FirstBlock, i64 BlockCount, void* Buffer) {
		if (FirstBlock + BlockCount >= this~>Entry->EndingLBA) {
			Throw(BLOCK_DEVICE_READ_PAST_END)
		}
		
		this->Parent->Read(this~>Entry->StartingLBA + FirstBlock, BlockCount, Buffer)
	}
	define void Write(i64 FirstBlock, i64 BlockCount, void* Buffer) {
		if (FirstBlock + BlockCount >= this~>Entry->EndingLBA) {
			Throw(BLOCK_DEVICE_WRITE_PAST_END)
		}
		
		this->Parent->Write(this~>Entry->StartingLBA + FirstBlock, BlockCount, Buffer)
	}
	define i64 GetBytesPerBlock() {
		return 0x200
	}
	define void Initialize(i8** Options, i32 OptionCount) {
		;if (this->Parent->GetBytesPerBlock() != 0x200) {
		;	BlockDeviceInstance* OldParent := this->Parent
		;	
		;	this->Parent := InstantiateBlockDevice(OldParent, BlockSizeRemapperPrototype, "0x200")
		;}
		
		i32 Index := AToI(Options[0]) As i32
		
		GPTDevice* GPTParent := FindGPTDeviceBinding(this->Parent)
		
		if !(GPTParent) {
			GPTParent := Alloc(#GPTDevice)
			GPTParent->Device := this->Parent
			
			AddGPTDeviceBinding(this->Parent, GPTParent)
		}
		
		GPTParent->ReadHeader(1)
		
		MoveMemory(this~>Entry, GPTParent->ReadPartitionEntry(Index), #GPTPartitionEntry)
		
		this->GPTParent := GPTParent
	}
	
	static BlockDevice* New(BlockDevice* Parent, GPTPartitionEntry* Entry) {
		self* this := Alloc(#self)

		this->Prototype := GetGPTPartitionBlockDevicePrototype()
		this->Parent := Parent
		this->GPTParent := FindGPTDeviceBinding(Parent)

		MoveMemory(this~>Entry, Entry, #GPTPartitionEntry)

		return this As void*
	}
}

struct GPTBlockDevice {
	static BlockDevice* New(BlockDevice* Parent, GPTPartitionEntry* Entry) {
		return GPTPartitionBlockDeviceInstance:New(Parent, Entry)
	}
}

BlockDevicePrototype GPTPartitionBlockDevicePrototype {
	DataSize: #GPTPartitionBlockDeviceInstance,
	
	Read: &GPTPartitionBlockDeviceInstance.Read,
	Write: &GPTPartitionBlockDeviceInstance.Write,
	GetBytesPerBlock: &GPTPartitionBlockDeviceInstance.GetBytesPerBlock,
	Initialize: &GPTPartitionBlockDeviceInstance.Initialize,
	
	IsRoot: false,
	IsLeaf: false,
	
	Name: "GPT"
}

define BlockDevicePrototype* GetGPTPartitionBlockDevicePrototype() {
	return &GPTPartitionBlockDevicePrototype
}

i32 GPT_PARTITION_BLOCK_DEVICE_PROTOTYPE_ID := RegisterBlockDevicePrototype(&GPTPartitionBlockDevicePrototype)