
i32 PCIE_FUNCTIONS_PER_SLOT := 8
i32 PCIE_SLOTS_PER_BUS := 32
i32 PCIE_FUNCTIONS_PER_BUS := PCIE_SLOTS_PER_BUS * PCIE_FUNCTIONS_PER_SLOT

i32 PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE := 0x1000

i32 PCIE_BUS_CONFIGURATION_SPACE_SIZE := PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE * PCIE_FUNCTIONS_PER_BUS

i8 PCIE_HEADER_TYPE_MULTI_FUNCTION := 0x80 As i8

void* NextPCIeSegmentGroupAddress := ADDRESS_OF_PCIE_CONFIG

struct PCIeSegmentGroup {
    ACPI_MCFG_ENTRY* Entry
    
    union {
        void* RawBase
        i64 Base
    }

    i32 FirstBus
    i32 LastBus

    define i32 BusCount() {
        return (this->Entry->EndBusNumber As i32) - this->Entry->StartBusNumber
    }
    
    static self* New(ACPI_MCFG_ENTRY* Entry) {
        self* this := KernelHeapAllocate('PCIe_SG', #self)

        this->Entry := Entry

        this->Base := this->Entry->BaseAddress
        this->FirstBus := this->Entry->StartBusNumber
        this->LastBus := (this->Entry->EndBusNumber As i32) & 0xFF

        i32 Count := (this->LastBus - this->FirstBus) + 1

        Info("%i - %i, %i busses\n", this->FirstBus, this->LastBus, Count)

        this->RawBase := NextPCIeSegmentGroupAddress

        Info("%i * %i * %i = \n", Count, PCIE_FUNCTIONS_PER_BUS, PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE)
        
        i64 Size := Count * PCIE_FUNCTIONS_PER_BUS * PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE

        Info("Segment Group Size: %x (%x pages)\n", Size, Size / PAGE_SIZE)

        NextPCIeSegmentGroupAddress += Count * PCIE_BUS_CONFIGURATION_SPACE_SIZE

        ;loop {}

        KernelAddressSpace->MapRange(this->RawBase, this->Entry->BaseAddress / PAGE_SIZE, (Count * PCIE_BUS_CONFIGURATION_SPACE_SIZE) / PAGE_SIZE)

        return this
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot, i32 Function) {
        i32 BusIndex := Bus - this->FirstBus
        i64 FunctionIndex := (Slot * PCIE_FUNCTIONS_PER_SLOT) + Function

        i64 BusBase := this->Base + (BusIndex * PCIE_BUS_CONFIGURATION_SPACE_SIZE)
        i64 Base := BusBase + (FunctionIndex * PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE)

        return Base As PCIeDevice*
    }
}

struct PCIeSegmentGroupManager {
    PointerArray* SegmentGroups ; <PCIeSegmentGroup*>

    static self* New() {
        self* this := Alloc(#self)

        this->SegmentGroups := PointerArray:New()

        return this
    }

    define void AddSegmentGroup(PCIeSegmentGroup* Group) {
        this->SegmentGroups->Push(Group)
    }

    define PCIeDevice* Get(i32 SegmentGroup, i32 Bus, i32 Slot, i32 Function) {
        PCIeSegmentGroup* Group := this->SegmentGroups->At(SegmentGroup)

        return Group->Get(Bus, Slot, Function)
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot, i32 Function) {
        return this->Get(0, Bus, Slot, Function)
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot) {
        return this->Get(0, Bus, Slot, 0)
    }
}

PCIeSegmentGroupManager* PCIeManager := null

struct PCICapability {
    i8 ID
    i8 Next
    void[0] Data
}

i8 PCI_CAPABILITY_ID_MSI := 0x5

bits PCIMSIControlRegister As i16 {
    [0:1] Enable
    [1:3] MultipleMessageCapable
    [4:6] MultipleMessageEnable
    [7:8] LargeAddressCapable
    [8:9] PreVectorMaskingCapable
    [9:10] ExtendedMessageDataCapable
    [10:11] ExtendedMessageDataEnable

    define void Info() {
        if (this.Enable) {
            Info("E")
        }

        if (this.MultipleMessageCapable) {
            i32 VectorsRequested := 1 << this.MultipleMessageCapable

            Info("R(%i)", VectorsRequested)

            if (this.MultipleMessageEnable) {
                i32 VectorsAllocated := 1 << this.MultipleMessageEnable

                Info("A(%i)", VectorsAllocated)
            }
        }

        if (this.LargeAddressCapable) {
            Info("64")
        }

        if (this.PreVectorMaskingCapable) {
            Info("M")
        }

        if (this.ExtendedMessageDataCapable) {
            Info("D")

            if (this.ExtendedMessageDataEnable) {
                Info("+")
            }
        }
    }
}

i16 AMD64_MSI_ADDRESS_MAGIC := 0x0FEE

bits AMD64MessageAddressRegister As i32 {
    [1:2] DestinationMode
    [2:3] RedirectionHint
    [12:19] DestinationID
    [20:31] Magic

    i32 [0:31] Value
}

i8 AMD64_MSI_DATA_TRIGGER_EDGE := 0
i8 AMD64_MSI_DATA_TRIGGER_LEVEL := 1

i8 AMD64_MSI_DATA_LEVEL_MODE_DEASSERT := 0
i8 AMD64_MSI_DATA_LEVEL_MODE_ASSERT := 1

i8 AMD64_MSI_DELIVERY_MODE_FIXED := 0
i8 AMD64_MSI_DELIVERY_MODE_LOW_PRIORITY := 1
i8 AMD64_MSI_DELIVERY_MODE_SMI := 2
i8 AMD64_MSI_DELIVERY_MODE_NMI := 4
i8 AMD64_MSI_DELIVERY_MODE_INIT := 5

bits AMD64MessageAddressData As i16 {
    [0:7] Vector
    [8:10] DeliveryMode
    [13:14] LevelMode
    [14:15] TriggerMode

    i16 [0:15] Value
}

struct PCIMSICapability32Bit {
    PCICapability Header

    PCIMSIControlRegister Control

    i32 MessageAddress
    i16 MessageData

    ; if Control.ExtendedMessageDataCapable
    i16 ExtendedMessageData

    ; if Control.PreVectorMaskingCapable
    i32 MaskBits
    i32 PendingBits
}

struct PCIMSICapability64Bit {
    PCICapability Header

    PCIMSIControlRegister Control

    i32 MessageAddressLow
    i32 MessageAddressHigh

    i16 MessageData

    ; if Control.ExtendedMessageDataCapable
    i16 ExtendedMessageData

    ; if Control.PreVectorMaskingCapable
    i32 MaskBits
    i32 PendingBits

    define void Info() {
        Info("PCI MSI Capability {\n")
        Info("\tControl ")
        this->Control.Info()
        Info("\n")
        Info("\tAddressLow %x\n", this->MessageAddressLow)
        Info("\tAddressHigh %x\n", this->MessageAddressHigh)

        Info("\tData %x\n", this->MessageData)

        if (this->Control.ExtendedMessageDataEnable) {
            Info("\tExtended Data %x\n", this->ExtendedMessageData)
        }

        if (this->Control.PreVectorMaskingCapable) {
            Info("\tMask %x\n", this->MaskBits)
            Info("\tPending %x\n", this->PendingBits)
        }

        Info("}\n")
    }
}

struct PCIMSICapability {
    PCICapability Header

    PCIMSIControlRegister Control

    define void Info() {
        Info("PCI MSI Capability {\n")
        Info("\tControl ")
        this->Control.Info()
        Info("\n")
        Info("}\n")
    }
}

bits PCIeCapability As i32 {
    [0:15] ID
    [16:19] Version
    [20:31] Next

    define void Print() {
        Info("PCIeCapability{%x.%x, +%x}", this.ID, this.Version, this.Next)
    }
}

struct PCIeBridgeFields {
    i32 BAR0
    i32 BAR1

    i8 PrimaryBus
    i8 SecondaryBus
    i8 SubordinateBus

    i8 SecondaryLatency
    i8 IOBase
    i8 IOLimit

    i16 SecondaryStatus

    i16 MemoryBase
    i16 MemoryLimmit
    i16 PrefetchableMemoryBase
    i16 PrefetchableMemoryLimit
}

struct PCIType0Fields {
    i32[6] BAR
}

struct PCIeDevice {
    i16 VendorID
    i16 DeviceID
    i16 Command
    i16 Status
    i8 Revision
    i8 Interface

    i8 SubClass
    i8 ClassCode

    i8 CacheLineSize
    i8 LatencyTimer
    i8 HeaderType
    i8 SelfTest

    union {
        PCIeBridgeFields Bridge
        PCIType0Fields Type0
        i8[0x24] Padding
    }

    i8 CapabilitiesPointer

    i8[0xCE] Padding2

    PCIeCapability FirstCapability

    define PCICapability* PCICapabilityAt(i8 RawOffset) {
        i32 Offset := (RawOffset As i32) & 0xFF

        PCICapability* Result := ((this As i64) + Offset) As PCICapability*

        return Result
    }

    define PCICapability* FirstPCICapability() {
        return this->PCICapabilityAt(this->CapabilitiesPointer)
    }

    define PCICapability* NextPCICapability(PCICapability* Last) {
        return this->PCICapabilityAt(Last->Next)
    }

    define PCICapability* FindPCICapability(i8 ID) {
        PCICapability* Current := this->FirstPCICapability()

        loop {
            if (Current->ID = ID) {
                return Current
            }

            if (Current->Next = 0) {
                break
            }

            Current := this->NextPCICapability(Current)
        }

        return null
    }

    define void WriteBAR(i32 Index, i32 Value) {
        this~>Type0->BAR[Index] := Value
    }
    define i32 ReadBAR(i32 Index) {
        Print("ReadBar %i @ %x\n", Index, (&this~>Type0->BAR[Index]) - (this As i64))

        return this~>Type0->BAR[Index]
    }
    define i32 GetBARSize(i32 Index) {
        this->WriteBAR(Index, -1)
        return -this->ReadBAR(Index)
    }

    define i8 IsPresent() {
        return this->VendorID != 0xFFFF
    }

    declare void EnumerateAsDevice(i32, i32, void(i32, i32, i32, PCIeDevice*))

    define void EnumerateAsBus(i32 Bus, void(i32, i32, i32, PCIeDevice*) Visitor) {
        for (i32 Slot := 0, Slot < 32, Slot++) {
            PCIeDevice* Device := PCIeManager->Get(Bus, Slot, 0)

            if (Device->IsPresent()) {
                Device->EnumerateAsDevice(Bus, Slot, Visitor)
            }
        }
    }

    define void EnumerateAsFunction(i32 Bus, i32 Slot, i32 Function, void(i32, i32, i32, PCIeDevice*) Visitor) {
        Visitor(Bus, Slot, Function, this)

        if (this->ClassCode = PCI_CLASS_CODE_BRIDGE && this->SubClass = PCI_SUBCLASS_PCI_BRIDGE) {
            i32 SecondaryBus := this~>Bridge->SecondaryBus

            PCIeDevice* Secondary := PCIeManager->Get(SecondaryBus, 0, 0)

            Secondary->EnumerateAsBus(SecondaryBus, Visitor)
        }
    }

    define void EnumerateAsDevice(i32 Bus, i32 Slot, void(i32, i32, i32, PCIeDevice*) Visitor) {
        this->EnumerateAsFunction(Bus, Slot, 0, Visitor)

        if (this->HeaderType & PCIE_HEADER_TYPE_MULTI_FUNCTION) {
            for (i32 Function := 1, Function < 8, Function++) {
                PCIeDevice* Device := PCIeManager->Get(Bus, Slot, Function)

                if (Device->IsPresent()) {
                    Device->EnumerateAsFunction(Bus, Slot, Function, Visitor)
                }
            }
        }
    }
}

define void InitializePCIe(void(i32, i32, i32, PCIeDevice*) Visitor) {
    ACPI_MCFG_ENTRY* First := BootInfo->PCISegmentGroups[0]

	Info("Creating group\n")

	PCIeSegmentGroup* Group := PCIeSegmentGroup:New(First)

	Info("Adding to manager\n")

	PCIeManager := PCIeSegmentGroupManager:New()
	PCIeManager->AddSegmentGroup(Group)

	Info("Getting root complex\n")

	PCIeDevice* Root := PCIeManager->Get(0, 0, 0)

	Info("Enumerating root complex\n")

	Root->EnumerateAsBus(0, Visitor)
}