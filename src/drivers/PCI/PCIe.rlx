
i32 PCIE_FUNCTIONS_PER_SLOT := 8
i32 PCIE_SLOTS_PER_BUS := 32
i32 PCIE_FUNCTIONS_PER_BUS := PCIE_SLOTS_PER_BUS * PCIE_FUNCTIONS_PER_SLOT

i32 PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE := 0x1000

i32 PCIE_BUS_CONFIGURATION_SPACE_SIZE := PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE * PCIE_FUNCTIONS_PER_BUS

i8 PCIE_HEADER_TYPE_MULTI_FUNCTION := 0x80 As i8

void* NextPCIeSegmentGroupAddress := ADDRESS_OF_PCIE_CONFIG

struct PCIeSegmentGroup {
    ACPI_MCFG_ENTRY* Entry
    
    union {
        void* RawBase
        i64 Base
    }

    i32 FirstBus
    i32 LastBus

    define i32 BusCount() {
        return (this->Entry->EndBusNumber As i32) - this->Entry->StartBusNumber
    }
    
    static self* New(ACPI_MCFG_ENTRY* Entry) {
        self* this := KernelHeap->Allocate('PCIe_SG', #self)

        this->Entry := Entry

        this->Base := this->Entry->BaseAddress
        this->FirstBus := this->Entry->StartBusNumber
        this->LastBus := (this->Entry->EndBusNumber As i32) & 0xFF

        i32 Count := (this->LastBus - this->FirstBus) + 1

        Info("%i - %i, %i busses\n", this->FirstBus, this->LastBus, Count)

        this->RawBase := NextPCIeSegmentGroupAddress

        Info("%i * %i * %i = \n", Count, PCIE_FUNCTIONS_PER_BUS, PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE)
        
        i64 Size := Count * PCIE_FUNCTIONS_PER_BUS * PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE

        Info("Segment Group Size: %x (%x pages)\n", Size, Size / PAGE_SIZE)

        NextPCIeSegmentGroupAddress += Count * PCIE_BUS_CONFIGURATION_SPACE_SIZE

        ;loop {}

        KernelAddressSpace->MapRange(this->RawBase, this->Entry->BaseAddress / PAGE_SIZE, (Count * PCIE_BUS_CONFIGURATION_SPACE_SIZE) / PAGE_SIZE)

        return this
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot, i32 Function) {
        i32 BusIndex := Bus - this->FirstBus
        i64 FunctionIndex := (Slot * PCIE_FUNCTIONS_PER_SLOT) + Function

        i64 BusBase := this->Base + (BusIndex * PCIE_BUS_CONFIGURATION_SPACE_SIZE)
        i64 Base := BusBase + (FunctionIndex * PCIE_FUNCTION_CONFIGURATION_SPACE_SIZE)

        return Base As PCIeDevice*
    }
}

struct PCIeSegmentGroupManager {
    PointerArray* SegmentGroups ; <PCIeSegmentGroup*>

    static self* New() {
        self* this := Alloc(#self)

        this->SegmentGroups := PointerArray:New()

        return this
    }

    define void AddSegmentGroup(PCIeSegmentGroup* Group) {
        this->SegmentGroups->Push(Group)
    }

    define PCIeDevice* Get(i32 SegmentGroup, i32 Bus, i32 Slot, i32 Function) {
        PCIeSegmentGroup* Group := this->SegmentGroups->At(SegmentGroup)

        return Group->Get(Bus, Slot, Function)
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot, i32 Function) {
        return this->Get(0, Bus, Slot, Function)
    }

    define PCIeDevice* Get(i32 Bus, i32 Slot) {
        return this->Get(0, Bus, Slot, 0)
    }
}

PCIeSegmentGroupManager* PCIeManager := null

struct PCIeBridgeFields {
    i32 BAR0
    i32 BAR1

    i8 PrimaryBus
    i8 SecondaryBus
    i8 SubordinateBus
}

struct PCIeDevice {
    i16 VendorID
    i16 DeviceID
    i16 Command
    i16 Status
    i8 Revision
    i8 Interface

    i8 SubClass
    i8 ClassCode

    i8 CacheLineSize
    i8 LatencyTimer
    i8 HeaderType
    i8 SelfTest

    union {
        PCIeBridgeFields Bridge
    }

    define i8 IsPresent() {
        return this->VendorID != 0xFFFF
    }

    declare void EnumerateAsDevice(i32, i32, void(i32, i32, i32, PCIeDevice*))

    define void EnumerateAsBus(i32 Bus, void(i32, i32, i32, PCIeDevice*) Visitor) {
        for (i32 Slot := 0, Slot < 32, Slot++) {
            PCIeDevice* Device := PCIeManager->Get(Bus, Slot, 0)

            if (Device->IsPresent()) {
                Device->EnumerateAsDevice(Bus, Slot, Visitor)
            }
        }
    }

    define void EnumerateAsFunction(i32 Bus, i32 Slot, i32 Function, void(i32, i32, i32, PCIeDevice*) Visitor) {
        Visitor(Bus, Slot, Function, this)

        if (this->ClassCode = PCI_CLASS_CODE_BRIDGE && this->SubClass = PCI_SUBCLASS_PCI_BRIDGE) {
            i32 SecondaryBus := this~>Bridge->SecondaryBus

            PCIeDevice* Secondary := PCIeManager->Get(SecondaryBus, 0, 0)

            Secondary->EnumerateAsBus(SecondaryBus, Visitor)
        }
    }

    define void EnumerateAsDevice(i32 Bus, i32 Slot, void(i32, i32, i32, PCIeDevice*) Visitor) {
        this->EnumerateAsFunction(Bus, Slot, 0, Visitor)

        if (this->HeaderType & PCIE_HEADER_TYPE_MULTI_FUNCTION) {
            for (i32 Function := 1, Function < 8, Function++) {
                PCIeDevice* Device := PCIeManager->Get(Bus, Slot, Function)

                if (Device->IsPresent()) {
                    Device->EnumerateAsFunction(Bus, Slot, Function, Visitor)
                }
            }
        }
    }
}