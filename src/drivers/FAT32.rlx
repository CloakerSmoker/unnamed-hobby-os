#Require "./src/drivers/block-device/BlockDevice.rlx"

i8 FAT32_MEDIA_TYPE_FIXED := 0xF8 As i8
i8 FAT32_MEDIA_TYPE_REMOVABLE := 0xF0 As i8

i8 FAT32_SIGNATURE := 0x29
i8* FAT32_IDENTIFIER_STRING := "FAT32   "

struct FAT32BootSector unaligned {
	i8[3] JumpStub
	i8[8] OEMIdentitier
	
	i16 BytesPerSector
	i8 SectorsPerCluster
	
	i16 ReservedSectorCount
	i8 FATCount
	
	i16 DirectoryEntryCount
	i16 VolumeSectorCount
	
	i8 MediaDescriptorType
	
	i16 OldSectorsPerFAT
	i16 SectorsPerTrack
	i16 HeadCount
	
	i32 HiddenSectorCount
	i32 LargeSectorCount
	
	i32 SectorsPerFAT
	i16 Reserved1
	i16 Version
	
	i32 RootDirectoryCluster
	i16 FSInfoSector
	i16 BackupBootSector
	
	i8[12] Reserved2
	
	i8 DriveNumber
	i8 Reserved3
	i8 Signature
	
	i32 VolumeID
	i8[11] VolumeLabel
	i8[8] SystemIdentiferString
	
	i8[420] BootCode
	i8[2] BootMarker
}

i32 FAT32_INFO_FIRST_SIGNATURE := 0x41615252
i32 FAT32_INFO_SECOND_SIGNATURE := 0x61417272

struct FAT32Info {
	i32 FirstSignature
	i8[480] Reserved1
	i32 SecondSignature
	i32 LastKnownFreeSectorCount
	i32 FirstAvailableCluster
	i8[16] Reserved2
	i8[2] BootMarker
}

i32 FAT32_FAT_ENTRY_RESERVED_OR_EOF := 0x0FFF_FFFF
i32 FAT32_FAT_ENTRIES_PER_SECTOR := 0x80

i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_READ_ONLY := 1
i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_HIDDEN := 2
i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_SYSTEM := 4
i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_VOLUME_ID := 8
i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_DIRECTORY := 16
i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_ARCHIVE := 32

i8 FAT32_DIRECTORY_ENTRY_ATTRIBUTE_LONG_NAME := 0x0F

i8 FAT32_DIRECTORY_ENTRY_NAME_DELETED := 0xE5 As i8

struct FAT32DirectoryEntry {
	i8[11] Name
	i8 Attributes
	i8 Reserved
	
	i8 CreationTimeTenths
	i16 CreationTime
	i16 CreationDate
	i16 LastAccessDate
	
	i16 FirstClusterHigh
	
	i16 LastModificationTime
	i16 LastModificationDate
	
	i16 FirstClusterLow
	i32 FileSize
	
	define i8 IsDirectory() {
		return this->Attributes & FAT32_DIRECTORY_ENTRY_ATTRIBUTE_DIRECTORY
	}
	define i8 IsFile() {
		return !this->IsDirectory()
	}
	
	define i32 GetFirstCluster() {
		i32 High := ((this->FirstClusterHigh As i32) << 16) & 0xFFFF
		i32 Low := (this->FirstClusterLow As i32) & 0xFFFF
		
		return High | Low
	}
	define void SetFirstCluster(i32 First) {
		this->FirstClusterHigh := ((First >> 16) & 0xFFFF) As i16
		this->FirstClusterLow := (First & 0xFFFF) As i16
	}
	
	define i8 IsLongNameEntry() {
		return this->Attributes & FAT32_DIRECTORY_ENTRY_ATTRIBUTE_LONG_NAME = FAT32_DIRECTORY_ENTRY_ATTRIBUTE_LONG_NAME
	}
	
	define void GetName(i8* Out) {
		i32 NameLength := 0
		
		for (i32 Index := 0, Index < 8 && this~>Name[Index] != ' ', Index++) {
			NameLength++
		}
		
		i32 ExtensionLength := 0
		
		for (i32 Index := 8, Index < 11 && this~>Name[Index] != ' ', Index++) {
			ExtensionLength++
		}
		
		MoveMemory(Out, this~>Name, NameLength)
		
		i32 Length := NameLength
		
		if (ExtensionLength) {
			Out[NameLength] := '.'
			MoveMemory(&Out[NameLength + 1], &this~>Name[8], ExtensionLength)
			
			Length += 1 + ExtensionLength
		}
		
		Out[Length] := 0
	}
	
	define void SetName(i8* In) {
		i32 Length := StringLength(In)
		
		if (StringEquals(In, ".") || StringEquals(In, "..")) {
			MoveMemory(this->Name, In, Length)
			
			for (i32 Index := Length, Index < 11, Index++) {
				this->Name[Index] := ' '
			}
			
			return
		}
		
		i32 ExtensionIndex := Length
		i32 NameLength := Length
		
		for (i32 Index := 0, Index < Length, Index++) {
			if (In[Index] = '.') {
				ExtensionIndex := Index + 1
				NameLength := Index
			}
		}
		
		i32 ExtensionLength := Length - ExtensionIndex
		
		if (NameLength > 8) {
			NameLength := 8
		}
		
		MoveMemory(this~>Name, In, NameLength)
		
		if (NameLength < 8) {
			for (i32 Index := NameLength, Index < 8, Index++) {
				this~>Name[Index] := ' '
			}
		}
		
		if (ExtensionLength > 3) {
			ExtensionLength := 3
		}
		
		MoveMemory(&this~>Name[8], &In[ExtensionIndex], ExtensionLength)
		
		if (ExtensionLength < 3) {
			for (i32 Index := ExtensionIndex + ExtensionLength, Index < 11, Index++) {
				this~>Name[Index] := ' '
			}
		}
	}
	
	define i8 NameEquals(i8* Other) {
		if (CompareMemory(this~>Name, Other, 11)) {
			return true
		}
		
		i8[16] ExpandedName
		this->GetName(ExpandedName)
		
		return StringEquals(ExpandedName, Other)
	}
}
struct FAT32LongDirectoryEntry unaligned {
	i8 Order
	i16[5] FirstFive
	i8 Attributes
	i8 LongEntryType
	i8 Checksum
	i16[6] NextSix
	i16 Zero
	i16[2] LastTwo
}

struct FAT32DirectoryCluster {
	FAT32DirectoryEntry[16] Entries
	
	define FAT32DirectoryEntry* At(i32 Index) {
		return this->Entries[Index]
	}
}

struct FAT32Device {
	BlockDevice* Device
	
	FAT32BootSector RawHeader
	FAT32BootSector* Header
	
	FAT32Info RawInfo
	FAT32Info* Info
	
	FAT32DirectoryCluster RawTempDirectorySector
	FAT32DirectoryCluster* TempDirectorySector
	
	i32 FirstFATSector
	i32 FirstClusterSector
	i32 SectorsPerCluster
	i32 RootDirectoryCluster
	i32 ClusterCount
	i32 ClusterSize
	
	i32[0x80] CachedFATSector
	i32 CachedFATSectorNumber
	
	define FAT32Device* Initialize(BlockDevice* Device) {
		this->Device := Device
		
		this->Header := this~>RawHeader
		this->Info := this~>RawInfo
		this->TempDirectorySector := this~>RawTempDirectorySector
		
		this->CachedFATSectorNumber := -1
		
		return this
	}
	
	define FAT32BootSector* ReadHeader() {
		this->Device->Read(0, 1, this->Header)
		
		if (this->Header->LargeSectorCount != 0) {
			this->FirstFATSector := this->Header->ReservedSectorCount
			this->FirstClusterSector := this->FirstFATSector + (this->Header->FATCount * this->Header->SectorsPerFAT)
			this->SectorsPerCluster := this->Header->SectorsPerCluster
			this->RootDirectoryCluster := this->Header->RootDirectoryCluster
			this->ClusterCount := this->Header->SectorsPerFAT * FAT32_FAT_ENTRIES_PER_SECTOR
			this->ClusterSize := this->SectorsPerCluster * this->Header->BytesPerSector
		}
		
		return this->Header
	}
	define void WriteHeader() {
		this->Device->Write(0, 1, this->Header)
		this->Device->Write(this->Header->BackupBootSector, 1, this->Header)
	}
	
	define FAT32Info* ReadInfo() {
		this->Device->Read(this->Header->FSInfoSector, 1, this->Info)
		
		return this->Info
	}
	define void WriteInfo() {
		this->Device->Write(this->Header->FSInfoSector, 1, this->Info)
	}
	
	define void Sync() {
		this->WriteHeader()
		this->WriteInfo()
	}
	
	define i32 ClusterToSector(i32 Cluster) {
		return this->FirstClusterSector + (Cluster - 2) * this->SectorsPerCluster
	}
	
	define i32 ReadFAT(i32 Index) {
		i32 Sector := Index / FAT32_FAT_ENTRIES_PER_SECTOR
		i32 IndexInSector := Index % FAT32_FAT_ENTRIES_PER_SECTOR
		
		if (Sector != this->CachedFATSectorNumber) {
			this->CachedFATSectorNumber := Sector
			this->Device->Read(this->FirstFATSector + Sector, 1, this->CachedFATSector)
		}
		
		return this->CachedFATSector[IndexInSector]
	}
	
	define void WriteFAT(i32 FATNumber, i32 Index, i32 Link) {
		i32 FATBase := this->FirstFATSector + (FATNumber * this->Header->SectorsPerFAT)
		
		i32 Sector := Index / FAT32_FAT_ENTRIES_PER_SECTOR
		i32 IndexInSector := Index % FAT32_FAT_ENTRIES_PER_SECTOR
		
		if (Sector != this->CachedFATSectorNumber) {
			this->CachedFATSectorNumber := Sector
			this->Device->Read(FATBase + Sector, 1, this->CachedFATSector)
		}
		
		this->CachedFATSector[IndexInSector] := Link
		
		this->Device->Write(FATBase + Sector, 1, this->CachedFATSector)
	}
	
	define void WriteFAT(i32 Index, i32 Link) {
		this->WriteFAT(0, Index, Link)
		this->WriteFAT(1, Index, Link)
	}
	
	define i32 AllocateCluster() {
		for (i32 Index := 0, Index < this->ClusterCount, Index++) {
			if (this->ReadFAT(Index) = 0) {
				this->WriteFAT(Index, 0xFFFF_FFFF As i32)
				
				this->Info->FirstAvailableCluster := Index + 1
				this->Info->LastKnownFreeSectorCount -= 1
				
				this->WriteInfo()
				
				return Index
			}
		}
		
		return -1
	}
	
	define i32 AllocateChainedCluster(i32 Previous) {
		i32 Result := this->AllocateCluster()
		
		this->WriteFAT(Previous, Result)
		
		return Result
	}
	
	define i32 LookupClusterChain(i32 First, i32 Offset) {
		i32 Current := First
		
		for (i32 Index := 0, Index < Offset, Index++) {
			i32 Next := this->ReadFAT(Current)
			
			if (Next >= 0x0FFF_FFF7) {
				return -1
			}
			else {
				Current := Next
			}
		}
		
		return Current
	}
	
	define void ReadClusterData(i32 First, i32 Offset, void* Data) {
		i32 Cluster := this->LookupClusterChain(First, Offset)
		
		this->Device->Read(this->ClusterToSector(Cluster), 1, Data)
	}
	define void ReadClusterData(i32 Cluster, void* Data) {
		this->Device->Read(this->ClusterToSector(Cluster), 1, Data)
	}
	
	define void WriteClusterData(i32 First, i32 Offset, void* Data) {
		i32 Cluster := this->LookupClusterChain(First, Offset)
		
		this->Device->Write(this->ClusterToSector(Cluster), 1, Data)
	}
	define void WriteClusterData(i32 Cluster, void* Data) {
		this->Device->Write(this->ClusterToSector(Cluster), 1, Data)
	}
	
	define void WriteClusterData(i32 Cluster, void* Data, i32 Size) {
		i32 FullClusterCount := Size / this->ClusterSize
		
		i32 LastCluster := 0
		i32 CurrentCluster := Cluster
		
		for (i32 Index := 0, Index < FullClusterCount, Index++) {
			if (Index != 0) {
				CurrentCluster := this->AllocateChainedCluster(LastCluster)
			}
			
			this->WriteClusterData(CurrentCluster, Data)
			
			Data += this->ClusterSize
			LastCluster := CurrentCluster
		}
		
		i32 LastClusterSize := Size % this->ClusterSize
		
		if (LastClusterSize) {
			i8* LastClusterBuffer := Alloc(this->ClusterSize)
			MoveMemory(LastClusterBuffer, Data, LastClusterSize)
			
			if (Index != 0) {
				CurrentCluster := this->AllocateChainedCluster(LastCluster)
			}
			
			this->WriteClusterData(CurrentCluster, LastClusterBuffer)
			
			Free(LastClusterBuffer)
		}
	}
	
	define FAT32DirectoryEntry* GetDirectoryEntry(i32 DirectoryCluster, i32 EntryIndex) {
		i32 ClusterIndex := EntryIndex / 16
		i32 IndexInCluster := EntryIndex % 16
		
		this->ReadClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
		
		return this->TempDirectorySector->Entries[IndexInCluster]
	}
	
	define i32 StartWalkDirectory(i32 DirectoryCluster) {
		return 0
	}
	define FAT32DirectoryEntry* WalkDirectoryNext(i32 DirectoryCluster, i32* pWalkHandle) {
		i32 EntryIndex := *pWalkHandle
		
		i32 ClusterIndex := EntryIndex / 16
		i32 IndexInCluster := EntryIndex % 16
		
		this->ReadClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
		
		FAT32DirectoryEntry* Result := this->TempDirectorySector->Entries[IndexInCluster]
		
		if !(Result->Name[0]) {
			return null
		}
		
		*pWalkHandle += 1
		
		return Result
	}
	
	define i32 AddDirectoryEntry(i32 DirectoryCluster, FAT32DirectoryEntry* New) {
		i32 EntryIndex := 0
		
		loop {
			i32 ClusterIndex := EntryIndex / 16
			i32 IndexInCluster := EntryIndex % 16
			
			i32 Cluster := this->LookupClusterChain(DirectoryCluster, ClusterIndex)
			
			if (Cluster = -1) {
				i32 LastDirectoryCluster := this->LookupClusterChain(DirectoryCluster, ClusterIndex - 1)
				i32 NewDirectoryCluster := this->AllocateChainedCluster(LastDirectoryCluster)
				
				MoveMemory(this->TempDirectorySector->At(0), New, #FAT32DirectoryEntry)
				this->TempDirectorySector->At(1)->Name[0] := 0
				
				this->WriteClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
			}
			else {
				this->ReadClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
				
				FAT32DirectoryEntry* Next := this->TempDirectorySector->At(IndexInCluster)
				
				if (Next~>Name[0] = 0) {
					FAT32DirectoryEntry* TailEntry := this->TempDirectorySector->At(IndexInCluster)
					
					MoveMemory(TailEntry, New, #FAT32DirectoryEntry)
					
					this->WriteClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
				}
				else if (Next~>Name[0] = FAT32_DIRECTORY_ENTRY_NAME_DELETED) {
					MoveMemory(Next, New, #FAT32DirectoryEntry)
					
					this->WriteClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
				}
				else {
					EntryIndex += 1
					
					continue
				}
			}
			
			return EntryIndex
		}
		
		return -1
	}
	
	define i32 FindDirectoryEntryIndexByName(i32 DirectoryCluster, i8* Name) {
		i32 State := this->StartWalkDirectory(DirectoryCluster)
		
		loop {
			FAT32DirectoryEntry* NextEntry := this->WalkDirectoryNext(DirectoryCluster, &State)
			
			if (NextEntry = null) {
				return -1
			}
			else if (NextEntry->NameEquals(Name)) {
				return State - 1
			}
		}
		
		return -1
	}
	
	define void UpdateDirectoryEntry(i32 DirectoryCluster, i32 EntryIndex, FAT32DirectoryEntry* Entry) {
		i32 ClusterIndex := EntryIndex / 16
		i32 IndexInCluster := EntryIndex % 16
		
		MoveMemory(this->TempDirectorySector->At(IndexInCluster), Entry, #FAT32DirectoryEntry)
		
		this->WriteClusterData(DirectoryCluster, ClusterIndex, this->TempDirectorySector)
	}
	
	define void UpdateDirectoryEntry(i32 DirectoryCluster, i8* Name, FAT32DirectoryEntry* Entry) {
		this->UpdateDirectoryEntry(DirectoryCluster, this->FindDirectoryEntryIndexByName(DirectoryCluster, Name), Entry)
	}
	
	define FAT32DirectoryEntry* FindDirectoryEntryByName(i32 DirectoryCluster, i8* Name) {
		i32 State := this->StartWalkDirectory(DirectoryCluster)
		
		loop {
			FAT32DirectoryEntry* NextEntry := this->WalkDirectoryNext(DirectoryCluster, &State)
			
			if (NextEntry = null) {
				return null
			}
			else if (NextEntry->NameEquals(Name)) {
				return NextEntry
			}
		}
		
		return null
	}
	
	define FAT32DirectoryEntry* FindDirectoryEntryBySplitPath(i32 DirectoryCluster, i8** SplitPath, i32 SplitCount) {
		;Print("Looking up ")
		;
		;for (i32 I := 0, I < SplitCount, I += 1) {
		;	Print("%s", SplitPath[I])
		;	
		;	if (I + 1 != SplitCount) {
		;		Print("%c", '/')
		;	}
		;}
		
		SplitCount -= 1
		
		;Print("\nGot root directory, size = %x\n", RootDirectory->FileSizeLow)
		
		for (i32 Depth := 0, Depth <= SplitCount, Depth += 1) {
			FAT32DirectoryEntry* Next := this->FindDirectoryEntryByName(DirectoryCluster, SplitPath[Depth])
			
			if (Next = null) {
				return null
			}
			
			if (Depth = SplitCount) {
				return Next
			}
			
			DirectoryCluster := Next->GetFirstCluster()
		}
		
		return null
	}
	define FAT32DirectoryEntry* FindDirectoryEntryByPath(i32 DirectoryCluster, i8* Path) {
		i32 Length := StringLength(Path)
		
		loop {
			for (i32 Index := 0, Index < Length, Index += 1) {
				if (Path[Index] = '/') {
					Path[Index] := 0
					break
				}
			}
			
			;Print("Next '%s' %i\n", Path, Length)
			
			Length -= Index
			
			FAT32DirectoryEntry* Next := this->FindDirectoryEntryByName(DirectoryCluster, Path)
			
			if (Next = null) {
				return null
			}
			else if (Length = 0) {
				return Next
			}
			
			Path[Index] := '/'
			Path += Index + 1
			DirectoryCluster := Next->GetFirstCluster()
		}
		
		return null
	}
	
	union {
		i8[32] TempDirectoryEntryBuffer
		FAT32DirectoryEntry TempDirectoryEntry
	}
	
	define i32 MakeDirectoryEntry(i32 DirectoryCluster, i8* Name, i8 Attributes, i32 Size, i32 FirstCluster) {
		for (i32 Index := 0, Index < 32, Index++) {
			this->TempDirectoryEntryBuffer[Index] := 0
		}
		
		FAT32DirectoryEntry* New := this~>TempDirectoryEntry
		
		New->SetName(Name)
		New->SetFirstCluster(FirstCluster)
		New->Attributes := Attributes
		New->FileSize := Size
		
		return this->AddDirectoryEntry(DirectoryCluster, New)
	}
	define i32 MakeDirectoryEntry(i32 DirectoryCluster, i8* Name, i8 Attributes, i32 FirstCluster) {
		return this->MakeDirectoryEntry(DirectoryCluster, Name, Attributes, 0, FirstCluster)
	}
	define i32 MakeFile(i32 DirectoryCluster, i8* Name) {
		return this->MakeDirectoryEntry(DirectoryCluster, Name, 0, this->AllocateCluster())
	}
	define i32 MakeDirectory(i32 DirectoryCluster, i8* Name) {
		i32 NewDirectoryCluster := this->AllocateCluster()
		
		i32 Result := this->MakeDirectoryEntry(DirectoryCluster, Name, FAT32_DIRECTORY_ENTRY_ATTRIBUTE_DIRECTORY, NewDirectoryCluster)
		this->MakeDirectoryEntry(NewDirectoryCluster, ".", FAT32_DIRECTORY_ENTRY_ATTRIBUTE_DIRECTORY, NewDirectoryCluster)
		this->MakeDirectoryEntry(NewDirectoryCluster, "..", FAT32_DIRECTORY_ENTRY_ATTRIBUTE_DIRECTORY, 0)
		
		return Result
	}
	
	
	
	
	define void Format(i32 SectorCount) {
		i32 FATSectorCount := SectorCount / FAT32_FAT_ENTRIES_PER_SECTOR
		i32 ReservedSectorCount := 0x20
		
		i32 ClusterCount := SectorCount - ReservedSectorCount - (FATSectorCount * 2)
		
		i32 SectorsPerFAT := ClusterCount / FAT32_FAT_ENTRIES_PER_SECTOR
		
		Print("SectorCount    : %x\n", SectorCount)
		Print("FATSectorCount : %x\n", FATSectorCount)
		Print("ClusterCount   : %x\n", ClusterCount)
		Print("SectorsPerFAT  : %x\n", SectorsPerFAT)
		
		i32 FinalSector := SectorCount - 1
		
		this->Device->Write(FinalSector, 1, this->Header)
		
		MoveMemory(this->Header->OEMIdentitier, "FAT32rlx", 8)
		
		this->Header->BytesPerSector      := 0x200
		this->Header->SectorsPerCluster   := 1
		this->Header->ReservedSectorCount := ReservedSectorCount As i16
		this->Header->FATCount            := 2
		
		this->Header->MediaDescriptorType := FAT32_MEDIA_TYPE_FIXED
		
		this->Header->SectorsPerTrack := 0xF8 As i8
		this->Header->HeadCount       := 0x40
		
		this->Header->LargeSectorCount := ReservedSectorCount + (SectorsPerFAT * 2) + ClusterCount
		this->Header->SectorsPerFAT    := SectorsPerFAT
		
		this->Header->RootDirectoryCluster := 2
		this->Header->FSInfoSector         := 1
		this->Header->BackupBootSector     := 6
		
		this->Header->DriveNumber := 0x80 As i8
		this->Header->Signature   := FAT32_SIGNATURE
		this->Header->VolumeID    := 0x7613646D
		
		MoveMemory(this->Header->VolumeLabel, "NO NAME    ", 11)
		MoveMemory(this->Header->SystemIdentiferString, FAT32_IDENTIFIER_STRING, 8)
		
		this->Info->FirstSignature := FAT32_INFO_FIRST_SIGNATURE
		this->Info->SecondSignature := FAT32_INFO_SECOND_SIGNATURE
		this->Info->FirstAvailableCluster := 2
		this->Info->LastKnownFreeSectorCount := ClusterCount
		
		this->Sync()
		this->ReadHeader()
		
		this->WriteFAT(0, 0xFFFFF00 | FAT32_MEDIA_TYPE_FIXED)
		this->WriteFAT(1, FAT32_FAT_ENTRY_RESERVED_OR_EOF)
		this->WriteFAT(2, FAT32_FAT_ENTRY_RESERVED_OR_EOF)
	}
}