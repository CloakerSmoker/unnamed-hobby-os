i32 APIC_REGISTER_LOCAL_ID := 0x20
i32 APIC_REGISTER_LOCAL_VERSION := 0x30
i32 APIC_REGISTER_TASK_PRIORITY := 0x80
i32 APIC_REGISTER_ARBITRATION_PRIORITY := 0x90
i32 APIC_REGISTER_PROCESS_PRIORITY := 0xA0
i32 APIC_REGISTER_END_OF_INTERRUPT := 0xB0
i32 APIC_REGISTER_REMOTE_READ := 0xC0
i32 APIC_REGISTER_LOGICAL_DESTINATION := 0xD0
i32 APIC_REGISTER_DESTINATION_FORMAT := 0xE0
i32 APIC_REGISTER_SPURIOUS_VECTOR := 0xF0

i32 APIC_REGISTER_IN_SERVICE_BASE := 0x100
i32 APIC_REGISTER_IN_SERVICE_SIZE := 8

i32 APIC_REGISTER_TRIGGER_MODES_BASE := 0x180
i32 APIC_REGISTER_TRIGGER_MODES_SIZE := 8

i32 APIC_REGISTER_INTERRUPT_REQUEST_BASE := 0x200
i32 APIC_REGISTER_INTERRUPT_REQUEST_SIZE := 8

i32 APIC_REGISTER_ERROR_STATUS := 0x280
i32 APIC_REGISTER_MACHINE_CHECK := 0x2F0
i32 APIC_REGISTER_INTERRUPT_COMMAND_1 := 0x300
i32 APIC_REGISTER_INTERRUPT_COMMAND_2 := 0x310
i32 APIC_REGISTER_LVT_TIMER := 0x320
i32 APIC_REGISTER_LVT_THERMAL_SENSOR := 0x330
i32 APIC_REGISTER_LVT_PERFORMANCE := 0x340
i32 APIC_REGISTER_LVT_LINT0 := 0x350
i32 APIC_REGISTER_LVT_LINT1 := 0x360
i32 APIC_REGISTER_LVT_ERROR := 0x370
i32 APIC_REGISTER_TIMER_INITIAL := 0x380
i32 APIC_REGISTER_TIMER_COUNT := 0x390
i32 APIC_REGISTER_TIMER_DIVIDE := 0x3E0

i32 X64_MSR_APIC_BASE := 0x1b
i32 X64_MSR_APIC_BASE_ENABLE := 0x800
i64 X64_MSR_APIC_BASE_MASK := 0xFFFF_FFFF_FFFF_F000

i8 APIC_DELIVERY_MODE_SHIFT  := 7
i8 APIC_DELIVERY_MODE_FIXED  := 0b000
i8 APIC_DELIVERY_MODE_SMI    := 0b010
i8 APIC_DELIVERY_MODE_NMI    := 0b100
i8 APIC_DELIVERY_MODE_EXTINT := 0b111
i8 APIC_DELIVERY_MODE_INIT   := 0b101

i8 APIC_POLARITY_SHIFT       := 13
i8 APIC_POLARITY_ACTIVE_HIGH := 0
i8 APIC_POLARITY_ACTIVE_LOW  := 1

i8 APIC_TRIGGER_MODE_SHIFT := 15
i8 APIC_TRIGGER_MODE_EDGE  := 0
i8 APIC_TRIGGER_MODE_LEVEL := 1

i32 APIC_MASKED  := 1 << 16

declare void DisablePIC()

struct APIC {
	i8 IsEnabled
	
	union {
		void* MMIO
	}
	
	i32 ID
	
	define i64 GetBase() {
		return ReadMSR(X64_MSR_APIC_BASE) & X64_MSR_APIC_BASE_MASK
	}
	define void SetBase(i64 Base) {
		WriteMSR(X64_MSR_APIC_BASE, Base)
	}
	define void EnableHardware() {
		WriteMSR(X64_MSR_APIC_BASE, this->GetBase() | X64_MSR_APIC_BASE_ENABLE)
	}
	
	define void Write(i32 Address, i32 Value) {
		*((this->MMIO + Address) As i32*) := Value
	}
	define i32 Read(i32 Address) {
		return *((this->MMIO + Address) As i32*)
	}
	
	define void Set(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old | Mask)
	}
	define void Clear(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old & ~Mask)
	}
	
	define void EOI() {
		this->Write(APIC_REGISTER_END_OF_INTERRUPT, 0)
	}
	
	define i32 PackVector(i32 Vector, i8 DeliveryMode, i8 Polarity, i8 TriggerMode) {
		return Vector 
		    | (DeliveryMode << APIC_DELIVERY_MODE_SHIFT) 
		    | (Polarity << APIC_POLARITY_SHIFT) 
		    | (TriggerMode << APIC_TRIGGER_MODE_SHIFT)
	}
	
	define i32 MaskVector(i32 Old) {
		return Old | APIC_MASKED
	}
	define i32 UnmaskVector(i32 Old) {
		return Old & ~APIC_MASKED
	}
	
	define void WriteVector(i32 Address, i32 PackedVector) {
		this->Write(Address, PackedVector)
	}
	
	define void Setup() {
		this->EnableHardware()
		DisablePIC()
		
		this->ID := this->Read(APIC_REGISTER_LOCAL_ID)
		
		this->Set(APIC_REGISTER_SPURIOUS_VECTOR, 0x100)
		this->IsEnabled := true
	}
	
	define void Initialize() {
		i64 Base := this->GetBase()
		i64 BasePage := Base / PAGE_SIZE
		void* MMIO := Base As void*
		
		this->MMIO := MMIO
		
		Info("APIC @ %x\n", Base)
		
		KernelAddressSpace->MapRange(MMIO, BasePage, 1, PAGE_PRESENT | PAGE_WRITE)
	}
}

APIC RawAPIC
APIC* LocalAPIC := &RawAPIC

i32 IO_APIC_SELECTION := 0
i32 IO_APIC_WINDOW := 0x10

i64 IO_APIC_ENTRY_DESTINATION_MASK  := 0xFFFF_FFFF_0000_0000
i8  IO_APIC_ENTRY_DESTINATION_SHIFT := 56
i64 IO_APIC_ENTRY_VECTOR_MASK       := 0xFF
i8  IO_APIC_ENTRY_VECTOR_SHIFT      := 0

i32 IO_APIC_REGISTER_ID := 0
i32 IO_APIC_REGISTER_VERSION := 1
i32 IO_APIC_REGISTER_ARBITRATION_ID := 2

i32 IO_APIC_REGISTER_FIRST_IRQ := 0x10

bits IOAPICRedirection As i64 {
	[0:7] Vector
	[8:10] DeliveryMode
	[11] DestinationMode
	[12] DeliveryStatus
	[13] PinPolarity
	[14] RemoteIRR
	[15] TriggerMode
	[16] Mask
	[56:63] Destination

	define void Print() {
		Print("%B %B %B %B %B %B %B %B %B", this.Vector, this.DeliveryMode, this.DestinationMode, this.DeliveryStatus, this.PinPolarity, this.RemoteIRR, this.TriggerMode, this.Mask, this.Destination)
	}
}

struct IOAPIC {
	i64 PhysicalMMIO
	
	void* MMIO
	
	i32* Selection
	i32* Window
	
	i32 FirstInterrupt
	
	define void Write(i32 Address, i32 Value) {
		*this->Selection := Address
		*this->Window := Value
	}
	define i32 Read(i32 Address) {
		*this->Selection := Address
		return *this->Window
	}
	
	define void Set(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old | Mask)
	}
	define void Clear(i32 Address, i32 Mask) {
		i32 Old := this->Read(Address)
		
		this->Write(Address, Old & ~Mask)
	}
	
	define i32 IRQToOffset(i32 IRQ) {
		i32 Index := BootInfo->IRQMappings[IRQ]
		
		return 0x10 + (Index * 2)
	}
	
	define void WriteVector(i32 Index, i64 Value) {
		i32 Offset := this->IRQToOffset(Index)
		
		this->Write(Offset, (Value & 0xFFFF_FFFF) As i32)
		this->Write(Offset + 1, ((Value >> 32) & 0xFFFF_FFFF) As i32)
	}
	define i64 ReadVector(i32 Index) {
		i32 Offset := this->IRQToOffset(Index)
		
		return this->Read(Offset) | (this->Read(Offset + 1) << 32)
	}
	
	define void SetDestination(i32 Index, i32 APICID) {
		i64 Old := this->ReadVector(Index)
		
		Old &= IO_APIC_ENTRY_DESTINATION_MASK
		Old |= (APICID As i64) << IO_APIC_ENTRY_DESTINATION_SHIFT
		
		this->WriteVector(Index, Old)
	}
	
	define void SetVector(i32 Index, i32 Vector) {
		i64 Old := this->ReadVector(Index)
		
		Old &= IO_APIC_ENTRY_VECTOR_MASK
		Old |= (Vector As i64) << IO_APIC_ENTRY_VECTOR_SHIFT
		
		this->WriteVector(Index, Old)
	}
	
	define void ForwardInterrupt(i32 Index, i32 APICID, i32 Vector) {
		i64 Old := this->ReadVector(Index)
		
		Old &= IO_APIC_ENTRY_DESTINATION_MASK | IO_APIC_ENTRY_VECTOR_MASK
		Old |= (APICID As i64) << IO_APIC_ENTRY_DESTINATION_SHIFT
		Old |= (Vector As i64) << IO_APIC_ENTRY_VECTOR_SHIFT
		
		this->WriteVector(Index, Old)
	}

	define void DumpMappings() {
		i32 Version := this->Read(IO_APIC_REGISTER_VERSION)

		i32 MaxRedirectionEntry := (Version >> 16) & 0xFF

		Print("%i Total Redirection Entries:\n", MaxRedirectionEntry)

		for (i32 Index := 0, Index < MaxRedirectionEntry, Index++) {
			i64 Vector := this->ReadVector(Index)

			Print("Vector %i: ", Index)

			IOAPICRedirection Redirection := Vector As IOAPICRedirection

			Redirection.Print()
			Print("\n")
		}
	}
	
	define void Setup() {
		
	}
	
	define void Initialize(i64 PhysicalMMIO, i32 FirstInterrupt) {
		this->PhysicalMMIO := PhysicalMMIO
		this->MMIO := PhysicalMMIO As void*
		
		this->Selection := this->MMIO + IO_APIC_SELECTION
		this->Window    := this->MMIO + IO_APIC_WINDOW
		
		i64 PhysicalMMIOPage := this->PhysicalMMIO / PAGE_SIZE
		
		KernelAddressSpace->MapRange(this->MMIO, PhysicalMMIOPage, 1, PAGE_PRESENT | PAGE_WRITE)
	}
}

IOAPIC RawFirstIOAPIC
IOAPIC* FirstIOAPIC := &RawFirstIOAPIC