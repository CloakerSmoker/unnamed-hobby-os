

define i8 InB(i16 Port) asm {
	mov, dx, dix
	inb
	ret
}
define void OutB(i16 Port, i8 Data) asm {
	mov, dx, dix
	mov, a, si
	outb
	ret
}
define i16 InW(i16 Port) asm {
	mov, dx, dix
	inw
	ret
}
define void OutW(i16 Port, i16 Data) asm {
	mov, dx, dix
	mov, ax, six
	outw
	ret
}
define i32 InL(i16 Port) asm {
	mov, dx, dix
	emit, 0x67 ; addr32
	emit, 0xED ; inl
	ret
}
define void OutL(i16 Port, i32 Data) asm {
	mov, edx, edi
	mov, eax, esi
	emit, 0xEF ; outl
	ret
}

define void* GetRSP() asm {
	lea, rax, {rsp - 8} As i64*
	ret
}

define void WriteMSR(i64 Number, i64 Value) {
	i64 Low := Value & 0xFFFF_FFFF
	i64 High := (Value >> 32) & 0xFFFF_FFFF
	
	asm (rax := Low, rdx := High, rcx := Number) {
		wrmsr
	}
}

define i64 ReadMSR(i64 Number) {
	i64 Low := 0
	i64 High := 0
	
	asm (rdi := &Low, rsi := &High, rcx := Number) {
		rdmsr
		mov, {rdi} As i32*, eax
		mov, {rsi} As i32*, edx
	}
	
	return (High << 32) | Low
}

i64 AMD64_MSR_EFER   := 0xC0000080
i64 AMD64_MSR_STAR   := 0xC0000081
i64 AMD64_MSR_LSTAR  := 0xC0000082
i64 AMD64_MSR_CSTAR  := 0xC0000083
i64 AMD64_MSR_SFMASK := 0xC0000084

struct AMD64Context {
	union {
		void* RIP
		i64 RawRIP
	}
	
	union {
		i64 RBX
		i32 EBX
		i16 BX
	}
	union {
		i64 RCX
		i32 ECX
		i16 CX
	}
	
	union {
		i64 RDX
		i32 EDX
		i16 DX
	}
	
	union {
		void* RSP
		i64* Stack
		i64 RawRSP
	}
	
	i64 RBP
	
	union {
		i64 RSI
		i32 ESI
		i16 SI
	}
	
	union {
		i64 RDI
		i32 EDI
		i16 DI
	}
	
	union {
		i64 R8
		i32 R8D
		i16 R8W
	}
	
	union {
		i64 R9
		i32 R9D
		i16 R9W
	}
	
	union {
		i64 R10
		i32 R10D
		i16 R10W
	}
	
	i64 R11
	i64 R12
	i64 R13
	i64 R14
	i64 R15
	
	i64 Flags
	
	union {
		i64 RAX
		i32 EAX
		i16 AX
	}
	
	define AMD64Context* Zero() {
		FastSetMemory8(this, 0, #AMD64Context)
		
		return this
	}
	
	define void Push(i64 Value) {
		this->RSP -= 8
		*this->Stack := Value
	}
	define void Pop(i64* Destination) {
		*Destination := *this->Stack
		this->RSP += 8
	}
	
	define void* StackAllocate(i32 Size) {
		this->RSP -= Size
		return this->RSP
	}
	define void StackFree(i32 Size) {
		this->RSP += Size
	}
}

define i8 SaveContext(AMD64Context* Save) asm {
	pop, rax
	mov, {rdi} As i64*, rax
	
	mov, {rdi + 0x8 } As i64*, rbx
	mov, {rdi + 0x10} As i64*, rcx
	mov, {rdi + 0x18} As i64*, rdx
	mov, {rdi + 0x20} As i64*, rsp
	mov, {rdi + 0x28} As i64*, rbp
	mov, {rdi + 0x30} As i64*, rsi
	mov, {rdi + 0x38} As i64*, rdi
	
	mov, {rdi + 0x40} As i64*, r8
	mov, {rdi + 0x48} As i64*, r9
	mov, {rdi + 0x50} As i64*, r10
	mov, {rdi + 0x58} As i64*, r11
	mov, {rdi + 0x60} As i64*, r12
	mov, {rdi + 0x68} As i64*, r13
	mov, {rdi + 0x70} As i64*, r14
	mov, {rdi + 0x78} As i64*, r15
	
	emit, 0x48
	emit, 0x9C ; PUSHFQ
	pop, rbx
	mov, {rdi + 0x80} As i64*, rbx
	
	mov, rbx, 0
	xchg, rax, rbx
	
	jmp, rbx
}

define void RestoreFullContext(AMD64Context* Save) asm {
	; For when you don't want the function to "return" 1/0, and want an "original" value
	;  for RAX
	
	; Todo: Use AMD64Context.Whatever offsets instead of blind ones
	
	mov, rbp, {rdi + 0x28} As i64*
	
	mov, rbx, {rdi + 0x8 } As i64*
	mov, rcx, {rdi + 0x10} As i64*
	mov, rdx, {rdi + 0x18} As i64*
	mov, rsi, {rdi + 0x30} As i64*

	mov, r8 , {rdi + 0x40} As i64*
	mov, r9 , {rdi + 0x48} As i64*
	mov, r10, {rdi + 0x50} As i64*
	mov, r11, {rdi + 0x58} As i64*
	mov, r12, {rdi + 0x60} As i64*
	mov, r13, {rdi + 0x68} As i64*
	mov, r14, {rdi + 0x70} As i64*
	mov, r15, {rdi + 0x78} As i64*
	
	mov, rax, {rdi + 0x88} As i64* 
	
	; iret stack frame:
	;  void* RIP
	;  i64 CS
	;  i64 Flags
	;  void* RSP
	;  i64 DS
	
	; push, 0x10 ; kernel DS
	emit, 0x6A
	emit, 0x10
	
	push, {rdi + AMD64Context.RSP} As i64*
	
	push, {rdi + AMD64Context.Flags} As i64*
	
	; push, 0x8 ; kernel CS
	emit, 0x6A
	emit, 0x08
	
	push, {rdi + AMD64Context.RIP} As i64*
	
	mov, rdi, {rdi + 0x38} As i64* ; Restore RDI (everything left to restore is on the stack for iret)
	
	iret
}

define void RestoreFullUserContext(AMD64Context* Save) asm {
	; For when you don't want the function to "return" 1/0, and want an "original" value
	;  for RAX
	
	; Todo: Use AMD64Context.Whatever offsets instead of blind ones
	
	mov, rbp, {rdi + 0x28} As i64*
	
	mov, rbx, {rdi + 0x8 } As i64*
	mov, rcx, {rdi + 0x10} As i64*
	mov, rdx, {rdi + 0x18} As i64*
	mov, rsi, {rdi + 0x30} As i64*

	mov, r8 , {rdi + 0x40} As i64*
	mov, r9 , {rdi + 0x48} As i64*
	mov, r10, {rdi + 0x50} As i64*
	mov, r11, {rdi + 0x58} As i64*
	mov, r12, {rdi + 0x60} As i64*
	mov, r13, {rdi + 0x68} As i64*
	mov, r14, {rdi + 0x70} As i64*
	mov, r15, {rdi + 0x78} As i64*
	
	mov, rax, {rdi + 0x88} As i64* 
	
	; iret stack frame:
	;  void* RIP
	;  i64 CS
	;  i64 Flags
	;  void* RSP
	;  i64 DS
	
	; push, 0x20 | 3 ; User DS, RPL = 3
	emit, 0x6A
	emit, 0x23
	
	push, {rdi + AMD64Context.RSP} As i64*
	
	push, {rdi + AMD64Context.Flags} As i64*
	
	; push, 0x28 | 3 ; User CS, RPL = 3
	emit, 0x6A
	emit, 0x2B
	
	push, {rdi + AMD64Context.RIP} As i64*
	
	mov, rdi, {rdi + 0x38} As i64* ; Restore RDI (everything left to restore is on the stack for iret)
	
	iret
}

define void RestoreContext(AMD64Context* Save) asm {
	mov, rsp, {rdi + 0x20} As i64* ; Restore RSP/RBP
	mov, rbp, {rdi + 0x28} As i64* 
	
	push, {rdi} As i64* ; Push RIP onto the restored stack, so we can `ret` to it
	
	mov, rbx, {rdi + 0x8 } As i64*
	mov, rcx, {rdi + 0x10} As i64*
	mov, rdx, {rdi + 0x18} As i64*
	mov, rsi, {rdi + 0x30} As i64*

	mov, r8 , {rdi + 0x40} As i64*
	mov, r9 , {rdi + 0x48} As i64*
	mov, r10, {rdi + 0x50} As i64*
	mov, r11, {rdi + 0x58} As i64*
	mov, r12, {rdi + 0x60} As i64*
	mov, r13, {rdi + 0x68} As i64*
	mov, r14, {rdi + 0x70} As i64*
	mov, r15, {rdi + 0x78} As i64*
	
	push, {rdi + 0x80} As i64*
	emit, 0x48
	emit, 0x9D ; POPFQ
	
	mov, rdi, {rdi + 0x38} As i64*
	
	mov, rax, 1
	
	ret
}

define i64 GetCR2() asm {
	; mov, rax, cr2
	emit, 0x0F
	emit, 0x20
	emit, 0xD0
	
	ret
}

define void SetCR3(i64 PML4T, void* Continuation, void* Parameter) asm {
	movcr3, rdi
	mov, rdi, rdx
	jmp, rsi
}

i64 CR4_ENABLE_FS_GS_BASE := 1 << 16

define i64 GetCR4() asm {
	emit, 0x0F
	emit, 0x20
	emit, 0xE0
	ret
}
define void SetCR4(i64 Value) asm {
	emit, 0x0F
	emit, 0x22
	emit, 0xE7
	ret
}

define void SetGS(void* Value) asm {
	emit, 0xF3
	emit, 0x48
	emit, 0x0F
	emit, 0xAE
	emit, 0xDF
	ret
}
define void* GetGS() asm {
	emit, 0xF3
	emit, 0x48
	emit, 0x0F
	emit, 0xAE
	emit, 0xC8
	ret
}
define void SetFS(void* Value) asm {
	emit, 0xF3
	emit, 0x48
	emit, 0x0F
	emit, 0xAE
	emit, 0xD7
	ret
}
define void* GetFS() asm {
	emit, 0xF3
	emit, 0x48
	emit, 0x0F
	emit, 0xAE
	emit, 0xC0
	ret
}

define void InvalidatePage(void* Page) asm {
	emit, 0x0F
	emit, 0x01
	emit, 0x3F
	ret
}

define i32 ExtractByte(i64 Value, i8 ByteNumber) {
	return ((Value >> ((ByteNumber << 3) As i8)) & 0xFF) As i32
}

i64 X64_RFLAGS_IF := 0b10_0000_0000

define void DisableInterrupts() asm {
	cli
	ret
}
define void EnableInterrupts() asm {
	sti
	ret
}
define i64 GetFlags() asm {
	emit, 0x48
	emit, 0x9C ; PUSHFQ
	pop, rax
	ret
}
define i8 InterrupsAreEnabled() {
	return (GetFlags() & X64_RFLAGS_IF) != 0
}