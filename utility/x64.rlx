
define void FastMoveMemory(void* To, void* From, i64 Size) asm {
	mov, rcx, rdx
	
	cmp, rdi, rsi
	jlt, MoveDown
	
	dec, rdx
	add, rdi, rdx
	add, rsi, rdx
	
	std
	rep movsb
	
	ret
	
MoveDown:
	cld
	rep movsb
	
	ret
}

define void FastSetMemory8(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	rep stosb
	
	ret
}
define void FastSetMemory16(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	rep stosw
	
	ret
}
define void FastSetMemory32(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	rep stosd
	
	ret
}
define void FastSetMemory64(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	rep stosq
	
	ret
}

define i8 InB(i16 Port) asm {
	mov, dx, dix
	inb
	ret
}
define void OutB(i16 Port, i8 Data) asm {
	mov, dx, dix
	mov, a, si
	outb
	ret
}
define i16 InW(i16 Port) asm {
	mov, dx, dix
	inw
	ret
}
define void OutW(i16 Port, i16 Data) asm {
	mov, dx, dix
	mov, ax, six
	outw
	ret
}

define void* GetRSP() asm {
	lea, rax, {rsp - 8} As i64*
	ret
}
define i64* GetRBP() asm {
	mov, rax, rbp
	ret
}

define void WriteMSR(i64 Number, i64 Value) {
	i64 Low := Value & 0xFFFF_FFFF
	i64 High := (Value >> 32) & 0xFFFF_FFFF
	
	asm (rax := Low, rdx := High, rcx := Number) {
		wrmsr
	}
}

define i64 ReadMSR(i64 Number) {
	i64 Low := 0
	i64 High := 0
	
	asm (rdi := &Low, rsi := &High, rcx := Number) {
		rdmsr
		mov, {rdi} As i32*, eax
		mov, {rsi} As i32*, edx
	}
	
	return (High << 32) | Low
}

i64 AMD64_MSR_EFER   := 0xC0000080
i64 AMD64_MSR_STAR   := 0xC0000081
i64 AMD64_MSR_LSTAR  := 0xC0000082
i64 AMD64_MSR_CSTAR  := 0xC0000083
i64 AMD64_MSR_SFMASK := 0xC0000084