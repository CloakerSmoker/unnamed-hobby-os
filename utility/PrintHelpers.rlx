define void DoHexDumpPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i8* Data := Parameters[*ParameterIndex] As i8*
	i32 Size := Parameters[*ParameterIndex + 1] As i32
	
	i32 FullRows := Size / 16
	i32 RemainderRow := Size % 16
	
	;this->Print("%x %x\n", FullRows, RemainderRow)
	
	if (RemainderRow) {
		FullRows += 1
	}
	
	this->Print("   |  ")
	
	for (i32 Column := 0, Column < 16, Column++) {
		this->Print("%B ", Column)
	}
	
	this->Print(" |\n")
	
	this->Print("   |--")
	
	for (i32 Column := 0, Column < 16, Column++) {
		this->Print("---")
	}
	
	this->Print("-|\n")

	for (i32 Row := 0, Row < FullRows, Row++) {
		this->Print("%B |  ", Row)
		
		i32 Columns := 16
		
		if (Row + 1 = FullRows && RemainderRow) {
			Columns := RemainderRow
		}
		
		for (i32 Column := 0, Column < Columns, Column++) {
			i8 Byte := Data[(Row * 16) + Column]
			
			this->Print("%B ", Byte)
		}
		
		for (i32 Padding := Column, Padding < 16, Padding++) {
			this->Print("   ")
		}
		
		this->Print(" | ")
		
		for (i32 Column := 0, Column < Columns, Column++) {
			i8 Byte := Data[(Row * 16) + Column]
			
			if (Byte >= '!' && Byte <= '~') {
				this->Print("%c", Byte)
			}
			else {
				this->Print(".")
			}
		}
		
		this->Print("\n")
	}
	
	*ParameterIndex += 2
}

PrintFormatPrototype HexDumpFormatPrototype {
	Name: "hexdump",
	Format: &DoHexDumpPrint
}

i32 HEX_DUMP_FORMAT_PROTOTYPE_ID := AddPrintFormat(&HexDumpFormatPrototype)

#Require "./src/utility/x64.rlx"

define void DoStackDumpPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i32 IgnoreFrames := 2
	
	StackFrame* Last := GetRBP() As StackFrame*
	i32 Index := 1
	
	while (Last) {
		if (Last->LastFrame & 1) {
			StackFrame* Temp := Last->LastFrame - 1
			
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				this->Print("	Stack[%i] Try catch address = %x\n", Index, Last->ReturnAddress, Temp)
				Index += 1
			}
			
			Last := Temp
		}
		else {
			if (IgnoreFrames) {
				IgnoreFrames -= 1
			}
			else {
				i64* MaybeMagic := (Last - 0x8) As i64*
				i8** MaybeName := (Last - 0x10) As i8**
				
				if (Debug && *MaybeMagic = 0x12345678) {
					this->Print("	Stack[%i] Fn = %s\n", Index, *MaybeName)
				}
				else {
					this->Print("	Stack[%i] Fn callsite = %x\n", Index, Last->ReturnAddress, Last->LastFrame)
				}
				
				Index += 1
			}
			
			Last := Last->LastFrame
		}
	}
}

PrintFormatPrototype StackDumpFormatPrototype {
	Name: "stackdump",
	Format: &DoStackDumpPrint
}

i32 STACK_DUMP_FORMAT_PROTOTYPE_ID := AddPrintFormat(&StackDumpFormatPrototype)