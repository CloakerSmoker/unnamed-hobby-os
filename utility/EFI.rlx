
struct EFI_GUID {
	i32 Data1
	i16 Data2
	i16 Data3
	i8[8] Data4
}

struct EFI_TABLE_HEADER {
	i64 Signature
	i32 Revision
	i32 HeaderSize
	i32 Checksum
	i32 Reserved
}

struct SIMPLE_INPUT_INTERFACE {
	void* Reset
	void* ReadKeyStroke
	void* WaitForKey

}

struct SIMPLE_TEXT_OUTPUT_MODE {
	i32 MaxMode
	i32 Mode
	i32 Attribute
	i32 CursorColumn
	i32 CursorRow
	i8 CursorVisible
}

struct SIMPLE_TEXT_OUTPUT_INTERFACE {
	void* _Reset
	void* _OutputString
	void* _TestString
	void* _QueryMode
	void* _SetMode
	void* _SetAttribute
	void* _ClearScreen
	void* _SetCursorPosition
	void* _EnableCursor

	SIMPLE_TEXT_OUTPUT_MODE* Mode

	define i64 OutputString(i16* String) x64 {
		asm (rcx := this, rdx := String, r10 := this->_OutputString) {
			push, rbx
			push, rbx
			push, rbx
			push, rbx
			
			call, r10
			
			pop, rbx
			pop, rbx
			pop, rbx
			pop, rbx
		}
		
		return 0
	}
}

struct EFI_RUNTIME_SERVICES {
	EFI_TABLE_HEADER Header

	void* GetTime
	void* SetTime
	void* GetWakeupTime
	void* SetWakeupTime

	void* SetVirtualAddressMap
	void* ConvertPointer

	void* GetVariable
	void* GetNextVariableName
	void* SetVariable

	void* GetNextHighMonotonicCount
	void* ResetSystem

	void* UpdateCapsule
	void* QueryCapsuleCapabilities
	void* QueryVariableInfo
}

struct EFI_BOOT_SERVICES {
	EFI_TABLE_HEADER Header

	void* RaiseTPL
    void* RestoreTPL

    void* AllocatePages
    void* FreePages
    void* GetMemoryMap
    void* AllocatePool
    void* FreePool

    void* CreateEvent
    void* SetTimer
    void* WaitForEvent
    void* SignalEvent
    void* CloseEvent
    void* CheckEvent

    void* InstallProtocolInterface
    void* ReinstallProtocolInterface
    void* UninstallProtocolInterface
    void* HandleProtocol
    void* PCHandleProtocol
    void* RegisterProtocolNotify
    void* LocateHandle
    void* LocateDevicePath
    void* InstallConfigurationTable

    void* LoadImage
    void* StartImage
    void* Exit
    void* UnloadImage
    void* ExitBootServices

    void* GetNextMonotonicCount
    void* Stall
    void* SetWatchdogTimer

    void* ConnectController
    void* DisconnectController

    void* OpenProtocol
    void* CloseProtocol
    void* OpenProtocolInformation

    void* ProtocolsPerHandle
    void* LocateHandleBuffer
    void* LocateProtocol
    void* InstallMultipleProtocolInterfaces
    void* UninstallMultipleProtocolInterfaces

    void* CalculateCrc32

    void* CopyMem
    void* SetMem
    void* CreateEventEx
}

struct EFI_CONFIGURATION_TABLE {
	EFI_GUID VendorGUID
	void* VendorTable
}

struct EFI_SYSTEM_TABLE {
	EFI_TABLE_HEADER Header
	
	i16* FirmwareVender
	i32 FirmwareRevision
	
	void* ConsoleInputHandle
	SIMPLE_INPUT_INTERFACE* ConsoleInput

	void* ConsoleOutputHandle
	SIMPLE_TEXT_OUTPUT_INTERFACE* ConsoleOutput

	void* StandardErrorHandle
	SIMPLE_TEXT_OUTPUT_INTERFACE* StandardError

	i32 NumberOfTableEntries
	EFI_CONFIGURATION_TABLE* ConfigurationTable
}