struct FNTCharacterTableEntry2 unaligned {
	i16 CharacterWidth
	i16 RawBitmapOffset
	
	define i32 BitmapOffset() {
		return (this->RawBitmapOffset As i32) & 0xFFFF
	}
}

struct FNTCharacterTableEntry3 unaligned {
	i16 CharacterWidth
	i32 BitmapOffset
}

i16 FNT_VERSION_2 := 0x200
i16 FNT_VERSION_3 := 0x300

i16 FNT_TYPE_USE_BITMAP_OFFSET := 0b0000_0100
i32 FNT_FLAG_IS_FIXED := 1

struct FNTHeader unaligned {
	i16 Version
	i32 TotalSize
	i8[62] Copyright
	i16 Type
	
	i16 NominalPointSize
	i16 NominalVerticalResolution
	i16 NominalHorizontalResolution
	
	i16 Ascent
	
	i8 InternalLeading
	i8 ExternalLeading
	
	i8 IsItalic
	i8 IsUnderlined
	i8 IsStrikethrough
	
	i16 Weight
	
	i8 CharacterSet
	
	i16 PixelWidth
	i16 PixelHeight
	
	i8 PitchAndFamily
	
	i16 AverageWidth
	i16 MaxWidth
	
	i8 FirstCharacter
	i8 LastCharacter
	i8 DefaultCharacter
	i8 BreakCharacter
	
	i16 WidthBytes
	i32 DeviceNameOffset
	i32 FaceNameOffset
	i32 Reserved1
	i32 BitmapOffset
	
	i8 Reserved2
	
	union {
		void[0] CharacterTable2
		i32 Flags
	}
	
	i16 GlobalASpace
	i16 GlobalBSpace
	i16 GlobalCSpace
	
	i32 ColorTableOffset
	
	i8[16] Reserved3
	
	void[0] CharacterTable3
	
	define void* CharacterTable() {
		if (this->Version = FNT_VERSION_2) {
			return this->CharacterTable2
		}
		else if (this->Version = FNT_VERSION_3) {
			return this->CharacterTable3
		}
		
		return null
	}
	
	define i32 CharacterCount() {
		i32 Start := *(this~>FirstCharacter As i32*) & 0xFF
		i32 End := *(this~>LastCharacter As i32*) & 0xFF
		
		return End - Start
	}
	
	define i32 Start() {
		return *(this~>FirstCharacter As i32*) & 0xFF
	}
	define i32 End() {
		return *(this~>LastCharacter As i32*) & 0xFF
	}
	
	define i8* GetCharacterData(i32 Index) {
		if (this->Version = FNT_VERSION_2) {
			FNTCharacterTableEntry2* Entry2 := this->CharacterTable() + (Index * #FNTCharacterTableEntry2)
			
			return (this As void*) + Entry2->BitmapOffset()
		}
		else if (this->Version = FNT_VERSION_3) {
			FNTCharacterTableEntry3* Entry3 := this->CharacterTable() + (Index * #FNTCharacterTableEntry3)
			
			return (this As void*) + Entry3->BitmapOffset
		}
		
		return null
	}
}

