i32 ELF_MAGIC               := 0x464C457F ; 0x7f 'ELF' magic
i8  ELF_BITNESS_64          := 2          ; 1 = 32 bit, 2 = 64 bit
i8  ELF_ENDIAN_LITTLE       := 1          ; 1 = Little endian
i8  ELF_ABI_SYSTEMV         := 0          ; 0 = SystemV
i8  ELF_ABI_VERSION_SYSTEMV := 0
i16 ELF_FILETYPE_EXECUTABLE := 0x02
i16 ELF_MACHINE_AMD64       := 0x3E
i32 ELF_VERSION             := 1

i64 ELF_ALIGN_NONE := 0 ; Used for both segments and sections

i32 ELF_SEGMENT_FLAGS_EXECUTE := 1
i32 ELF_SEGMENT_FLAGS_WRITE   := 2
i32 ELF_SEGMENT_FLAGS_READ    := 4

i32 ELF_SEGMENT_TYPE_LOAD := 0x01
i32 ELF_SEGMENT_TYPE_PHDR := 0x06

struct ELFProgramHeader {
	i32 Type
	i32 Flags
	i64 FileOffset
	i64 VirtualAddress
	i64 PhysicalAddress
	i64 FileSize
	i64 MemorySize
	i64 Alignment
}

i32 ELF_SECTION_TYPE_DATA         := 0x01
i32 ELF_SECTION_TYPE_STRING_TABLE := 0x03
i32 ELF_SECTION_TYPE_NODATA       := 0x08

i64 ELF_SECTION_FLAGS_WRITE    := 0x01
i64 ELF_SECTION_FLAGS_ALLOCATE := 0x02
i64 ELF_SECTION_FLAGS_EXECUTE  := 0x04
i64 ELF_SECTION_FLAGS_STRINGS  := 0x20

struct ELFSectionHeader {
	i32 NameOffset
	i32 Type
	i64 Flags
	i64 VirtualAddress
	i64 FileOffset
	i64 FileSize
	i32 AssociatedSectionIndex
	i32 ExtraInfo
	i64 Alignment
	i64 EntrySize
}

struct ELFHeader unaligned {
	i32 Magic
	i8 Bitness
	i8 Endianness
	i8 UseCurrentVersion
	i8 ABI
	
	union {
		; This byte is followed by 7 unused ones, so we pad out to the correct offset with this union

		i8 ABIVersion
		i64 Unused
	}
	
	i16 FileType
	i16 MachineType
	
	i32 ELFVersion
	i64 EntryPoint

	i64 ProgramHeadersOffset
	i64 SectionHeadersOffset

	i32 Flags
	i16 HeaderSize

	i16 ProgramHeaderSize
	i16 ProgramHeaderEntryCount
	i16 SectionHeaderSize
	i16 SectionHeaderEntryCount

	i16 SectionNameSectionIndex
	
	define ELFProgramHeader* GetProgramHeaders() {
		return (this + this->ProgramHeadersOffset) As ELFProgramHeader*
	}
	define ELFSectionHeader* GetSectionHeaders() {
		return (this + this->SectionHeadersOffset) As ELFSectionHeader*
	}
}

struct ELFReader {
	union {
		void* Data
		ELFHeader* Header
	}
	
	i32 Size

	
	define void* Load() {
		ELFProgramHeader* ProgramHeaders := this->Header->GetProgramHeaders()
		
		for (i32 Index := 0, Index < this->Header->ProgramHeaderEntryCount, Index++) {
			ELFProgramHeader* Next := ProgramHeaders[Index]
			
			if (Next->Type = ELF_SEGMENT_TYPE_LOAD) {
				void* SectionData := this->Data + Next->FileOffset
				void* SectionMemory := null + Next->VirtualAddress
				
				if (Next->MemorySize > Next->FileSize) {
					void* ZeroArea := SectionMemory + Next->FileSize
					i64 ZeroSize := Next->MemorySize - Next->FileSize
					
					FastSetMemory8(ZeroArea, 0, ZeroSize)
				}
				
				FastMoveMemory(SectionMemory, SectionData, Next->FileSize)
			}
		}
		
		return null + this->Header->EntryPoint
	}
}