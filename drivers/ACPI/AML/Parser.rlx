#Require "./src/drivers/ACPI/AML/Expressions.rlx"
#Require "./src/drivers/ACPI/AML/Terms.rlx"

i64 AML_INVALID_SYNTAX := 'AML_USUK'

struct AMLParser {
	
	union {
		void* RawBuffer
		i8* Buffer
	}
	
	i32 Index
	i32 Length
	
	define i8 IsAtEnd() {
		return this->Index >= this->Length
	}
	
	define i8 Peek() {
		return this->Buffer[this->Index]
	}

	define i8 Next() {
		return this->Buffer[this->Index++]
	}
	
	define i8 NextMatches(i8 Value) {
		if (this->Peek() = Value) {
			this->Next()
			
			return true
		}
		
		return false
	}
	
	AMLScope* CurrentScope
	
	define void Fail() {
		if (this->CurrentScope) {
			Print("In scope ")
			this->CurrentScope->Name->Print()
			Print("\n")
		}
		
		Print("At byte %x\n", this->Index)
		
		for (i32 Index := this->Index - 10, Index < this->Index + 10, Index++) {
			Print("%c", this->Buffer[Index])
		}
		
		Throw(AML_INVALID_SYNTAX)
	}
	define void Fail(i8* Reason, i8 Unknown) {
		Print("%s\n", Reason)
		Print("%x '%c'\n", (Unknown As i32) & 0xFF, Unknown)
		this->Fail()
	}
	
	define void EnterScope(AMLScope* New, AMLNameString* Name) {
		New->Initialize(Name)
		
		if (this->CurrentScope) {
			this->CurrentScope->AddChild(New)
		}
		
		this->CurrentScope := New
	}
	define void ExitScope() {
		this->CurrentScope := this->CurrentScope->Parent
	}
	
	define i32 ParsePackageLength() {
		i8 First := this->Next()
		i32 Length := (First & 0b11_00_0000) >> 6
		i32 Value := First & 0b00_00_1111
		
		if (Length = 0) {
			Value |= First & 0b00_11_0000
		}
		
		for (i32 Index := 0, Index < Length, Index++) {
			i8 Shift := ((Index * 8) + 4) As i8
			
			Value |= this->Next() << Shift
		}
		
		return Value
	}
	
	define i8 IsLeadNameCharacter(i8 Next) {
		if (('A' <= Next && Next <= 'Z') || Next = '_') {
			return true
		}
		
		return false
	}
	
	define i8 ParseLeadNameCharacter() {
		i8 Next := this->Next()
		
		if (this->IsLeadNameCharacter(Next)) {
			return Next
		}
		
		this->Fail("Expected [_A-Z] for lead name", Next)
		return 0
	}
	define i8 ParseNameCharacter() {
		i8 Next := this->Next()
		
		if (('A' <= Next && Next <= 'Z') || Next = '_') {
			return Next
		}
		else if ('0' <= Next && Next <= '9') {
			return Next
		}
		
		this->Fail()
		return 0
	}
	
	define i32 ParseNameSegment() {
		i32 Result := this->ParseLeadNameCharacter()
		
		Result |= this->ParseNameCharacter() << 8
		Result |= this->ParseNameCharacter() << 16
		Result |= this->ParseNameCharacter() << 24
		
		return Result
	}
	
	define void ParseNamePath(AMLNameString* Result) {
		if (this->NextMatches(AML_DUAL_NAME_PREFIX)) {
			Result->Kind := AML_NAME_STRING_DUAL
			Result->DirectNameSegments[0] := this->ParseNameSegment()
			Result->DirectNameSegments[1] := this->ParseNameSegment()
		}
		else if (this->NextMatches(AML_MULTI_NAME_PREFIX)) {
			Result->Kind := AML_NAME_STRING_MULTI
			
			i8 Count := this->Next()
			
			Result->IndirectSegmentCount := Count
			Result->IndirectNameSegments := Alloc(Count * #i32)
			
			for (i32 Index := 0, Index < Count, Index++) {
				Result->IndirectNameSegments[Index] := this->ParseNameSegment()
			}
		}
		else if (this->NextMatches(0)) {
			Result->Kind := AML_NAME_STRING_NULL
		}
		else {
			Result->Kind := AML_NAME_STRING_SINGLE
			Result->DirectNameSegments[0] := this->ParseNameSegment()
		}
	}
	
	define AMLNameString* ParseNameString() {
		AMLNameString* Result := Alloc(#AMLNameString)
		
		i8 MaybeRootCharacter := this->Peek()
		
		if (this->NextMatches('\') || this->NextMatches('^')) {
			Result->RootCharacter := MaybeRootCharacter
		}
		
		this->ParseNamePath(Result)
		
		;Print("MadeNameStringHash ")
		;Result->Print()
		;Print(" = %x\n", Result->Hash())
		
		return Result
	}
	
	define i64 ReadByte() {
		return this->Next()
	}
	define i64 ReadWord() {
		return this->ReadByte() | (this->ReadByte() << 8)
	}
	define i64 ReadDoubleWord() {
		return this->ReadWord() | (this->ReadWord() << 16)
	}
	define i64 ReadQuadWord() {
		return this->ReadDoubleWord() | (this->ReadDoubleWord() << 32)
	}
	
	declare AMLTermArg* ParseTermArg()
	
	define AMLBuffer* ParseBuffer() {
		AMLBuffer* Result := Alloc(#AMLBuffer)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Size := this->ParseTermArg()
		Result->Data := &this->Buffer[this->Index]
		i32 End := Start + Result->Length
		
		this->Index := End
		
		return Result
	}
	
	declare AMLDataObject* ParseDataObject()
	
	define AMLPackage* ParsePackage() {
		AMLPackage* Result := Alloc(#AMLPackage)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->ElementCount := this->Next()
		i32 End := Start + Result->Length
		
		Result->Elements := Alloc(Result->ElementCount * #AMLDataObject*)
		i32 Index := 0
		
		while (this->Index < End) {
			Result->Elements[Index++] := this->ParseDataObject()
		}
		
		return Result
	}
	
	define i8 NextIsLocalObject() {
		i8 Next := this->Peek()
		
		return 0x60 <= Next && Next <= 0x67
	}
	define i8 NextIsArgObject() {
		i8 Next := this->Peek()
		
		return 0x68 <= Next && Next <= 0x6E
	}
	define AMLSuperName* ParseSuperName() {
		AMLSuperName* Result := Alloc(#AMLSuperName)
		
		if (this->NextIsLocalObject()) {
			Result->Kind := AML_SUPERNAME_LOCAL
			Result->LocalNumber := this->Next() - 0x60
		}
		else if (this->NextIsArgObject()) {
			Result->Kind := AML_SUPERNAME_ARG
			Result->ArgNumber := this->Next() - 0x68
		}
		else if (this->NextMatches('[') && this->NextMatches(AML_EXT_DEBUG_OP)) {
			Result->Kind := AML_SUPERNAME_DEBUG
		}
		else {
			Result->Kind := AML_SUPERNAME_NAME
			Result->Name := this->ParseNameString()
		}
		
		return Result
	}
	
	define AMLDataObject* ParseDataObject() {
		AMLDataObject* Result := Alloc(#AMLDataObject)
		
		Result->Kind := this->Peek()
		
		if (this->NextMatches(AML_DATA_OBJECT_BYTE_PREFIX)) {
			Result->ByteValue := this->ReadByte() As i8
		}
		else if (this->NextMatches(AML_DATA_OBJECT_WORD_PREFIX)) {
			Result->WordValue := this->ReadWord() As i16
		}
		else if (this->NextMatches(AML_DATA_OBJECT_DWORD_PREFIX)) {
			Result->DoubleWordValue := this->ReadDoubleWord() As i32
		}
		else if (this->NextMatches(AML_DATA_OBJECT_QWORD_PREFIX)) {
			Result->QuadWordValue := this->ReadQuadWord()
		}
		else if (this->NextMatches(AML_DATA_OBJECT_STRING_PREFIX)) {
			Result->StringValue := &this->Buffer[this->Index]
			
			while (this->Next() != 0) {}
		}
		else if (this->NextMatches(AML_DATA_OBJECT_CONST_ZERO_OP)) {
			Result->QuadWordValue := 0
		}
		else if (this->NextMatches(AML_DATA_OBJECT_CONST_ONE_OP)) {
			Result->QuadWordValue := 1
		}
		else if (this->NextMatches(AML_DATA_OBJECT_CONST_ONES_OP)) {
			Result->QuadWordValue := -1
		}
		else if (this->NextMatches(AML_BUFFER_OPERATION)) {
			Result->Buffer := this->ParseBuffer()
		}
		else if (this->NextMatches(AML_PACKAGE_OPERATION)) {
			Result->Package := this->ParsePackage()
		}
		else {
			Result->Kind := AML_DATA_OBJECT_SUPERNAME
			Result->Name := this->ParseSuperName()
		}
		
		return Result
	}
	
	define i8 NextIsDataObject() {
		i8 Next := this->Peek()
		
		if (AML_DATA_OBJECT_BYTE_PREFIX <= Next && Next <= AML_DATA_OBJECT_QWORD_PREFIX) {
			return true
		}
		else if (Next = AML_DATA_OBJECT_CONST_ZERO_OP || Next = AML_DATA_OBJECT_CONST_ONE_OP) {
			return true
		}
		else if (Next = AML_DATA_OBJECT_CONST_ONES_OP) {
			return true
		}
		
		return false
	}
	
	define AMLTarget* ParseTarget() {
		AMLTarget* Result := Alloc(#AMLTarget)
		
		if (this->NextMatches(0)) {
			Result->Kind := AML_TARGET_NULL
		}
		else {
			Result->Kind := AML_TARGET_SUPERNAME
			Result->SuperName := this->ParseSuperName()
		}
		
		return Result
	}
	
	define i8 NextIsDataTarget() {
		i32 Next := (this->Peek() As i32) & 0xFF
		
		return 0x96 <= Next && Next <= 0x99
	}
	define AMLDataTargetOperation* ParseDataTarget() {
		AMLDataTargetOperation* Result := Alloc(#AMLDataTargetOperation)
		
		Result->Operation := this->Next()
		
		Result->Data := this->ParseTermArg()
		Result->Target := this->ParseTarget()
		
		return Result
	}
	
	define i8 NextIsDataDataTarget() {
		i32 Next := (this->Peek() As i32) & 0xFF
		
		if (0x72 <= Next && Next <= 0x74) {
			return true
		}
		else if (0x77 <= Next && Next <= 0x7F && Next != 0x78) {
			return true
		}
		else if (Next = 0x84 || Next = 0x85 || Next = 0x88) {
			return true
		}
		
		return false
	}
	define AMLDataDataTargetOperation* ParseDataDataTarget() {
		AMLDataDataTargetOperation* Result := Alloc(#AMLDataDataTargetOperation)
		
		i32 Next := (this->Next() As i32) & 0xFF
		
		if (0x72 <= Next && Next <= 0x74) {
			Result->Operation := (Next - 0x72) As i8
		}
		else if (0x77 <= Next && Next <= 0x7F) {
			Result->Operation := (2 + (Next - 0x77)) As i8
		}
		else if (Next = 0x84 || Next = 0x85) {
			Result->Operation := (11 + (Next = 0x85)) As i8
		}
		else if (Next = 0x88) {
			Result->Operation := 13
		}
		
		Result->Left := this->ParseTermArg()
		Result->Right := this->ParseTermArg()
		Result->Target := this->ParseTarget()
		
		return Result
	}
	
	define i8 NextIsSuperNameOperation() {
		i32 Next := this->Peek()
		
		if      (Next = AML_SUPERNAME_REF_OF   ) { return true }
		else if (Next = AML_SUPERNAME_INCREMENT) { return true }
		else if (Next = AML_SUPERNAME_DECREMENT) { return true }
		else if (Next = AML_SUPERNAME_SIZEOF   ) { return true }
		else if (Next = AML_SUPERNAME_TYPEOF   ) { return true }
		
		return false
	}
	define AMLSuperNameOperation* ParseSuperNameOperation() {
		AMLSuperNameOperation* Result := Alloc(#AMLSuperNameOperation)
		
		Result->Kind := this->Next()
		Result->SuperName := this->ParseSuperName()
		
		return Result
	}
	
	define i8 NextIsDataData() {
		i32 Next := (this->Peek() As i32) & 0xFF
		
		if (0x90 <= Next && Next <= 0x95) {
			if (Next = 0x92) {
				i8 Peek := this->Buffer[this->Index + 2]
				
				return 0x93 <= Peek && Peek <= 0x95
			}
			
			return true
		}
		
		return false
	}
	define AMLDataDataOperation* ParseDataData() {
		AMLDataDataOperation* Result := Alloc(#AMLDataDataOperation)
		
		i8 Operation := this->Next()
		
		if (Operation = 0x92) {
			Result->Operation := (this->Next() - 0x91) As i8
		}
		else if (Operation >= 0x93) {
			Result->Operation := ((Operation - 0x90) + 2) As i8
		}
		else {
			Result->Operation := (Operation - 0x90) As i8
		}
		
		Result->Left := this->ParseTermArg()
		Result->Right := this->ParseTermArg()
		
		return Result
	}
	
	define i8 NextIsDataOperation() {
		i8 Next := this->Peek()
		
		return Next = AML_DATA_OP_DEREF || Next = AML_DATA_OP_LNOT
	}
	define AMLDataOperation* ParseDataOperation() {
		AMLDataOperation* Result := Alloc(#AMLDataOperation)
		
		Result->Operation := this->Next()
		Result->Operand := this->ParseTermArg()
		
		return Result
	}
	
	define i8 NextIsExpression() {
		i8 Next := this->Peek()
		
		if (Next = AML_STORE_OPERATION || Next = AML_BUFFER_OPERATION) {
			return true
		}
		else if (this->CurrentScope && this->IsLeadNameCharacter(Next)) {
			i32 Before := this->Index
			
			AMLNameString MaybeMethodName
			this->ParseNamePath(&MaybeMethodName)
			AMLDefineMethod* Method := this->CurrentScope->FindMethod(&MaybeMethodName)
			
			this->Index := Before
			
			if (Method) {
				MaybeMethodName.Free()
				return true
			}
		}
		
		return this->NextIsDataTarget() || this->NextIsDataDataTarget()
		|| this->NextIsSuperNameOperation() || this->NextIsDataData()
		|| this->NextIsDataOperation()
	}
	
	define AMLMethodInvoke* ParseMethodInvoke(AMLDefineMethod* Method) {
		AMLMethodInvoke* Result := Alloc(#AMLMethodInvoke)
		
		Print("ParseMethodInvoke(")
		Method->Name->Print()
		Print(", %i)\n", Method->ParameterCount())
		
		Result->Name := Method->Name
		Result->Count := Method->ParameterCount()
		Result->Parameters := Alloc(Result->Count * #AMLTermArg*)
		
		for (i32 Index := 0, Index < Result->Count, Index++) {
			Result->Parameters[Index] := this->ParseTermArg()
		}
		
		return Result
	}
	
	define AMLExpressionOpcode* ParseExpression() {
		AMLExpressionOpcode* Result := Alloc(#AMLExpressionOpcode)
		
		if (this->NextIsDataTarget()) {
			Result->Kind := AML_EXPRESSION_DATA_TARGET
			Result->DataTarget := this->ParseDataTarget()
		}
		else if (this->NextIsDataDataTarget()) {
			Result->Kind := AML_EXPRESSION_DATA_DATA_TARGET
			Result->DataDataTarget := this->ParseDataDataTarget()
		}
		else if (this->NextIsDataData()) {
			Result->Kind := AML_EXPRESSION_DATA_DATA
			Result->DataData := this->ParseDataData()
		}
		else if (this->NextIsDataOperation()) {
			Result->Kind := AML_EXPRESSION_DATA
			Result->DataOperation := this->ParseDataOperation()
		}
		else if (this->NextIsSuperNameOperation()) {
			Result->Kind := AML_EXPRESSION_SUPER_NAME_OPERATION
			Result->SuperNameOperation := this->ParseSuperNameOperation()
		}
		else if (this->NextMatches(AML_STORE_OPERATION)) {
			Result->Kind := AML_EXPRESSION_STORE_OPERATION
			
			Result->StoreOperation := Alloc(#AMLStoreOperation)
			Result->StoreOperation->Source := this->ParseTermArg()
			Result->StoreOperation->Destination := this->ParseTermArg()
		}
		else if (this->NextMatches(AML_BUFFER_OPERATION)) {
			Result->Kind := AML_EXPRESSION_BUFFER
			Result->Buffer := this->ParseBuffer()
		}
		else if (this->CurrentScope) {
			AMLNameString* MethodName := this->ParseNameString()
			AMLDefineMethod* Method := this->CurrentScope->FindMethod(MethodName)
			
			Result->Kind := AML_EXPRESSION_METHOD_INVOKE
			Result->MethodInvoke := this->ParseMethodInvoke(Method)
		}
		
		return Result
	}
	
	define AMLTermArg* ParseTermArg() {
		AMLTermArg* Result := Alloc(#AMLTermArg)
		
		if (this->NextIsDataObject()) {
			Result->Kind := AML_TERM_ARG_DATA_OBJECT
			Result->DataObject := this->ParseDataObject()
		}
		else if (this->NextIsLocalObject()) {
			Result->Kind := AML_TERM_ARG_LOCAL_OBJECT
			Result->LocalNumber := this->Next() - 0x60
		}
		else if (this->NextIsArgObject()) {
			Result->Kind := AML_TERM_ARG_ARG_OBJECT
			Result->ArgNumber := this->Next() - 0x68
		}
		else if (this->NextIsExpression()) {
			Result->Kind := AML_TERM_ARG_EXPRESSION
			Result->Expression := this->ParseExpression()
		}
		else {
			Result->Kind := AML_TERM_ARG_DATA_OBJECT
			Result->DataObject := this->ParseDataObject()
			;this->Fail("Unimplemented term-arg", this->Peek())
		}
		
		return Result
	}
	
	declare AMLTerm** ParseTermList(i32, i32*)
	
	define AMLIfStatement* ParseIf() {
		AMLIfStatement* Result := Alloc(#AMLIfStatement)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Condition := this->ParseTermArg()
		i32 End := Start + Result->Length
		
		Result->Body := this->ParseTermList(End, Result~>Count)
		
		return Result
	}
	
	define AMLElseStatement* ParseElse() {
		AMLElseStatement* Result := Alloc(#AMLElseStatement)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		i32 End := Start + Result->Length
		
		Result->Body := this->ParseTermList(End, Result~>Count)
		
		return Result
	}
	
	define AMLWhileLoop* ParseWhile() {
		AMLWhileLoop* Result := Alloc(#AMLWhileLoop)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Condition := this->ParseTermArg()
		i32 End := Start + Result->Length
		
		Result->Body := this->ParseTermList(End, Result~>Count)
		
		return Result
	}
	
	define AMLReturnStatement* ParseReturn() {
		AMLReturnStatement* Result := Alloc(#AMLReturnStatement)
		
		Result->Value := this->ParseTermArg()
		
		return Result
	}
	
	define i8 NextIsStatement() {
		i32 Next := (this->Peek() As i32) & 0xFF
		
		if (0xA0 <= Next && Next <= 0xA4) {
			return true
		}
		
		return false
	}
	define AMLStatementOpcode* ParseStatement() {
		AMLStatementOpcode* Result := Alloc(#AMLStatementOpcode)
		
		Result->Kind := this->Peek()
		
		if (this->NextMatches(AML_IF_OP)) {
			Result->IfStatement := this->ParseIf()
		}
		else if (this->NextMatches(AML_ELSE_OP)) {
			Result->ElseStatement := this->ParseElse()
		}
		else if (this->NextMatches(AML_WHILE_OP)) {
			Result->WhileLoop := this->ParseWhile()
		}
		else if (this->NextMatches(AML_RETURN_OP)) {
			Result->ReturnStatement := this->ParseReturn()
		}
		
		return Result
	}
	
	define AMLDefineRegion* ParseDefineRegion() {
		AMLDefineRegion* Result := Alloc(#AMLDefineRegion)
		
		Result->Name := this->ParseNameString()
		Result->AddressSpace := this->Next()
		Result->Offset := this->ParseTermArg()
		Result->Length := this->ParseTermArg()
		
		return Result
	}
	
	define AMLNamedField* ParseNamedField() {
		AMLNamedField* Result := Alloc(#AMLNamedField)
		
		Result->Name := this->ParseNameString()
		Result->Length := this->ParsePackageLength()
		
		return Result
	}
	
	define AMLField* ParseField() {
		AMLField* Result := Alloc(#AMLField)
		
		Result->Kind := AML_FIELD_NAMED
		Result->Named := this->ParseNamedField()
		
		return Result
	}
	
	define AMLDefineField* ParseDefineField() {
		AMLDefineField* Result := Alloc(#AMLDefineField)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Name := this->ParseNameString()
		Result->Flags := this->Next()
		i32 End := Start + Result->Length
		
		i32 FieldCountGuess := (Result->Length - 6) / 4
		Result->Fields := Alloc(FieldCountGuess * #AMLField*)
		
		i32 Index := 0
		
		while (this->Index < End) {
			Result->Fields[Index++] := this->ParseField()
		}
		
		Result->Count := Index
		
		return Result
	}
	
	define AMLDefineScope* ParseDefineScope() {
		AMLDefineScope* Result := Alloc(#AMLDefineScope)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Name := this->ParseNameString()
		i32 End := Start + Result->Length
		
		this->EnterScope(Result~>Scope, Result->Name)
		
		Result->Terms := this->ParseTermList(End, Result~>Count)
		
		this->ExitScope()
		
		return Result
	}
	
	define AMLDefineMethod* ParseDefineMethod() {
		AMLDefineMethod* Result := Alloc(#AMLDefineMethod)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Name := this->ParseNameString()
		Result->Flags := this->Next()
		i32 End := Start + Result->Length
		
		if (this->CurrentScope) {
			this->CurrentScope->AddMethod(Result)
		}
		
		Result->Terms := this->ParseTermList(End, Result~>Count)
		
		return Result
	}
	
	define AMLDefineDevice* ParseDefineDevice() {
		AMLDefineDevice* Result := Alloc(#AMLDefineDevice)
		
		i32 Start := this->Index
		Result->Length := this->ParsePackageLength()
		Result->Name := this->ParseNameString()
		i32 End := Start + Result->Length
		
		this->EnterScope(Result~>Scope, Result->Name)
		
		Result->Terms := this->ParseTermList(End, Result~>Count)
		
		this->ExitScope()
		
		return Result
	}
	
	define AMLDefineName* ParseDefineName() {
		AMLDefineName* Result := Alloc(#AMLDefineName)
		
		Result->Name := this->ParseNameString()
		Result->Data := this->ParseDataObject()
		
		return Result
	}
	
	define i8 NextIsCreateField() {
		i8 Next := this->Peek()
		
		return Next = AML_CREATE_BYTE_FIELD_OP || Next = AML_CREATE_DOUBLE_WORD_FIELD_OP
	}
	define AMLCreateField* ParseCreateField() {
		AMLCreateField* Result := Alloc(#AMLCreateField)
		
		Result->Kind := this->Next()
		Result->Buffer := this->ParseTermArg()
		Result->Offset := this->ParseTermArg()
		Result->Name := this->ParseNameString()
		
		return Result
	}
	
	define AMLTerm* ParseTerm() {
		AMLTerm* Result := Alloc(#AMLTerm)
		
		Result->Kind := 0
		
		if (this->NextMatches(AML_NAME_OP)) {
			Result->Kind := AML_NAME_OP
			Result->Name := this->ParseDefineName()
		}
		else if (this->NextMatches(AML_SCOPE_OP)) {
			Result->Kind := AML_SCOPE_OP
			Result->Scope := this->ParseDefineScope()
		}
		else if (this->NextMatches(AML_METHOD_OP)) {
			Result->Kind := AML_METHOD_OP
			Result->Method := this->ParseDefineMethod()
		}
		else if (this->NextIsExpression()) {
			Result->Kind := AML_EXPRESSION_OP
			Result->Expression := this->ParseExpression()
		}
		else if (this->NextIsStatement()) {
			Result->Kind := AML_STATEMENT_OP
			Result->Statement := this->ParseStatement()
		}
		else if (this->NextIsCreateField()) {
			Result->Kind := AML_FIELD_OP
			Result->CreateField := this->ParseCreateField()
		}
		else if (this->NextMatches(AML_NOTIFY_OP)) {
			Result->Kind := AML_NOTIFY_OP
			Result->Notify := Alloc(#AMLNotify)
			Result->Notify->Name := this->ParseSuperName()
			Result->Notify->Argument := this->ParseTermArg()
		}
		else if (this->NextMatches(AML_CONTINUE_OP) || this->NextMatches(AML_BREAK_OP) || this->NextMatches(AML_NO_OP)) {
			Result->Kind := this->Buffer[this->Index - 1]
		}
		else if (this->NextMatches('[')) {
			Result->Kind := this->Peek()
			
			if (this->NextMatches(AML_EXT_MUTEX_OP)) {
				AMLDefineMutex* Mutex := Result->Mutex := Alloc(#AMLDefineMutex)
				
				Mutex->Name := this->ParseNameString()
				Mutex->Info := this->Next()
			}
			else if (this->NextMatches(AML_EXT_ACQUIRE_OP)) {
				AMLAcquireMutex* Acquire := Result->Acquire := Alloc(#AMLAcquireMutex)
				
				Acquire->Name := this->ParseSuperName()
				Acquire->Info := this->ReadWord() As i16
			}
			else if (this->NextMatches(AML_EXT_RELEASE_OP)) {
				AMLReleaseMutex* Release := Result->Release := Alloc(#AMLReleaseMutex)
				
				Release->Name := this->ParseSuperName()
			}
			else if (this->NextMatches(AML_EXT_REGION_OP)) {
				Result->Region := this->ParseDefineRegion()
			}
			else if (this->NextMatches(AML_EXT_FIELD_OP)) {
				Result->Field := this->ParseDefineField()
			}
			else if (this->NextMatches(AML_EXT_DEVICE_OP)) {
				Result->Device := this->ParseDefineDevice()
			}
			else {
				;this->Index--
				
				this->Fail("Unimplement ex-term", this->Peek())
			}
		}
		
		if (Result->Kind = 0) {
			this->Fail("Unimplemented term", this->Peek())
		}
		
		return Result
	}
	
	define AMLTerm** ParseTermList(i32 End, i32* OutCount) {
		i32 i := this->Index
	
		;Print("ParseTermList(%x - %x, %i)\n", this->Index, End, End - this->Index)
	
		i32 Length := End - this->Index
		i32 TermCountGuess := Length
		AMLTerm** Terms := Alloc(TermCountGuess * #AMLTerm*)
		
		i32 Index := 0
		
		while (this->Index < End) {
			;Print("%x +1, %i\n", i, Index)
			
			Terms[Index++] := this->ParseTerm()
		}

		if (Index > TermCountGuess) {
			this->Fail("Bad term count guess", 0)
		}
		
		*OutCount := Index
		
		return Terms
	}
	
}

; https://uefi.org/sites/default/files/resources/ACPI_6_2.pdf