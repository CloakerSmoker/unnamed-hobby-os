declare void PrintTerm(AMLTerm*)
declare void PrintTermArg(AMLTermArg*)
declare void PrintDataObject(AMLDataObject*)

i8 AML_DUAL_NAME_PREFIX := 0x2E
i8 AML_MULTI_NAME_PREFIX := 0x2F

i8 AML_NAME_STRING_SINGLE := 0
i8 AML_NAME_STRING_DUAL := 1
i8 AML_NAME_STRING_MULTI := 2
i8 AML_NAME_STRING_NULL := 3

struct AMLNameString {
	i32 IndirectSegmentCount
	
	i8 RootCharacter
	i8 Kind
	
	i32[2] DirectNameSegments
	i32* IndirectNameSegments
	
	static AMLNameString* New(i8 RootCharacter) {
		AMLNameString* this := Alloc(#AMLNameString)
		
		this->RootCharacter := RootCharacter
		
		return this
	}
	
	define void Print() {
		Print("%c", this->RootCharacter)
		
		if (this->Kind = AML_NAME_STRING_SINGLE) {
			Print("%l", this->DirectNameSegments[0])
		}
		else if (this->Kind = AML_NAME_STRING_DUAL) {
			Print("%l", this->DirectNameSegments[0])
			Print("%l", this->DirectNameSegments[1])
		}
		else if (this->Kind = AML_NAME_STRING_MULTI) {
			for (i32 Index := 0, Index < this->IndirectSegmentCount, Index++) {
				Print("%l", this->IndirectNameSegments[Index])
			}
		}
	}
	
	define i64 HashSegment(i64 State, i32 Segment) {
		i8* Data := &Segment As void*
		
		for (i32 Index := 0, Index < 4, Index++) {
			State ^= Data[Index]
			State *= 16777619
		}
		
		return State
	}
	
	define i64 Hash() {
		i64 H := 2166136261
		
		if (this->Kind = AML_NAME_STRING_SINGLE) {
			H := this->HashSegment(H, this->DirectNameSegments[0])
		}
		else if (this->Kind = AML_NAME_STRING_DUAL) {
			H := this->HashSegment(H, this->DirectNameSegments[0])
			H := this->HashSegment(H, this->DirectNameSegments[1])
		}
		else if (this->Kind = AML_NAME_STRING_MULTI) {
			for (i32 Index := 0, Index < this->IndirectSegmentCount, Index++) {
				H := this->HashSegment(H, this->IndirectNameSegments[Index])
			}
		}
		
		return H
	}
	
	define void Free() {
		if (this->Kind = AML_NAME_STRING_MULTI) {
			Free(this->IndirectNameSegments)
		}
	}
}

i8 AML_BUFFER_OPERATION := 0x11

struct AMLBuffer {
	i32 Length
	AMLTermArg* Size
	i8* Data
	
	define void Print() {
		Print("AMLBuffer ")
		PrintTermArg(this->Size)
		Print(" [")
		
		for (i32 Index := 0, Index < this->Length, Index++) {
			Print("%B", this->Data[Index])
			
			if (Index + 1 != this->Length) {
				Print(", ")
			}
		}
		
		Print("]")
	}
}

i8 AML_PACKAGE_OPERATION := 0x12

struct AMLPackage {
	i32 Length
	i32 ElementCount
	AMLDataObject** Elements
	
	define void Print() {
		Print("AMLPackage {")
		
		for (i32 Index := 0, Index < this->ElementCount, Index++) {
			PrintDataObject(this->Elements[Index])
			
			if (Index + 1 != this->ElementCount) {
				Print(", ")
			}
		}
		
		Print("}")
	}
}

i8 AML_DATA_OBJECT_BYTE_PREFIX := 0xA
i8 AML_DATA_OBJECT_WORD_PREFIX := 0xB
i8 AML_DATA_OBJECT_DWORD_PREFIX := 0xC
i8 AML_DATA_OBJECT_STRING_PREFIX := 0xD
i8 AML_DATA_OBJECT_QWORD_PREFIX := 0xE
i8 AML_DATA_OBJECT_CONST_ZERO_OP := 0x0
i8 AML_DATA_OBJECT_CONST_ONE_OP := 0x1
i8 AML_DATA_OBJECT_CONST_ONES_OP := 0xFF As i8
i8 AML_DATA_OBJECT_NAME := 0x80 As i8

struct AMLDataObject {
	i8 Kind
	
	union {
		i8* StringValue
		
		i8 ByteValue
		i16 WordValue
		i32 DoubleWordValue
		i64 QuadWordValue
		AMLNameString* Name
		AMLBuffer* Buffer
		AMLPackage* Package
	}
	
	define void Print() {
		if (this->Kind = AML_DATA_OBJECT_STRING_PREFIX) {
			Print("%s", this->StringValue)
		}
		else if (this->Kind = AML_DATA_OBJECT_BYTE_PREFIX) {
			Print("%x", this->ByteValue)
		}
		else if (this->Kind = AML_DATA_OBJECT_WORD_PREFIX) {
			Print("%x", this->WordValue)
		}
		else if (this->Kind = AML_DATA_OBJECT_DWORD_PREFIX) {
			Print("%x", this->DoubleWordValue)
		}
		else if (this->Kind = AML_DATA_OBJECT_NAME) {
			this->Name->Print()
		}
		else if (this->Kind = AML_BUFFER_OPERATION) {
			this->Buffer->Print()
		}
		else if (this->Kind = AML_PACKAGE_OPERATION) {
			this->Package->Print()
		}
		else {
			Print("%x", this->QuadWordValue)
		}
	}
}

define void PrintDataObject(AMLDataObject* Target) {
	Target->Print()
}

i8 AML_SUPERNAME_LOCAL := 0
i8 AML_SUPERNAME_ARG := 1
i8 AML_SUPERNAME_NAME := 2

struct AMLSuperName {
	union {
		i32 LocalNumber
		i32 ArgNumber
		AMLNameString* Name
	}
	
	i8 Kind
	
	define void Print() {
		if (this->Kind = AML_SUPERNAME_NAME) {
			this->Name->Print()
		}
		else if (this->Kind = AML_SUPERNAME_LOCAL) {
			Print("Local%i", this->ArgNumber)
		}
		else if (this->Kind = AML_SUPERNAME_ARG) {
			Print("Arg%i", this->ArgNumber)
		}
	}
}

i8 AML_TARGET_SUPERNAME := 0
i8 AML_TARGET_DEBUG_OBJ := 1
i8 AML_TARGET_REFERENCE_TYPE := 2
i8 AML_TARGET_NULL := 3

struct AMLTarget {
	i8 Kind
	
	union {
		AMLSuperName* SuperName
	}
	
	define void Print() {
		if (this->Kind = AML_TARGET_SUPERNAME) {
			this->SuperName->Print()
			Print(" := ")
		}
	}
}

i8 AML_TO_BUFFER_OP := 0x96 As i8
i8 AML_TO_DECIMAL_STRING_OP := 0x97 As i8
i8 AML_TO_HEX_STRING_OP := 0x98 As i8
i8 AML_TO_INTEGER_OP := 0x99 As i8

struct AMLDataTargetOperation {
	AMLTermArg* Data
	AMLTarget* Target
	i8 Operation
	
	define void Print() {
		i8*[4] Names {
			"ToBuffer", "ToDecimalString", "ToHexString", "ToInteger"
		}
		
		this->Target->Print()
		Print("%s(", Names[((this->Operation As i32) & 0xFF) - 0x96])
		PrintTermArg(this->Data)
		Print(")")
	}
}

i8 AML_DDT_ADD         := 0  ; 0x72
i8 AML_DDT_CONCAT      := 1  ; 0x73
i8 AML_DDT_SUBTRACT    := 2  ; 0x74

i8 AML_DDT_MULTIPLY    := 3  ; 0x77
i8 AML_DDT_SHIFT_LEFT  := 4  ; 0x79
i8 AML_DDT_SHIFT_RIGHT := 5  ; 0x7A
i8 AML_DDT_AND         := 6  ; 0x7B
i8 AML_DDT_NAND        := 7  ; 0x7C
i8 AML_DDT_OR          := 8  ; 0x7D
i8 AML_DDT_NOR         := 9  ; 0x7E
i8 AML_DDT_XOR         := 10 ; 0x7F

i8 AML_DDT_CONCAT_RES  := 11
i8 AML_DDT_MOD         := 12

i8 AML_DDT_INDEX       := 13

struct AMLDataDataTargetOperation {
	AMLTermArg* Left
	AMLTermArg* Right
	AMLTarget* Target
	i8 Operation
	
	define void Print() {
		i8*[14] Names {
			"+", ".", "-", "<<", ">>", "&", "NAND", "|", "NOR", "^", "..", "%", "["
		}
		
		this->Target->Print()
		PrintTermArg(this->Left)
		
		if (this->Operation = AML_DDT_INDEX) {
			Print("[")
		}
		else {
			Print(" %s ", Names[this->Operation])
		}
		
		PrintTermArg(this->Right)
		
		if (this->Operation = AML_DDT_INDEX) {
			Print("]")
		}
	}
}

i8 AML_SUPERNAME_REF_OF := 0x71
i8 AML_SUPERNAME_INCREMENT := 0x75
i8 AML_SUPERNAME_DECREMENT := 0x76
i8 AML_SUPERNAME_SIZEOF := 0x87 As i8
i8 AML_SUPERNAME_TYPEOF := 0x8E As i8

struct AMLSuperNameOperation {
	AMLSuperName* SuperName
	i8 Kind
	
	define void Print() {
		if (this->Kind = AML_SUPERNAME_REF_OF) {
			Print("&")
		}
		else if (this->Kind = AML_SUPERNAME_INCREMENT) {
			Print("++")
		}
		else if (this->Kind = AML_SUPERNAME_DECREMENT) {
			Print("--")
		}
		else if (this->Kind = AML_SUPERNAME_SIZEOF) {
			Print("sizeof ")
		}
		else if (this->Kind = AML_SUPERNAME_TYPEOF) {
			Print("typeof ")
		}
		
		this->SuperName->Print()
	}
}

i8 AML_DD_AND := 0 ; 0x90
i8 AML_DD_OR  := 1 ; 0x91
i8 AML_DD_NE  := 2 ; 0x92 0x93
i8 AML_DD_LE  := 3 ; 0x92 0x94
i8 AML_DD_GE  := 4 ; 0x92 0x95
i8 AML_DD_E   := 5 ; 0x93
i8 AML_DD_L   := 6 ; 0x95
i8 AML_DD_G   := 7 ; 0x94

struct AMLDataDataOperation {
	AMLTermArg* Left
	AMLTermArg* Right
	i8 Operation
	
	define void Print() {
		i8*[8] Operators {
			"&&", "||", "!=", "<=", ">=", "==", ">", "<"
		}
		
		PrintTermArg(this->Left)
		Print(" %s ", Operators[this->Operation])
		PrintTermArg(this->Right)
	}
}

i8 AML_DATA_OP_DEREF := 0x83 As i8
i8 AML_DATA_OP_LNOT  := 0x92 As i8

struct AMLDataOperation {
	AMLTermArg* Operand
	i8 Operation
	
	define void Print() {
		if (this->Operation = AML_DATA_OP_DEREF) {
			Print("*")
		}
		else if (this->Operation = AML_DATA_OP_LNOT) {
			Print("!")
		}
		
		PrintTermArg(this->Operand)
	}
}

struct AMLMethodInvoke {
	AMLNameString* Name
	i32 Count
	AMLTermArg** Parameters
	
	AMLDefineMethod* Method
	
	define void Print() {
		this->Name->Print()
		Print("(")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTermArg(this->Parameters[Index])
			
			if (Index + 1 != this->Count) {
				Print(", ")
			}
		}
		
		Print(")")
	}
}

i8 AML_STORE_OPERATION := 0x70

struct AMLStoreOperation {
	AMLTermArg* Source
	AMLTermArg* Destination
	
	define void Print() {
		PrintTermArg(this->Destination)
		Print(" := ")
		PrintTermArg(this->Source)
	}
}

i8 AML_EXPRESSION_DATA_TARGET := 2
i8 AML_EXPRESSION_DATA_DATA_TARGET := 3
i8 AML_EXPRESSION_SUPER_NAME_OPERATION := 6
i8 AML_EXPRESSION_STORE_OPERATION := 7
i8 AML_EXPRESSION_DATA_DATA := 8
i8 AML_EXPRESSION_DATA := 9
i8 AML_EXPRESSION_BUFFER := 10
i8 AML_EXPRESSION_METHOD_INVOKE := 11

struct AMLExpressionOpcode {
	union {
		AMLDataTargetOperation* DataTarget
		AMLDataDataTargetOperation* DataDataTarget
		AMLSuperNameOperation* SuperNameOperation
		AMLStoreOperation* StoreOperation
		AMLDataDataOperation* DataData
		AMLDataOperation* DataOperation
		AMLBuffer* Buffer
		AMLMethodInvoke* MethodInvoke
	}
	
	i8 Kind
	
	define void Print() {
		i8 dummy := this->Kind
		
		if (this->Kind = AML_EXPRESSION_DATA_TARGET) {
			this->DataTarget->Print()
		}
		else if (this->Kind = AML_EXPRESSION_DATA_DATA_TARGET) {
			this->DataDataTarget->Print()
		}
		else if (this->Kind = AML_EXPRESSION_SUPER_NAME_OPERATION) {
			this->SuperNameOperation->Print()
		}
		else if (this->Kind = AML_EXPRESSION_DATA_DATA) {
			this->DataData->Print()
		}
		else if (this->Kind = AML_EXPRESSION_DATA) {
			this->DataOperation->Print()
		}
		else if (this->Kind = AML_EXPRESSION_BUFFER) {
			this->Buffer->Print()
		}
		else if (this->Kind = AML_EXPRESSION_METHOD_INVOKE) {
			this->MethodInvoke->Print()
		}
		else if (this->Kind = AML_EXPRESSION_STORE_OPERATION) {
			this->StoreOperation->Print()
		}
	}
}

i8 AML_TERM_ARG_EXPRESSION := 0
i8 AML_TERM_ARG_DATA_OBJECT := 1
i8 AML_TERM_ARG_LOCAL_OBJECT := 2
i8 AML_TERM_ARG_ARG_OBJECT := 4

struct AMLTermArg {
	i8 Kind
	
	union {
		AMLExpressionOpcode* Expression
		AMLDataObject* DataObject
		i32 LocalNumber
		i32 ArgNumber
	}
	
	define void Print() {
		if (this->Kind = AML_TERM_ARG_EXPRESSION) {
			this->Expression->Print()
		}
		else if (this->Kind = AML_TERM_ARG_DATA_OBJECT) {
			this->DataObject->Print()
		}
		else if (this->Kind = AML_TERM_ARG_LOCAL_OBJECT) {
			Print("Local%i", this->ArgNumber)
		}
		else if (this->Kind = AML_TERM_ARG_ARG_OBJECT) {
			Print("Arg%i", this->ArgNumber)
		}
	}
}

define void PrintTermArg(AMLTermArg* TermArg) {
	TermArg->Print()
}