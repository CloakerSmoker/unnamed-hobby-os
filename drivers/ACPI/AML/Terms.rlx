
#Require "./src/utility/AVLTree.rlx"

i8 AML_WHILE_OP := 0xA2 As i8

struct AMLWhileLoop {
	i32 Length
	AMLTermArg* Condition
	i32 Count
	AMLTerm** Body
	
	define void Print() {
		Print("While (")
		this->Condition->Print()
		Print(") {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Body[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
}

i8 AML_IF_OP := 0xA0 As i8

struct AMLIfStatement {
	i32 Length
	AMLTermArg* Condition
	i32 Count
	AMLTerm** Body
	
	define void Print() {
		Print("If (")
		this->Condition->Print()
		Print(") {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Body[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
}

i8 AML_ELSE_OP := 0xA1 As i8

struct AMLElseStatement {
	i32 Length
	i32 Count
	AMLTerm** Body
	
	define void Print() {
		Print("Else {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Body[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
}

i8 AML_RETURN_OP := 0xA4 As i8

struct AMLReturnStatement {
	AMLTermArg* Value
	
	define void Print() {
		Print("Return ")
		this->Value->Print()
	}
}

struct AMLStatementOpcode {
	union {
		AMLIfStatement* IfStatement
		AMLElseStatement* ElseStatement
		AMLWhileLoop* WhileLoop
		AMLReturnStatement* ReturnStatement
	}
	
	i8 Kind
	
	define void Print() {
		if (this->Kind = AML_IF_OP) {
			this->IfStatement->Print()
		}
		else if (this->Kind = AML_ELSE_OP) {
			this->ElseStatement->Print()
		}
		else if (this->Kind = AML_WHILE_OP) {
			this->WhileLoop->Print()
		}
		else if (this->Kind = AML_RETURN_OP) {
			this->ReturnStatement->Print()
		}
	}
}


struct AMLDefineRegion {
	AMLNameString* Name
	i8 AddressSpace
	AMLTermArg* Offset
	AMLTermArg* Length
	
	define void Print() {
		Print("AMLDefineRegion ")
		this->Name->Print()
		Print(" %x { ", this->AddressSpace)
		this->Offset->Print()
		Print(", ")
		this->Length->Print()
		Print(" }\n")
	}
}


i8 AML_DEFINE_METHOD_COUNT_MASK := 0b0000_0_111

struct AMLDefineMethod {
	i32 Length
	AMLNameString* Name
	i8 Flags
	i32 Count
	AMLTerm** Terms
	
	define void Print() {
		Print("AMLDefineMethod ")
		this->Name->Print()
		Print(" %x {\n", this->Flags)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Terms[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
	
	define i32 ParameterCount() {
		return this->Flags & 0b0000_0_111
	}
}

i8 AML_FIELD_NAMED := 0
i8 AML_FIELD_RESERVED := 1
i8 AML_FIELD_ACCESS := 2
i8 AML_FIELD_EXT_ACCESS := 3
i8 AML_FIELD_CONNECT := 4

struct AMLNamedField {
	AMLNameString* Name
	i32 Length
	
	define void Print() {
		this->Name->Print()
		Print(": %x", this->Length)
	}
}

struct AMLField {
	i8 Kind
	
	union {
		AMLNamedField* Named
	}
	
	define void Print() {
		this->Named->Print()
	}
}

struct AMLDefineField {
	i32 Length
	AMLNameString* Name
	i8 Flags
	i32 Count
	AMLField** Fields
	
	define void Print() {
		Print("AMLDefineField ")
		this->Name->Print()
		Print(" %x {\n", this->Flags)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			this->Fields[Index]->Print()
			Print("\n")
		}
		
		Print("}\n")
	}
}

struct AMLScope {
	AMLScope* Parent
	AVLTree Children
	
	i8 IsRoot
	i32 NameSegment
	
	AVLTree Methods
	AVLTree Fields
	
	define void Initialize(i8 IsRoot, i32 NameSegment) {
		this->IsRoot := IsRoot
		this->NameSegment := NameSegment
		
		this~>Methods->ValueSize := 8
		this~>Fields->ValueSize := 8
		this~>Children->ValueSize := 8
	}
	
	define void AddChild(AMLScope* Child) {
		Child->Parent := this
		this~>Children->Insert(Child->NameSegment, &Child)
	}
	
	static AMLScope* New() {
		AMLScope* this := Alloc(#AMLScope)
		
		this->Initialize(true, 0)
		
		return this
	}
	
	static AMLScope* New(AMLScope* Parent, i32 NameSegment) {
		AMLScope* this := Alloc(#AMLScope)
		
		this->Initialize(false, NameSegment)
		
		Parent->AddChild(this)
		
		return this
	}
	
	define AMLScope* FindChild(i32 NameSegment) {
		return this~>Children->GetNode(NameSegment)->ValueAsPointer()
	}
	
	define AMLScope* FindOrAddChild(i32 NameSegment) {
		AMLScope* Result := this->FindChild(NameSegment)
		
		if !(Result) {
			Result := AMLScope:New(this, NameSegment)
		}
		
		return Result
	}
	
	define void Print() {
		if (this->Parent) {
			this->Parent->Print()
			Print(".")
		}
		
		if (this->IsRoot) {
			Print("\\")
		}
		
		Print("%l", this->NameSegment)
	}
	
	define void AddMethod(i32 NameSegment, AMLDefineMethod* Method) {
		;this->Name->Print()
		;Print(".AddMethod(")
		;Name->Print()
		;Print(", %x, %x)\n", Name->Hash(), Method)
		;
		;this~>Methods->Print()
		
		this~>Methods->Insert(NameSegment, &Method)
	}
	define i8 IsOwnMethod(i32 NameSegment) {
		return this~>Methods->Has(NameSegment)
	}
	define AMLDefineMethod* FindOwnMethod(i32 NameSegment) {
		return this~>Methods->GetNode(NameSegment)->ValueAsPointer()
	}
	
	define i8 IsMethod(i32 NameSegment) {
		AMLScope* Current := this
		
		while (Current) {
			if (Current->IsOwnMethod(NameSegment)) {
				return true
			}
			
			Current := Current->Parent
		}
		
		return false
	}
	
	define AMLDefineMethod* FindMethod(i32 NameSegment) {
		AMLScope* Current := this
		
		while (Current) {
			AMLDefineMethod* Result := Current->FindOwnMethod(NameSegment)
			
			if (Result) {
				return Result
			}
			
			Current := Current->Parent
		}
		
		return null
	}
}

struct AMLDefineScope {
	AMLScope Scope
	
	i32 Length
	AMLNameString* Name
	i32 Count
	AMLTerm** Terms
	
	define void Print() {
		Print("AMLScope ")
		this->Name->Print()
		Print(" {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Terms[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
}

struct AMLDefineDevice {
	AMLScope Scope
	
	i32 Length
	AMLNameString* Name
	i32 Count
	AMLTerm** Terms
	
	define void Print() {
		Print("AMLDefineDevice ")
		this->Name->Print()
		Print(" {\n")
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			Print("\t")
			PrintTerm(this->Terms[Index])
			Print("\n")
		}
		
		Print("}\n")
	}
}

struct AMLDefineName {
	AMLNameString* Name
	AMLDataObject* Data
	
	define void Print() {
		this->Name->Print()
		Print(": ")
		this->Data->Print()
	}
}

i8 AML_EXT_MUTEX_OP := 0x01

struct AMLDefineMutex {
	AMLNameString* Name
	i8 Info
	
	define void Print() {
		Print("Mutex(")
		this->Name->Print()
		Print(", %x)", this->Info)
	}
}

i8 AML_EXT_ACQUIRE_OP := 0x23

struct AMLAcquireMutex {
	AMLSuperName* Name
	i16 Info
	
	define void Print() {
		Print("Acquire(")
		this->Name->Print()
		Print(", %x)", this->Info)
	}
}

i8 AML_EXT_RELEASE_OP := 0x27

struct AMLReleaseMutex {
	AMLSuperName* Name
	
	define void Print() {
		Print("Release(")
		this->Name->Print()
		Print(")")
	}
}

i8 AML_CREATE_DOUBLE_WORD_FIELD_OP := 0x8A As i8
i8 AML_CREATE_BYTE_FIELD_OP := 0x8C As i8

struct AMLCreateField {
	AMLTermArg* Buffer
	AMLTermArg* Offset
	AMLNameString* Name
	
	i8 Kind
	
	define void Print() {
		Print("Create")
		
		if (this->Kind = AML_CREATE_BYTE_FIELD_OP) {
			Print("Byte")
		}
		else if (this->Kind = AML_CREATE_DOUBLE_WORD_FIELD_OP) {
			Print("DWord")
		}
		
		Print("Field(")
		PrintTermArg(this->Buffer)
		Print(", ")
		PrintTermArg(this->Offset)
		Print(", ")
		this->Name->Print()
		Print(")")
	}
}

i8 AML_NOTIFY_OP := 0x86 As i8

struct AMLNotify {
	AMLSuperName* Name
	AMLTermArg* Argument
	
	define void Print() {
		Print("Notify(")
		this->Name->Print()
		Print(", ")
		this->Argument->Print()
		Print(")")
	}
}

i8 AML_EXT_PROCESSOR_OP := 0x83 As i8

struct AMLDefineProcessor {
	AMLScope Scope
	
	i32 Length
	AMLNameString* Name
	i8 ProcessorID
	i32 BlockAddress
	i8 BlockLength
	
	i32 Count
	AMLTerm** Terms
	
	define void Print() {
		Print("AMLDefineProcessor ")
		this->Name->Print()
		Print("(%x, %x, %x) {\n", this->ProcessorID, this->BlockAddress, this->BlockLength)
		
		for (i32 Index := 0, Index < this->Count, Index++) {
			PrintTerm(this->Terms[Index])
		}
		
		Print("}\n")
	}
	
}

i8 AML_CONTINUE_OP := 0x9F As i8
i8 AML_NO_OP := 0xA3 As i8
i8 AML_BREAK_OP := 0xA5 As i8

i8 AML_ALIAS_OP := 0x6
i8 AML_NAME_OP := 0x8
i8 AML_SCOPE_OP := 0x10
i8 AML_METHOD_OP := 0x14

i8 AML_EXT_REGION_OP := 0x80 As i8
i8 AML_EXT_FIELD_OP := 0x81 As i8
i8 AML_EXT_DEVICE_OP := 0x82 As i8

i8 AML_EXPRESSION_OP := 0x96 As i8
i8 AML_STATEMENT_OP := 0x97 As i8
i8 AML_FIELD_OP := 0x98 As i8

struct AMLTerm {
	union {
		AMLDefineRegion* Region
		AMLDefineField* Field
		AMLDefineScope* Scope
		AMLDefineMethod* Method
		AMLExpressionOpcode* Expression
		AMLStatementOpcode* Statement
		AMLDefineDevice* Device
		AMLDefineName* Name
		AMLDefineMutex* Mutex
		AMLAcquireMutex* Acquire
		AMLReleaseMutex* Release
		AMLCreateField* CreateField
		AMLNotify* Notify
		AMLDefineProcessor* Processor
	}
	
	i8 Kind
	
	define void Print() {
		if (this->Kind = AML_NAME_OP) {
			this->Name->Print()
		}
		else if (this->Kind = AML_SCOPE_OP) {
			this->Scope->Print()
		}
		else if (this->Kind = AML_METHOD_OP) {
			this->Method->Print()
		}
		else if (this->Kind = AML_EXPRESSION_OP) {
			this->Expression->Print()
		}
		else if (this->Kind = AML_STATEMENT_OP) {
			this->Statement->Print()
		}
		else if (this->Kind = AML_FIELD_OP) {
			this->CreateField->Print()
		}
		else if (this->Kind = AML_NOTIFY_OP) {
			this->Notify->Print()
		}
		else if (this->Kind = AML_CONTINUE_OP) {
			Print("Continue\n")
		}
		else if (this->Kind = AML_BREAK_OP) {
			Print("Break\n")
		}
		else if (this->Kind = AML_NO_OP) {
			Print("Noop\n")
		}
		else if (this->Kind = AML_EXT_MUTEX_OP) {
			this->Mutex->Print()
		}
		else if (this->Kind = AML_EXT_ACQUIRE_OP) {
			this->Acquire->Print()
		}
		else if (this->Kind = AML_EXT_RELEASE_OP) {
			this->Release->Print()
		}
		else if (this->Kind = AML_EXT_REGION_OP) {
			this->Region->Print()
		}
		else if (this->Kind = AML_EXT_FIELD_OP) {
			this->Field->Print()
		}
		else if (this->Kind = AML_EXT_DEVICE_OP) {
			this->Device->Print()
		}
		else if (this->Kind = AML_EXT_PROCESSOR_OP) {
			this->Processor->Print()
		}
	}
}

define void PrintTerm(AMLTerm* Term) {
	Term->Print()
}