#Require "./src/utility/EFICRC.rlx"
#Require "./src/utility/MBR.rlx"

#Require "./src/drivers/block-device/BlockDevice.rlx"

i8* GPT_MAGIC := "EFI PART"
i32 GPT_VERSION_1_0 := 0x1_0000

struct GPTPartitionTableHeader {
	i8[8] Signature
	i32 Version
	i32 HeaderSize
	i32 Checksum
	i32 Reserved
	
	i64 ThisHeaderLBA
	i64 AlternateHeaderLBA
	
	i64 FirstUsableBlock
	i64 LastUsableBlock
	
	i8[16] DiskGUID
	
	i64 PartitionEntryArrayLBA
	i32 PartitionEntryCount
	i32 PartitionEntrySize
	i32 PartitionEntryArrayChecksum
	
	define i8 IsValid() {
		i32 OriginalCRC := this->Checksum
		this->Checksum := 0
		
		i32 CurrentCRC := EFICalculateCRC(this, #GPTPartitionTableHeader)
		this->Checksum := OriginalCRC
		
		return OriginalCRC = CurrentCRC
	}
	define void UpdateCRC() {
		this->Checksum := 0
		this->Checksum := EFICalculateCRC(this, #GPTPartitionTableHeader)
	}
}

struct GPTPartitionEntry {
	i8[16] PartitionTypeGUID
	i8[16] PartitionGUID
	i64 StartingLBA
	i64 EndingLBA
	i64 Attributes
	i16[36] PartitionName
}

i8* GPT_PARTITION_GUID_TEMPLATE := i8[0xDB, 0x5B, 0xD6, 0xDA, 0x7D, 0x88, 0x45, 0x39, 0x9C, 0xBF, 0xBF, 0xA8, 0x05, 0x2A, 0x54, 0x2D]

i32 GUIDCounter := 0

define void GenerateGUID(i8* Out) {
	MoveMemory(Out, GPT_PARTITION_GUID_TEMPLATE, 16)
	
	Out[4] := GUIDCounter As i8
	Out[7] := (Out As i8) ^ (GUIDCounter As i8)
	
	GUIDCounter += 0x123F_ABCD ^ (Out As i32)
}

i8* GPT_PARTITION_TYPE_NONE := i8[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

i8* GPT_PARTITION_TYPE_SYSTEM := i8[0xC1, 0x2A, 0x73, 0x28, 0xF8, 0x1F, 0x11, 0xD2, 0xBA, 0x4B, 0x00, 0xA0, 0xC9, 0x3E, 0xC9, 0x3B]

; chosen by 16 fair dice rolls

i8* GPT_PARTITION_TYPE_CUSTOM := i8[0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]

i64 GPT_PARTITION_ATTRIBUTE_REQUIRED := 1
i64 GPT_PARTITION_ATTRIBUTE_NOT_BLOCK := 2

struct GPTDevice {
	BlockDevice* Device
	
	union {
		GPTPartitionTableHeader RawHeader
		i8[0x200] TempHeader
	}
	
	GPTPartitionTableHeader* Header
	
	i8[0x200] TempSector
	
	define void ReadHeader(i64 From) {
		this->Device->Read(From, 1, this~>RawHeader)
		this->Header := this~>RawHeader
	}
	define void WriteHeader(GPTPartitionTableHeader* Header) {
		this->Device->Write(Header->ThisHeaderLBA, 1, Header)
	}
	
	define i32 CalculatePartitionEntryArrayCRC() {
		i32 PartitionEntryArraySize := this->Header->PartitionEntryCount * this->Header->PartitionEntrySize
		
		i32 PartitionEntryArrayBlocks := PartitionEntryArraySize / 0x200
		
		if (PartitionEntryArraySize % 0x200) {
			PartitionEntryArrayBlocks += 1
		}
		
		i64 CRC := EFIStartCRC()
		
		for (i32 Index := 0, Index < PartitionEntryArrayBlocks, Index++) {
			this->Device->Read(this->Header->PartitionEntryArrayLBA + Index, 1, this->TempSector)
			
			CRC := EFIUpdateCRC(CRC, this->TempSector, 0x200)
		}
		
		return EFIFinalizeCRC(CRC)
	}
	define GPTPartitionEntry* ReadPartitionEntry(i32 Index) {
		i32 PartitionEntriesPerSector := 0x200 / this->Header->PartitionEntrySize
		i32 SectorIndex := Index / PartitionEntriesPerSector
		i32 OffsetInSector := (Index % PartitionEntriesPerSector) * this->Header->PartitionEntrySize
		
		this->Device->Read(this->Header->PartitionEntryArrayLBA + SectorIndex, 1, this->TempSector)
		
		return (this->TempSector + OffsetInSector) As GPTPartitionEntry*
	}
	define void WritePartitionEntry(i32 Index, GPTPartitionEntry* Entry) {
		i32 PartitionEntriesPerSector := 0x200 / this->Header->PartitionEntrySize
		i32 SectorIndex := Index / PartitionEntriesPerSector
		i32 OffsetInSector := (Index % PartitionEntriesPerSector) * this->Header->PartitionEntrySize
		
		this->Device->Read(this->Header->PartitionEntryArrayLBA + SectorIndex, 1, this->TempSector)

		MoveMemory(this->TempSector + OffsetInSector, Entry, #GPTPartitionEntry)
		
		this->Device->Write(this->Header->PartitionEntryArrayLBA + SectorIndex, 1, this->TempSector)
		
		
		i32 PartitionEntryArrayChecksum := this->CalculatePartitionEntryArrayCRC()
		
		for (i32 Index := 0, Index < 2, Index++) {
			this->Header->PartitionEntryArrayChecksum := PartitionEntryArrayChecksum
			this->Header->UpdateCRC()
			this->WriteHeader(this->Header)
			
			this->ReadHeader(this->Header->AlternateHeaderLBA)
		}
	}
	
	define void WriteMBR() {
		this->Device->Read(0, 1, this->TempSector)
		
		(this~>TempSector As MBR*)->WriteDefaults(MBR_PARTITION_TYPE_GPT)
		
		this->Device->Write(0, 1, this->TempSector)
	}
	
	define void Format(i64 TotalBlocks) {
		this->WriteMBR()
		
		this->Header := this~>RawHeader
		
		i64 LastLBA := TotalBlocks - 1
		
		MoveMemory(this->Header->Signature, "EFI PART", 8)
		
		this->Header->Version := GPT_VERSION_1_0
		this->Header->HeaderSize := #GPTPartitionTableHeader
		
		GenerateGUID(this->Header->DiskGUID)
		
		this->Header->ThisHeaderLBA := 1
		this->Header->AlternateHeaderLBA := LastLBA
		
		this->Header->FirstUsableBlock := 34 ; spec says so?
		this->Header->LastUsableBlock := TotalBlocks - 2
		
		this->Header->PartitionEntryArrayLBA := 2
		this->Header->PartitionEntryCount := 128
		this->Header->PartitionEntrySize := #GPTPartitionEntry
		this->Header->PartitionEntryArrayChecksum := 0
		
		this->Header->UpdateCRC()
		
		this->WriteHeader(this->Header)
		
		this->Header->ThisHeaderLBA := LastLBA
		this->Header->AlternateHeaderLBA := 1
		this->Header->UpdateCRC()
		
		this->WriteHeader(this->Header)
	}
	
	define i32 AddPartition(GPTPartitionEntry* Entry) {
		for (i32 Index := 0, Index < this->Header->PartitionEntryCount, Index++) {
			GPTPartitionEntry* NextPartition := this->ReadPartitionEntry(Index)
			
			if (NextPartition->StartingLBA = 0 && NextPartition->EndingLBA = 0) {
				this->WritePartitionEntry(Index, Entry)
				
				return Index
			}
		}
		
		return -1
	}
	
	define i8 WideStringEquals(i16* Left, i16* Right) {
		i32 Length := StringLength(Left)
		
		if (StringLength(Right) != Length) {
			return false
		}
		
		for (i32 Index := 0, Index < Length, Index++) {
			if (Left[Index] != Right[Index]) {
				return false
			}
		}
		
		return true
	}
	
	define void FindParitionEntryByName(i16* Name, i32* OutIndex, GPTPartitionEntry* OutEntry) {
		for (i32 Index := 0, Index < this->Header->PartitionEntryCount, Index++) {
			GPTPartitionEntry* NextPartition := this->ReadPartitionEntry(Index)
			
			if (NextPartition->StartingLBA != 0 || NextPartition->EndingLBA != 0) {
				if (this->WideStringEquals(NextPartition->PartitionName, Name)) {
					*OutIndex := Index
					MoveMemory(OutEntry, this->ReadPartitionEntry(Index), #GPTPartitionEntry)
				}
			}
		}
	}
}

struct GPTDeviceBinding {
	BlockDevice* Parent
	GPTDevice* Device
}

i32 GPTDeviceBindingCount
GPTDeviceBinding[10] GPTDeviceBindings

define void AddGPTDeviceBinding(BlockDevice* Parent, GPTDevice* Device) {
	GPTDeviceBinding* Slot := GPTDeviceBindings[GPTDeviceBindingCount++]
	
	Slot->Parent := Parent
	Slot->Device := Device
}

define GPTDevice* FindGPTDeviceBinding(BlockDevice* Parent) {
	for (i32 Index := 0, Index < GPTDeviceBindingCount, Index++) {
		GPTDeviceBinding* Slot := GPTDeviceBindings[Index]
		
		if (Slot->Parent = Parent) {
			return Slot->Device
		}
	}
	
	return null
}