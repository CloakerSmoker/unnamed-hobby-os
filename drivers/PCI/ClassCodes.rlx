i32 PCI_CLASS_CODE_UNCLASSIFIED             := 0
i32 PCI_CLASS_CODE_MASS_STORAGE_CONTROLLER  := 1
i32 PCI_CLASS_CODE_NETWORK_CONTROLLER       := 2
i32 PCI_CLASS_CODE_DISPLAY_CONTROLLER       := 3
i32 PCI_CLASS_CODE_MULTIMEDIA_CONTROLLER    := 4
i32 PCI_CLASS_CODE_MEMORY_CONTROLLER        := 5
i32 PCI_CLASS_CODE_BRIDGE                   := 6
i32 PCI_CLASS_CODE_COMMUNICATION_CONTROLLER := 7
i32 PCI_CLASS_CODE_SYSTEM_PERIPHERAL        := 8
i32 PCI_CLASS_CODE_INPUT_CONTROLLER         := 9
i32 PCI_CLASS_CODE_DOCKING_STATION          := 10
i32 PCI_CLASS_CODE_PROCESSOR                := 11
i32 PCI_CLASS_CODE_SERIAL_BUS_CONTROLLER    := 12
i32 PCI_CLASS_CODE_WIRELESS_CONTROLLER      := 13

i32 PCI_SUBCLASS_PCI_BRIDGE := 4

struct PCIProgramInterfaceEntry {
	i32 NameOffset
	i16 Interface
}

struct PCISubClassEntry {
	i32 NameOffset
	i16 SubClass
	i16 ProgramInterfaceCount
	
	i32[0] ProgramInterfaceEntryOffsets 
}

struct PCIClassCodeEntry {
	i32 NameOffset
	i16 ClassCode
	i16 SubClassCount
	
	i32[0] SubClasseEntryOffsets
}

struct PCIClassCodeList {
	i32 NamesOffset
	i32 ClassCodeCount
	i32[0] ClassCodeEntryOffsets
	
	define i8* Name(i32 Offset) {
		return (this As i8*) + this->NamesOffset + Offset
	}
	
	define PCIClassCodeEntry* FindClassCodeEntry(i32 ClassCode) {
		for (i32 Index := 0, Index < this->ClassCodeCount, Index++) {
			PCIClassCodeEntry* ClassEntry := (this As void*) + this->ClassCodeEntryOffsets[Index]
			
			if (ClassEntry->ClassCode = ClassCode) {
				return ClassEntry
			}
		}
		
		return null
	}
	define i8* GetClassCodeName(i32 ClassCode) {
		PCIClassCodeEntry* Entry := this->FindClassCodeEntry(ClassCode)
		
		if (Entry) {
			return this->Name(Entry->NameOffset)
		}
		
		return "Unknown"
	}
	
	define PCISubClassEntry* FindSubClassEntry(PCIClassCodeEntry* Entry, i32 SubClass) {
		for (i32 Index := 0, Index < Entry->SubClassCount, Index++) {
			PCISubClassEntry* SubClassEntry := (this As void*) + Entry->SubClasseEntryOffsets[Index]
			
			if (SubClassEntry->SubClass = SubClass) {
				return SubClassEntry
			}
		}
		
		return null
	}
	define i8* GetSubClassName(i32 ClassCode, i32 SubClass) {
		PCIClassCodeEntry* ClassEntry := this->FindClassCodeEntry(ClassCode)
		
		if (ClassEntry) {
			PCISubClassEntry* SubClassEntry := this->FindSubClassEntry(ClassEntry, SubClass)
			
			if (SubClass) {
				return this->Name(SubClassEntry->NameOffset)
			}
			
			return this->Name(ClassEntry->NameOffset)
		}
		
		return "Unknown"
	}
	
	define PCIProgramInterfaceEntry* FindInterfaceEntry(PCISubClassEntry* Entry, i32 Interface) {
		for (i32 Index := 0, Index < Entry->ProgramInterfaceCount, Index++) {
			PCIProgramInterfaceEntry* InterfaceEntry := (this As void*) + Entry->ProgramInterfaceEntryOffsets[Index]
			
			if (InterfaceEntry->Interface = Interface) {
				return InterfaceEntry
			}
		}
		
		return null
	}
	define i8* GetInterfaceName(i32 ClassCode, i32 SubClass, i32 Interface) {
		PCIClassCodeEntry* ClassEntry := this->FindClassCodeEntry(ClassCode)
		
		if (ClassEntry) {
			PCISubClassEntry* SubClassEntry := this->FindSubClassEntry(ClassEntry, SubClass)
			
			if (SubClassEntry) {
				PCIProgramInterfaceEntry* InterfaceEntry := this->FindInterfaceEntry(SubClassEntry, Interface)
				
				if (InterfaceEntry) {
					return this->Name(InterfaceEntry->NameOffset)
				}
				
				return this->Name(SubClassEntry->NameOffset)
			}
			
			return this->Name(ClassEntry->NameOffset)
		}
		
		return "Unknown"
	}
	define i32 GetNames(i32 ClassCode, i32 SubClass, i32 Interface, i8** OutNames) {
		PCIClassCodeEntry* ClassEntry := this->FindClassCodeEntry(ClassCode)
		
		if (ClassEntry) {
			OutNames[0] := this->Name(ClassEntry->NameOffset)
			
			PCISubClassEntry* SubClassEntry := this->FindSubClassEntry(ClassEntry, SubClass)
			
			if (SubClassEntry) {
				OutNames[1] := this->Name(SubClassEntry->NameOffset)
				
				PCIProgramInterfaceEntry* InterfaceEntry := this->FindInterfaceEntry(SubClassEntry, Interface)
				
				if (InterfaceEntry) {
					OutNames[2] := this->Name(InterfaceEntry->NameOffset)
					
					return 3
				}
				
				return 2
			}
			
			return 1
		}
		else {
			OutNames[0] := "Unknown"
			
			return 1
		}
	}
	
	define void Print(i32 ClassCode, i32 SubClass, i32 Interface) {
		i8*[3] Names
		
		i32 Count := this->GetNames(ClassCode, SubClass, Interface, Names)
		
		for (i32 Index := 0, Index < Count - 1, Index++) {
			Print("%s > ", Names[Index])
		}
		
		Print("%s", Names[Index])
	}
}

PCIClassCodeList* PCIClassCodes := PCIClassCodeList[#file "./src/drivers/PCI/ClassCodes.bin"]

;define void Main() {
;	
;	;i64 f := FileOpen("./src/drivers/PCI/ClassCodes.bin", FILE_READ)
;	;
;	;void* Data := FileReadAll(f)
;	;
;	;FileClose(f)
;	;
;	;PCIClassCodeList* List := Data
;	
;	PCIClassCodes->Print(0xC, 0x3, 0x30)
;	
;	
;	;i8* Names := Data + List->NamesOffset
;	;
;	;for (i32 Index := 0, Index < List->ClassCodeCount, Index++) {
;	;	PCIClassCodeEntry* Entry := Data + List->ClassCodeEntryOffsets[Index]
;	;	
;	;	Print("%x %s\n", Entry->ClassCode, &Names[Entry->NameOffset])
;	;	
;	;	for (i32 SubClassIndex := 0, SubClassIndex < Entry->SubClassCount, SubClassIndex++) {
;	;		PCISubClassEntry* SubClassEntry := Data + Entry->SubClasseEntryOffsets[SubClassIndex]
;	;		
;	;		Print("\t%x %s\n", SubClassEntry->SubClass, &Names[SubClassEntry->NameOffset])
;	;		
;	;		for (i32 InterfaceIndex := 0, InterfaceIndex < SubClassEntry->ProgramInterfaceCount, InterfaceIndex++) {
;	;			PCIProgramInterfaceEntry* InterfaceEntry := Data + SubClassEntry->ProgramInterfaceEntryOffsets[InterfaceIndex]
;	;			
;	;			Print("\t\t%x %s\n", InterfaceEntry->Interface, &Names[InterfaceEntry->NameOffset])
;	;		}
;	;	}
;	;}
;	
;}