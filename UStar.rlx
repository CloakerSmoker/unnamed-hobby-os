struct UStarHeader unaligned {
	i8{100} Name,
	i64 FileMode,
	i64 OwnerID,
	i64 GroupID,
	i8{12} FileSize,
	i8{12} LastModification,
	i64 Checksum,
	i8 Type,
	i8{100} LinkedFileName,
	i8{6} Magic,
	i16 Version,
	i8{32} OwnerName,
	i8{32} OwnerGroupName,
	i64 MajorDeviceNumber,
	i64 MinorDeviceNumber,
	i8{155} FileNamePrefix
}

UStarHeader* RootFS := 0

i8 NormalFile := '0'
i8 HardLink := '1'
i8 SoftLink := '2'
i8 CharacterSpecial := '3'
i8 BlockSpecial := '4'
i8 Directory := '5'
i8 FIFO := '6'
i8 ContiguosFile := '7'

define UStarHeader* FindFileHeader(UStarHeader* FS, i8* Name, i32** OutFileSize) {
	while (StartsWith(FS~>Magic, "ustar")) {
		i32 FileSize := AToI(FS~>FileSize, 8)
		
		if (StringEquals(FS~>Name, Name)) {
			OutFileSize[0] := FileSize
			
			return FS
		}
		
		i32 Offset := ((FileSize / 512) * 512) + 512
		i32 Remainder := FileSize % 512
		
		if (Remainder != 0) {
			Offset += 512
		}
		
		FS += Offset
	}
	
	return 0
}

define i8 FindFile(UStarHeader* FS, i8* Name, void** OutFileData, i32* OutFileSize) {
	UStarHeader* FileHeader := FindFileHeader(FS, Name, OutFileSize)
	
	if (FileHeader != 0) {
		OutFileData[0] := FileHeader + 512
		return true
	}
	
	return false
}

define void FSInfo(i8* Message) {
	TerminalPrintFormat(" ^E0[ FS ]^F0 %s\n", Message)
}

define void FileSystemCheck() {
	void* CheckData := 0
	i32 CheckSize := 0
	
	i8 Result := FindFile(RootFS, "FSCheck.txt", &CheckData, &CheckSize)
	
	if (Result = 0) {
		FSInfo("File system check FAILED")
	}
	
	if (StartsWith(CheckData As i8*, "File system check PASSED")) {
		FSInfo(CheckData)
	}
}
