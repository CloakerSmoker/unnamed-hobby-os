struct UStarHeader unaligned {
	i8{100} Name,
	i64 FileMode,
	i64 OwnerID,
	i64 GroupID,
	i8{12} FileSize,
	i8{12} LastModification,
	i64 Checksum,
	i8 Type,
	i8{100} LinkedFileName,
	i8{6} Magic,
	i16 Version,
	i8{32} OwnerName,
	i8{32} OwnerGroupName,
	i64 MajorDeviceNumber,
	i64 MinorDeviceNumber,
	i8{155} FileNamePrefix
}

UStarHeader* RootFS := 0

i8 NormalFile := '0'
i8 HardLink := '1'
i8 SoftLink := '2'
i8 CharacterSpecial := '3'
i8 BlockSpecial := '4'
i8 Directory := '5'
i8 FIFO := '6'
i8 ContiguosFile := '7'

define i32 RoundFileSize(i32 FileSize) {
	i32 Offset := ((FileSize / 512) * 512) + 512
	i32 Remainder := FileSize % 512
	
	if (Remainder != 0) {
		Offset += 512
	}
	
	return Offset
}

define UStarHeader* FindFileHeader(UStarHeader* FS, i8* Name, i32* OutFileSize, i8 StartsWithCompare) {
	while (StartsWith(FS~>Magic, "ustar")) {
		i32 FileSize := AToI(FS~>FileSize, 8)
		
		i8 Found := false
		
		if (StartsWithCompare) {
			Found := StartsWith(FS~>Name, Name)
		}
		else {
			Found := StringEquals(FS~>Name, Name)	
		}
		
		if (Found) {
			OutFileSize[0] := FileSize
			
			return FS
		}
		
		FS += RoundFileSize(FileSize)
	}
	
	return null
}

define i8 FindFile(UStarHeader* FS, i8* Name, void** OutFileData, i32* OutFileSize) {
	UStarHeader* FileHeader := FindFileHeader(FS, Name, OutFileSize, false)
	
	if (FileHeader != 0) {
		OutFileData[0] := FileHeader + 512
		return true
	}
	
	return false
}

define void ListFiles(UStarHeader* FS, i8* NamePrefix) {
	UStarHeader* Next := FS
	i32 FileSize := 0
	
	loop {
		Next := FindFileHeader(Next, NamePrefix, &FileSize, true)
		
		if !(Next) {
			break
		}
		
		TerminalPrintFormat("    ^90%x^F0\t    %s\n", FileSize, Next~>Name)
		Next += RoundFileSize(FileSize)
	}
}


define void FSInfo(i8* Message) {
	TerminalPrintFormat(" ^E0[ FS ]^F0 %s\n", Message)
}

/* #Include ./src/BlockDevice.rlx */

define void FileSystemCheck() {
	void* CheckData := 0
	i32 CheckSize := 0
	
	i8 Result := FindFile(RootFS, "FSCheck.txt", &CheckData, &CheckSize)
	
	if (Result = 0) {
		FSInfo("File system check FAILED")
	}
	
	if (StartsWith(CheckData As i8*, "File system check PASSED")) {
		FSInfo(CheckData)
	}
	
	/* ATATest() */
}

