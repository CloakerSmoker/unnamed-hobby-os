
i16 PS2_DATA := 0x60

define i8 ScanCodeToASCII(i16 ScanCode) {
	/* Note: This doesn't need to work for all characters, since it is only used for displaying, not for logic. */
	
	i8* Map := "  1234567890-=  qwertyuiop[]  asdfghjkl;'`  \zxcvbnm,./ *  "
	i32 MapMax := 59
	
	if (ScanCode >= MapMax) {
		return ' '
	}
	else {
		return Map[ScanCode]
	}
}

declare void KeyboardWait(i8, i8)

define void KeyboardEvent() {
	/* IRQ1 handler */
	
	KeyboardWait(0, 1)
	i16 ScanCode := InB(PS2_DATA) As i16
	i8 ASCIICode := ScanCodeToASCII(ScanCode)
	
	if !(ScanCode & 0x80) {
		Terminal->Print(&ASCIICode, 1)
	}
	
	SendEOI(1)
}

define void _KeyboardEvent() asm {
	call, @InterruptSetup	/* Saves all GPRs */
	call, @KeyboardEvent	/* Call the actual handler */
	jmp, @InterruptReturn	/* Pop all GPRs, iretq */
}

i8 KEYBOARD_DATA := 0x60
i8 KEYBOARD_COMMAND := 0x64
i8 KEYBOARD_STATUS := 0x64

i8 CONTROLLER_READ_COMMAND := 0x20
i8 CONTROLLER_WRITE_COMMAND := 0x60
i8 CONTROLLER_DISABLE_AUX := 0xA7 As i8
i8 CONTROLLER_ENABLE_AUX := 0xA8 As i8
i8 CONTROLLER_DISABLE := 0xAD As i8
i8 CONTROLLER_ENABLE := 0xAE As i8

define void KeyboardWait(i8 ForWrite, i8 TargetStatus) {
	/* Bit 0 = read status, bit 1 = write status */
	
	i8 Mask := (1 << ForWrite) As i8
	TargetStatus := (TargetStatus << ForWrite) As i8
	
	loop {
		i8 Status := InB(KEYBOARD_STATUS)
		
		if ((Status & Mask) = TargetStatus) {
			return
		}
	}
}

i16 KEYBOARD_WAIT_INPUT := 0x100

define i8 KeyboardSendCommand(i16 Command, ... Bytes) {
	KeyboardWait(1, 0)
	
	OutB(KEYBOARD_COMMAND, (Command & 0xFF) As i8)
	
	for (i32 Index := 1, Index <= Bytes[0], Index += 1) {
		KeyboardWait(1, 0)
		OutB(KEYBOARD_DATA, Bytes[Index] As i8)
	}
	
	if (Command > 0xFF) {
		KeyboardWait(0, 1)
		
		return InB(KEYBOARD_DATA)
	}
	
	return 0
}

define void SetupKeyboard() {
	/* Called with interrupts disabled, and before the IDT is loaded */
	
	KeyboardSendCommand(CONTROLLER_DISABLE)
	KeyboardSendCommand(CONTROLLER_DISABLE_AUX)
	
	InB(KEYBOARD_DATA) /* Flush input buffer */
	
	/* Enable interrupts for both PS/2 ports, enable first port translation(?) */
	i8 ConfigByte := KeyboardSendCommand(CONTROLLER_READ_COMMAND | KEYBOARD_WAIT_INPUT)
	ConfigByte := ConfigByte | 0x43
	KeyboardSendCommand(CONTROLLER_WRITE_COMMAND, ConfigByte)
	
	KeyboardSendCommand(CONTROLLER_ENABLE)
	KeyboardSendCommand(CONTROLLER_ENABLE_AUX)
	
	InsertIDTEntry(0x21, &_KeyboardEvent, true)
	EnablePICLine(1, true)
}
