#Require "$/Console.rlx"
#Require "$/Exception.rlx"
#Require "$/String.rlx"
#Require "$/File.rlx"
#Require "$/Debug.rlx"

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/FileBlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

define void PrintByte(i64 Number) {
	PrintCharacter(NumberToCharacter(((Number >> 4) & 0xF) As i8))
	PrintCharacter(NumberToCharacter((Number & 0xF) As i8))
}

define void PrintGUID(i8* this) {
	Print("{")
	
	for (i32 Index := 0, Index < 4, Index++) {
		PrintByte(this[Index])
	}
	
	Print("-")
	
	for (i32 Index := 4, Index < 6, Index++) {
		PrintByte(this[Index])
	}
	
	Print("-")
	
	for (i32 Index := 6, Index < 8, Index++) {
		PrintByte(this[Index])
	}
	
	Print("-")
	
	for (i32 Index := 8, Index < 10, Index++) {
		PrintByte(this[Index])
	}
	
	Print("-")
	
	for (i32 Index := 10, Index < 16, Index++) {
		PrintByte(this[Index])
	}
	
	Print("}")
}

define void PrintGPTPartitionTableHeader(GPTPartitionTableHeader* this) {
	Print("GPTPartitionTableHeader {\n")
	Print("\tSignature                  : %s\n", this~>Signature)
	Print("\tVersion                    : %x\n", this->Version)
	Print("\tHeaderSize                 : %x\n", this->HeaderSize)
	Print("\tChecksum                   : %i\n", this->Checksum)
	
	Print("\tThisHeaderLBA              : %x\n", this->ThisHeaderLBA)
	Print("\tAlternateHeaderLBA         : %x\n", this->AlternateHeaderLBA)
	
	Print("\tFirstUsableBlock           : %x\n", this->FirstUsableBlock)
	Print("\tLastUsableBlock            : %x\n", this->LastUsableBlock)
	
	Print("\tDiskGUID                   : ")
	PrintGUID(this->DiskGUID)
	Print("\n")
	
	Print("\tPartitionEntryArrayLBA     : %x\n", this->PartitionEntryArrayLBA)
	Print("\tPartitionEntryCount        : %x (%i)\n", this->PartitionEntryCount, this->PartitionEntryCount)
	Print("\tPartitionEntrySize         : %x\n", this->PartitionEntrySize)
	Print("\tPartitionEntryArrayChecksum: %i\n", this->PartitionEntryArrayChecksum)
	Print("}\n")
}

define void PrintGPTPartitionEntryAttributes(i64 Attributes) {
	if (Attributes & GPT_PARTITION_ATTRIBUTE_REQUIRED) {
		Print("[required] ")
	}
	
	if (Attributes & GPT_PARTITION_ATTRIBUTE_NOT_BLOCK) {
		Print("[not block] ")
	}
	
	Attributes &= ~(GPT_PARTITION_ATTRIBUTE_REQUIRED | GPT_PARTITION_ATTRIBUTE_NOT_BLOCK)
	
	if (Attributes) {
		Print("[unknown %x] ", Attributes)
	}
}

define void PrintGPTPartitionEntry(GPTPartitionEntry* this) {
	if (this->StartingLBA = 0 && this->EndingLBA = 0) {
		return
	}
	
	Print("GPTPartitionEntry {\n")
	
	Print("\tPartitionTypeGUID: ")
	
	if (CompareMemory(this->PartitionTypeGUID, GPT_PARTITION_TYPE_SYSTEM, 16)) {
		Print("[EFI system] ")
	}
	else if (CompareMemory(this->PartitionTypeGUID, GPT_PARTITION_TYPE_CUSTOM, 16)) {
		Print("[Custom] ")
	}
	
	PrintGUID(this->PartitionTypeGUID)
	Print("\n")
	
	Print("\tPartitionGUID    : ")
	PrintGUID(this->PartitionGUID)
	Print("\n")
	
	Print("\tStartingLBA      : %x\n", this->StartingLBA)
	Print("\tEndingLBA        : %x\n", this->EndingLBA)
	Print("\tAttributes       : ")
	PrintGPTPartitionEntryAttributes(this->Attributes)
	Print("\n")
	
	Print("\tName             : %s\n", WToA(this~>PartitionName))
	Print("}\n")
}

define i64 ParseBlockCount(i8* ValueString, i8* Scale) {
	i64 Value := AToI(ValueString)
	
	if (ValueString[0] = '0' && ValueString[1] = 'x') {
		Value := AToI(&ValueString[2], 16)
	}
	
	if (Scale != null) {
		if (Scale[0] = 'm') {
			Value *= 0x800	
		}
		else {
			Print("Unknown scale '%s', defaulting to 1\n", Scale)
		}
	}
	
	return Value
}

define void PromptPartitionUpdate(GPTDevice* Device, GPTPartitionEntry* Entry) {
	loop {
		Print("^90-->^F0")
		i8* NextLine := ReadLine()
		
		i64 ArgC := 0
		i8** ArgV := null
		
		ParseCommandLine(NextLine, &ArgC, &ArgV)
		i8* Command := ArgV[0]
		
		i64 Argument := 0
		
		if (StringEquals(Command, "start")) {
			Argument := ParseBlockCount(ArgV[1], ArgV[2])
			
			Entry->StartingLBA := Argument
			Print(" + Set entry StartingLBA to %x\n", Argument)
		}
		else if (StringEquals(Command, "end")) {
			Argument := ParseBlockCount(ArgV[1], ArgV[2])
			
			Entry->EndingLBA := Argument
			Print(" + Set entry EndingLBA to %x\n", Argument)
		}
		else if (StringEquals(Command, "name")) {
			i32 NameLength := StringLength(ArgV[1])
			
			MoveMemory(Entry~>PartitionName, AToW(ArgV[1], NameLength), NameLength * 2)
			Print(" + Set entry name to '%s'\n", ArgV[1])
		}
		else if (StringEquals(Command, "type")) {
			if (StringEquals(ArgV[1], "system")) {
				MoveMemory(Entry~>PartitionTypeGUID, GPT_PARTITION_TYPE_SYSTEM, 16)
			}
			else if (StringEquals(ArgV[1], "custom")) {
				MoveMemory(Entry~>PartitionTypeGUID, GPT_PARTITION_TYPE_CUSTOM, 16)
			}
			else if (StringEquals(ArgV[1], "none")) {
				MoveMemory(Entry~>PartitionTypeGUID, GPT_PARTITION_TYPE_NONE, 16)
			}
			else {
				Print(" - Unknown partition type '%s'\n", ArgV[1])
				continue
			}
			
			Print("Set partition type to %s\n", ArgV[1])
		}
		else if (StringEquals(Command, "attr")) {
			i8 NegateNext := false
			
			for (i32 Index := 1, Index < ArgC, Index++) {
				if (StringEquals(ArgV[Index], "!")) {
					NegateNext := true
				}
				else {
					i64 AttributeMask := 0
					
					if (StringEquals(ArgV[Index], "required")) {
						AttributeMask := GPT_PARTITION_ATTRIBUTE_REQUIRED
					}
					else if (StringEquals(ArgV[Index], "not_block")) {
						AttributeMask := GPT_PARTITION_ATTRIBUTE_NOT_BLOCK
					}
					
					if (NegateNext) {
						Entry->Attributes &= ~AttributeMask
					}
					else {
						Entry->Attributes |= AttributeMask
					}
				}
			}
			
			Print(" + Updated entry attributes to ")
			PrintGPTPartitionEntryAttributes(Entry->Attributes)
			Print("\n")
		}
		else {
			return
		}
	}
}

define void Prompt(GPTDevice* Device) {
	Device->ReadHeader(1)
	PrintGPTPartitionTableHeader(Device->Header)
	
	loop {
		Print("^90->^F0")
		i8* NextLine := ReadLine()
		
		i64 ArgC := 0
		i8** ArgV := null
		
		ParseCommandLine(NextLine, &ArgC, &ArgV)
		i8* Command := ArgV[0]
		i8* Path := ArgV[1]
		
		if (StringEquals(Command, "ls")) {
			for (i32 Index := 0, Index < Device->Header->PartitionEntryCount, Index++) {
				GPTPartitionEntry* NextPartition := Device->ReadPartitionEntry(Index)
				
				PrintGPTPartitionEntry(NextPartition)
			}
		}
		else if (StringEquals(Command, "format")) {
			i64 DeviceSize := ParseBlockCount(ArgV[1], ArgV[2])
			
			Device->Format(DeviceSize)
			Device->ReadHeader(1)
			PrintGPTPartitionTableHeader(Device->Header)
		}
		else if (StringEquals(Command, "headers")) {
			Device->ReadHeader(1)
			PrintGPTPartitionTableHeader(Device->Header)
			
			Device->ReadHeader(Device->Header->AlternateHeaderLBA)
			PrintGPTPartitionTableHeader(Device->Header)
		}
		else if (StringEquals(Command, "create")) {
			GPTPartitionEntry* NewEntry := Alloc(#GPTPartitionEntry)
			
			GenerateGUID(NewEntry->PartitionGUID)
			
			PromptPartitionUpdate(Device, NewEntry)
			
			i32 Index := Device->AddPartition(NewEntry)
			
			Free(NewEntry)
			
			if (Index = -1) {
				Print("Could not add entry, partition entry table has no free slots\n")
			}
			else {
				Print("Added entry in slot %i\n", Index)
			}
		}
		else if (StringEquals(Command, "update")) {
			i32 UpdateEntryIndex := AToI(ArgV[1]) As i32
			
			GPTPartitionEntry UpdateEntry
			
			MoveMemory(&UpdateEntry, Device->ReadPartitionEntry(UpdateEntryIndex), #GPTPartitionEntry)
			
			Print("Updating:\n")
			PrintGPTPartitionEntry(&UpdateEntry)
			
			PromptPartitionUpdate(Device, &UpdateEntry)
			
			Device->WritePartitionEntry(UpdateEntryIndex, &UpdateEntry)
			
			Print("Updated entry in slot %i\n", UpdateEntryIndex)
		}
		else if (StringEquals(Command, "import-image")) {
			i8* PartitionName := ArgV[1]
			
			BlockDevice* PartitionDevice := NewBlockDevice(Device->Device, &GPTPartitionBlockDevicePrototype, PartitionName)
			
			GPTPartitionEntry* Partition := (PartitionDevice As GPTPartitionBlockDeviceInstance)~>Entry
			
			if !(PartitionDevice) {
				Print("Could not find partition '%s'\n", PartitionName)
				continue
			}
			
			i8* RealPath := ArgV[2]
			
			i64 File := FileOpen(RealPath, FILE_READ)
			
			if (File < 0) {
				Print("Could not open real file '%s', error %i\n", RealPath, File)
				continue
			}
			
			i32 ImportSize := FileGetSize(File)
			void* ImportData := FileReadAll(File)
			
			i32 PartitionSectors := (Partition->EndingLBA - Partition->StartingLBA) As i32
			i32 PartitionSize := PartitionSectors * 0x200
			
			if (ImportSize > PartitionSize) {
				Print("Image is %x bytes, partition has %x bytes of space, can't import\n", ImportSize, PartitionSize)
				continue
			}
			
			Print("Importing %x byte image to %x byte partition, %x bytes of space remaining on partition\n", ImportSize, PartitionSize, PartitionSize - ImportSize)
			
			i32 ImportSectorCount := ImportSize / 0x200
			
			PartitionDevice->Write(0, ImportSectorCount, ImportData)
			
			i32 ImportLastSectorSize := ImportSize % 0x200
			
			if (ImportLastSectorSize) {
				MoveMemory(Device->TempSector, ImportData + (ImportSectorCount * 0x200), ImportLastSectorSize)
				PartitionDevice->Write(ImportSectorCount, 1, Device->TempSector)
			}
			
			Print("Done, wrote %x blocks of %x block partition\n", ImportSectorCount + !!ImportLastSectorSize, PartitionSectors)
			
			FileClose(File)
		}
		else if (StringEquals(Command, "fix_mbr")) {
			Device->WriteMBR()
		}
		else {
			return
		}
	}
}

define i32 Main(i64 ArgC, i8** ArgV) {
	GetArgs(&ArgC, &ArgV)
	
	i8* ProgramDirectory := GetAbsolutePath(Concatenate(ArgV[0], "/../"))
	Print("%s\n", ProgramDirectory)
	SetWorkingDirectory(ProgramDirectory)
	
	BlockDevice* Device := InstantiateBlockDeviceChainFromPath(ArgV[1])
	
	GPTDevice* GPTParent := Alloc(#GPTDevice)
	GPTParent->Device := Device
	
	AddGPTDeviceBinding(Device, GPTParent)
	
	Prompt(GPTParent)
	
	return 0
}