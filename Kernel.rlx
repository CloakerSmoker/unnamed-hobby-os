#ImageBase 0x34000

struct IDTEntry unaligned {
	i16 OffsetLow16,
	i16 Selector,
	i8 PaddingZero,
	i8 Flags,
	i16 OffsetHigh16,
	i32 OffsetHigh32,
	i32 Padding
}

struct IDT unaligned {
	i16 Size,
	IDTEntry* Start
}

bits GDTEntry As i64 {
	[0:15] LimitLow16,
	[16:31] BaseLow16,
	[32:39] BaseMiddle8,
	[40:47] Access,
	[48:51] LimitHigh4,
	[52:55] Flags,
	[56:63] BaseHigh8
}

struct GDT unaligned {
	i16 Size,
	i64* Start
}

IDTEntry* IDT := StaticAllocate:(1000)
IDT* IDTHeader := StaticAllocate:(0x10)

i64 TickCount := 0 /* Updated by the PIT inside of Time.rlx */

define i64 ReadRSP() asm {
	mov, rax, rsp
	ret
}

i64 StackBottom := 0
i64 KernelLimit := 0
void* SetCR3 := 0

struct ASMHelpers {
	void* pSetCR3,
	void* pGetCR3,
	
	define i64 Call(void* Function, void* Parameter) asm {
		xchg, rdi, rdx
		call, rsi
		ret
	},
	define void SetCR3(void** ToPLM4) {
		return this->Call(this->pSetCR3, ToPLM4 As void*)
	},
	define i64 GetCR3() {
		return this->Call(this->pGetCR3, 0 As void*)
	}
}

ASMHelpers* Helpers := 0

#Include ./src/Utility.rlx
#Include ./src/VGA.rlx

define void BootInfo(i8* Message) {
	TerminalPrintFormat(" ^D0[BOOT]^F0 %s\n", Message)
}

#Include ./src/UStar.rlx
#Include ./src/Interrupts.rlx
#Include ./src/Paging.rlx


define void Main(i64 _KernelLimit, void* _Helpers, UStarHeader* FS) {
	TerminalClear()
	
	BootInfo("Main()")
	
	StackBottom := ReadRSP()
	KernelLimit := _KernelLimit
	RootFS := FS
	Helpers := _Helpers As ASMHelpers*
	
	BootInfo("Bootloader info saved")
	
	SetupPaging()
	
	SetupInterrupts()
	BootInfo("Interrupts enabled")
	
	BootInfo("Main() complete")
	
	FileSystemCheck()
	
	Prompt()
	
	loop {}
}
