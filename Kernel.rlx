#StandAlone
#ImageBase 0xC000

struct IDTEntry unaligned {
	i16 OffsetLow16,
	i16 Selector,
	i8 PaddingZero,
	i8 Flags,
	i16 OffsetHigh16,
	i32 OffsetHigh32,
	i32 Padding
}

struct IDT unaligned {
	i16 Size,
	IDTEntry* Start
}

bits GDTEntry As i64 {
	[0:15] LimitLow16,
	[16:31] BaseLow16,
	[32:39] BaseMiddle8,
	[40:47] Access,
	[48:51] LimitHigh4,
	[52:55] Flags,
	[56:63] BaseHigh8
}

struct GDT unaligned {
	i16 Size,
	i64* Start
}

/* Pad the output file so IDT starts at a multiple of 16 */
i64 Dummy0
i16 Dummy1
i8 Dumm2

IDTEntry* IDT := StaticAllocate:(1000)
IDT* IDTHeader := StaticAllocate:(0x10)

i64 TickCount := 0 /* Updated by the PIT inside of Time.rlx */

define i64 ReadRSP() asm {
	mov, rax, rsp
	ret
}

i64 StackBottom := 0
i64 KernelLimit := 0
void* SetCR3 := 0

define void __Call(void* Function, i64 Parameter) asm {
	xchg, rdi, rsi
	call, rsi
	ret
} 

struct __Intrinsics {
	void* SetCR3,
	void* GetCR3
}

__Intrinsics* __Intrinsics := 0

#Include ./src/Utility.rlx
#Include ./src/VGA.rlx

define void BootInfo(i8* Message) {
	/* i16 OldColor := TerminalColor */
	/* TerminalColor := PackColor(VGA_BLUE | VGA_BRIGHT | VGA_RED, VGA_BLACK) */
	
	TerminalPrintFormat(" ^D0[BOOT]^F0 ")
	/* TerminalColor := OldColor */
	
	TerminalPrintFormat("%s\n", Message)
}

#Include ./src/Interrupts.rlx
#Include ./src/Paging.rlx

define void Main(i64 _KernelLimit, void* _Intrinsics) {
	TerminalClear()
	
	BootInfo("Main()")
	
	StackBottom := ReadRSP()
	KernelLimit := _KernelLimit
	__Intrinsics := _Intrinsics
	
	BootInfo("Bootloader info saved")
	
	SetupInterrupts()
	BootInfo("Interrupts enabled")
	
	SetupPaging()
	
	BootInfo("Main() complete, spinning")
	
	Prompt()
	
	loop {}
}
