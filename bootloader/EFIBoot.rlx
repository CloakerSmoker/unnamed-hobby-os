#Require "./src/utility/EFIApplication.rlx"

define i64 EFIMain(EFI_HANDLE* ImageHandle, EFI_SYSTEM_TABLE* SystemTable) {
    i64 Status := 0

    ;Status := SystemTable->ConsoleOutput->OutputString("Hello EFI world!\n"w)
	Print("Hello new EFI world!\n")
	
	SystemTable->ConsoleInput->Reset()
	SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)
	
	EFI_DEVICE_PATH_TO_TEXT_PROTOCOL* ToText := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID, &ToText As void**)
	
	EFI_DEVICE_PATH_UTILITIES_PROTOCOL* DevicePathHelpers := null
	SystemTable->BootServices->LocateProtocol(EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID, &DevicePathHelpers As void**)
	
	if !(ToText) || !(DevicePathHelpers) {
		Print("Can't find to text or device path helper protocol\n")
		return 0
	}
	
	EFI_LOADED_IMAGE_PROTOCOL* LoadedImage := null
	SystemTable->BootServices->HandleProtocol(ImageHandle, EFI_LOADED_IMAGE_PROTOCOL_GUID, &LoadedImage As void**)
	
	EFI_DEVICE_PATH_PROTOCOL* LoadedImageDevicePath := null
	SystemTable->BootServices->HandleProtocol(LoadedImage->DeviceHandle, EFI_DEVICE_PATH_PROTOCOL_GUID, &LoadedImageDevicePath As void**)
	
	i16* LoadedImageDevicePathText := ToText->ConvertDevicePathToText(LoadedImageDevicePath, true, true)
	
	Print("Boot Device Path: %w\n", LoadedImageDevicePathText)
	
	SystemTable->BootServices->FreePool(LoadedImageDevicePathText)
	
	EFI_DEVICE_PATH_PROTOCOL* RootDevicePath := DevicePathHelpers->DuplicateDevicePath(LoadedImageDevicePath)
	RootDevicePath->PopNode()
	
	
	i16* RootDevicePathText := ToText->ConvertDevicePathToText(RootDevicePath, true, true)
	
	Print("Boot Device Parent Path: %w\n", RootDevicePathText)
	
	SystemTable->BootServices->FreePool(RootDevicePathText)
	
	i32 SizeNeeded := 0
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	i32 Count := SizeNeeded / 8
	
	i32 ChildIndex := 0
	
	for (i32 Index := 0, Index < Count, Index++) {
		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
		
		SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)
		
		if (HandlePath->Equals(RootDevicePath)) {
			continue
		}
		
		EFI_DEVICE_PATH_PROTOCOL* HandleParentPath := DevicePathHelpers->DuplicateDevicePath(HandlePath)
		
		HandleParentPath->PopNode()
		
		if (HandleParentPath->Equals(RootDevicePath)) {
			i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
			
			Print("Child #%i: %w\n", ChildIndex++, DeviceText)
			
			SystemTable->BootServices->FreePool(DeviceText)
		}
		
		SystemTable->BootServices->FreePool(HandleParentPath)
	}
	
	;i32 SizeNeeded := 0
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, null)
	;EFI_HANDLE** Handles := SystemTable->BootServices->AllocatePool(SizeNeeded)
	;SystemTable->BootServices->LocateHandle(EFI_LOCATE_SEARCH_TYPE_BY_PROTOCOL, EFI_BLOCK_IO_PROTOCOL_GUID, null, &SizeNeeded, Handles)
	;i32 Count := SizeNeeded / 8
	;
	;PrintString(SystemTable, "There are ")
	;PrintHex(SystemTable, Count)
	;PrintString(SystemTable, " block devices\n")
	;
	;for (i32 Index := 0, Index < Count, Index++) {
	;	EFI_BLOCK_IO_PROTOCOL* HandleBlockIO := null
	;	
	;	SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_BLOCK_IO_PROTOCOL_GUID, &HandleBlockIO As void**)
	;	
	;	if (HandleBlockIO) {
	;		EFI_DEVICE_PATH_PROTOCOL* HandlePath := null
	;		
	;		SystemTable->BootServices->HandleProtocol(Handles[Index], EFI_DEVICE_PATH_PROTOCOL_GUID, &HandlePath As void**)
	;		
	;		i16* DeviceText := ToText->ConvertDevicePathToText(HandlePath, true, true)
	;		
	;		PrintString(SystemTable, "Device ")
	;		PrintHex(SystemTable, Index)
	;		PrintString(SystemTable, ": ")
	;		SystemTable->ConsoleOutput->OutputString(DeviceText)
	;		PrintString(SystemTable, "\n")
	;		
	;		SystemTable->BootServices->FreePool(DeviceText)
	;	}
	;}
	;
	;SystemTable->BootServices->FreePool(Handles)
	
	SystemTable->ConsoleInput->Reset()
	SystemTable->BootServices->WaitForEvent(SystemTable->ConsoleInput->WaitForKey)

    return Status
}