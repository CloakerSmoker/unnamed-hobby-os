;/* Int 0 */
;
;define void DivideByZero(InterruptContext* C, Registers* R) {
;	TerminalAWriteLine("DIVIDE BY ZERO: n/a")
;}
;define void _DivideByZero() asm {
;	call, @InterruptSetup
;	call, @DivideByZero
;	jmp, @InterruptReturn
;}
;
;
;/* Int 3 */
;
;define void Breakpoint(InterruptContext* C, Registers* R) {
;	TerminalAWriteLine("BREAKPOINT: int3")
;}
;define void _Breakpoint() asm {
;	call, @InterruptSetup
;	call, @Breakpoint
;	jmp, @InterruptReturn
;}
;
;/* Int 11 */
;
;define void BadSegment(InterruptContext* C, Registers* R) {
;	TerminalPrintFormat("BAD SEGMENT:\n	RIP = %x", C->RIP)
;}
;define void _BadSegment() asm {
;	call, @InterruptCodeSetup
;	call, @BadSegment
;	jmp, @InterruptReturn
;}

define void SpuriousInterrupt(InterruptContext* Context, Registers* Registers) {
	Pixel* Pixel := Screen->GetPixelAddress(1000, 200)
	
	Pixel->Red += 20
}

/* Int 0x27 */
define void _SpuriousInterrupt() asm {
	call, @InterruptSetup
	call, @SpuriousInterrupt
	jmp, @InterruptReturn
}


/* Add actual IDT entries */

#Require "./src/Keyboard.rlx"

define void AddHandlers() {
	SetupKeyboard()
	
	InsertIDTEntry(0x27, &_SpuriousInterrupt, true)
}
