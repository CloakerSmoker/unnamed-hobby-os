
#Require "$/ExceptionBase.rlx"

i64 HANDLE_ERROR_BAD_PARAMETER := 1
i64 HANDLE_ERROR_NOT_SUPPORTED := 2
i64 HANDLE_ERROR_NOT_IMPLEMENTED := 3

i32 POLL_CAN_READ  := 0b1
i32 POLL_FOR_READ  := 0b1
i32 POLL_CAN_WRITE := 0b10
i32 POLL_FOR_WRITE := 0b10
i32 POLL_HAS_ERROR := 0b100

struct FileHandlePrototype {
	i32 DataSize
	
	void(void*, void**, i32) Initialize
	
	define void DefaultInitialize(void** Options, i32 Count) {
	}
	
	void(void*, FileStatus*) Status
	
	define void DefaultStatus(FileStatus* Out) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
	}
	
	i32(void*, i32) Poll
	i32(void*, void*, i32) Read
	i32(void*, void*, i32) Write
	
	define i32 DefaultPoll(i32 Mode) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	define i32 DefaultRead(void* Buffer, i32 Size) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	define i32 DefaultWrite(void* Buffer, i32 Size) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	
	void(void*, i32, SeekMode) Seek
	i32(void*) Tell
	
	define void DefaultSeek(i32 Destination, SeekMode Mode) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
	}
	define i32 DefaultTell() {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	
	i32(void*, i32, void*) DeviceControl
	
	define i32 DefaultDeviceControl(i32 Function, void* Parameter) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	
	i32(void*, void*, i32) ReadDirectoryEntries
	
	define i32 DefaultReadDirectoryEntries(void* Out, i32 Count) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return 0
	}
	
	FileHandle*(void*, i8*, i8) OpenOrCreate
	FileHandle*(void*, i8*) Open
	
	define FileHandle* DefaultOpenOrCreate(i8* Path, i8 Flags) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return null
	}
	define FileHandle* DefaultOpen(i8* Path) {
		Throw(HANDLE_ERROR_NOT_SUPPORTED)
		return null
	}
}

define i32 RegisterHandlePrototype(FileHandlePrototype* Prototype) {
	if !(Prototype->Initialize) {
		Prototype->Initialize := &FileHandlePrototype.DefaultInitialize
	}
	
	if !(Prototype->Status) {
		Prototype->Status := &FileHandlePrototype.DefaultStatus
	}
	
	if !(Prototype->Poll) {
		Prototype->Poll := &FileHandlePrototype.DefaultPoll
	}
	if !(Prototype->Read) {
		Prototype->Read := &FileHandlePrototype.DefaultRead
	}
	if !(Prototype->Write) {
		Prototype->Write := &FileHandlePrototype.DefaultWrite
	}
	
	if !(Prototype->Seek) {
		Prototype->Seek := &FileHandlePrototype.DefaultSeek
	}
	if !(Prototype->Tell) {
		Prototype->Tell := &FileHandlePrototype.DefaultTell
	}
	
	if !(Prototype->DeviceControl) {
		Prototype->DeviceControl := &FileHandlePrototype.DefaultDeviceControl
	}
	
	if !(Prototype->ReadDirectoryEntries) {
		Prototype->ReadDirectoryEntries := &FileHandlePrototype.DefaultReadDirectoryEntries
	}
	
	if !(Prototype->OpenOrCreate) {
		Prototype->OpenOrCreate := &FileHandlePrototype.DefaultOpenOrCreate
	}
	
	if !(Prototype->Open) {
		Prototype->Open := &FileHandlePrototype.DefaultOpen
	}
	
	return 10 ; Fairly chosen by a dice roll
}

struct FileHandle {
	#Include "./src/kernel/file-system/HandleInstance.rlx"
	
	define void Status(FileStatus* Out) {
		this->Prototype->Status(this, Out)
	}
	define i32 Poll(i32 Mode) {
		return this->Prototype->Poll(this, Mode)
	}
	define i32 Read(void* Buffer, i32 Size) {
		return this->Prototype->Read(this, Buffer, Size)
	}
	define i32 Write(void* Buffer, i32 Size) {
		return this->Prototype->Write(this, Buffer, Size)
	}
	define void Seek(i32 Where, SeekMode Mode) {
		this->Prototype->Seek(this, Where, Mode)
	}
	define i32 Tell() {
		return this->Prototype->Tell()
	}
	
	define i32 DeviceControl(i32 Function, void* Parameter) {
		return this->Prototype->DeviceControl(this, Function, Parameter)
	}
	
	define i32 ReadDirectoryEntries(DirectoryEntry* Buffer, i32 Count) {
		return this->Prototype->ReadDirectoryEntries(this, Buffer, Count)
	}
	
	define FileHandle* Open(i8* Path, i8 Flags) {
		return this->Prototype->OpenOrCreate(this, Path, Flags)
	}
	define FileHandle* Open(i8* Path) {
		return this->Prototype->Open(this, Path)
	}
	
	define void Close() {
		Free(this)
	}
	
	define FileHandle* Clone() {
		return CloneMemory(this, this->Prototype->DataSize)
	}
}

define FileHandle* NewHandle(FileHandlePrototype* Prototype, ... RawOptions) {
	FileHandle* Result := Alloc(Prototype->DataSize)
	
	Result->Prototype := Prototype
	
	i32 OptionCount := *(RawOptions As i32*)
	void** Options := (&RawOptions[1]) As void**
	
	Prototype->Initialize(Result, Options, OptionCount)
	
	return Result
}