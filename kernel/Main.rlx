#ImageBase 0x10_0000

#Require "./src/utility/Generic.rlx"
#Require "./src/utility/x64.rlx"
#Require "./src/utility/String.rlx"

i8 USE_BOCHS_PORT_HACK := true

#Require "./src/drivers/Bochs.rlx"

declare void* KernelHeapAllocate(i64, i32)
declare void* KernelHeapExtendAllocation(void*, i32)
declare void KernelHeapFree(void*)

#Require "./src/kernel/graphics/Font.rlx"
#Require "./src/kernel/graphics/Screen.rlx"

#Require "./src/kernel/core/Paging.rlx"
#Require "./src/kernel/core/Heap.rlx"

Heap RawKernelHeap
Heap* KernelHeap := &RawKernelHeap

define void* KernelHeapAllocate(i64 Tag, i32 Size) {
	return KernelHeap->Allocate(Tag, Size)
}
define void* KernelHeapExtendAllocation(void* Memory, i32 Size) {
	return KernelHeap->Extend(Memory, Size)
}
define void KernelHeapFree(void* Memory) {
	KernelHeap->Free(Memory)
}

#Require "./src/kernel/core/Descriptors.rlx"

#Require "./src/utility/Memory.rlx"
#Require "./src/utility/Exception.rlx"

#Require "./src/kernel/core/Timer.rlx"

#Require "./src/kernel/graphics/Terminal.rlx"

i8 USE_INTERRUPT_STUBS := true

#Require "./src/kernel/core/Interrupts.rlx"
#Require "./src/kernel/core/Devices.rlx"

#Require "./src/kernel/core/SystemCalls.rlx"

#Require "./src/drivers/Ext2.rlx"

Ext2DeviceTraits* RootDevice := null
Ext2* FS := null
INode* RootINode := null

#Require "./src/kernel/core/Shell.rlx"

#Require "./src/kernel/core/PhysicalMemory.rlx"

define void Main(void* CR3, void* RawFrameBuffer, i64 MaxKernelAddress) {
	BochsPrint("Main, FrameBuffer @ %x\n", RawFrameBuffer)
	
	PhysicalMemory->AddReserved(0, 0x10_0000) ; < 1mb, bootloader reserved
	PhysicalMemory->Add(0x10_0000, 0x350_0000) ; free memory
	
	i32 KernelSize := (MaxKernelAddress - 0x10_0000) As i32 ; Highest address of kernel data - image base
	
	i64 KernelPages     := PhysicalMemory->Reserve(KernelSize) ; Reserve the memory the kernel lives in
	i64 PageFramesPages := PhysicalMemory->Reserve(BYTES_IN_1MB, PAGE_SIZE)
	i64 HeapMemoryPages := PhysicalMemory->Reserve(BYTES_IN_2MB, 8)
	
	void* KernelBase := 0x10_0000 As void*
	void* PageFrames := PageFramesPages As void*
	void* HeapMemory := HeapMemoryPages As void*
	
	AddressSpace->Initialize(PageFrames, BYTES_IN_1MB / PAGE_SIZE)
	
	; Identity map the memory where the page frames are being written, so after setting CR3 PageFrames resolves to the same
	;  address as before setting CR3
	AddressSpace->MapRange(PageFrames, PageFramesPages / PAGE_SIZE, BYTES_IN_1MB / PAGE_SIZE)
	
	; Identity map the kernel, so RIP resolves to the same address before/after setting CR3
	AddressSpace->MapRange(KernelBase, KernelPages / PAGE_SIZE, SizeToPageCount(KernelSize))
	
	; Map the heap to wherever
	AddressSpace->MapRange(HeapMemory, HeapMemoryPages / PAGE_SIZE, PAGE_COUNT_FOR_2MB)
	
	AddressSpace->Takeover()
	
	BochsPrintString("Paging initialized, AddressSpaceManager in control\n")
	
	; Remap the next available `FRAMEBUFFER_SIZE` bytes of virtual memory to 0xE000_0000 (or wherever int10 says)
	i32 FrameBufferPageCount := SizeToPageCount(FRAMEBUFFER_SIZE)
	i8* FrameBuffer := 0x80_0000 As i8*
	AddressSpace->MapRange(FrameBuffer, PointerToPageNumber(RawFrameBuffer), FrameBufferPageCount)
	
	BochsPrintString("Mapped the framebuffer\n")
	
	;NativeScreen->Adopt(FrameBuffer, SCREEN_WIDTH, SCREEN_HEIGHT, BYTES_PER_PIXEL, 0, 0x00_00_00)
	NativeScreen->Adopt(FrameBuffer, SCREEN_WIDTH, SCREEN_HEIGHT, BYTES_PER_PIXEL, 0, 0xFF_FF_FF)
	NativeScreen->Clear()
	
	BochsPrintString("Adopted screen\n")
	
	KernelTerminal->Adopt(NativeScreen, 0x00_00_00, 0xFF_FF_FF)
	;KernelTerminal->SetColors(0xFF_FF_FF, 0x00_00_00)
	KernelTerminal->Clear()
	
	KernelTerminal->PrintLine("BOOT: Screen *probably* works")
	
	AddressSpace->Map(0 As void*, 0, PAGE_NOT_PRESENT)
	
	KernelTerminal->PrintLine("BOOT: Unmapped page 0")
	
	KernelHeap->Initialize(HeapMemory, BYTES_IN_2MB)
	
	KernelTerminal->Print("BOOT: Kernel Heap Initialized: ")
	KernelHeap->Allocate('Example', 0x222)
	KernelHeap->Print()
	
	SetupGDT()
	
	KernelTerminal->PrintLine("BOOT: Setup GDT and TSS")
	
	SetupInterrupts()
	
	Print("\nTesting user-mode\n")
	
	SetupSystemCalls()
	Test()
	
	Print("Back in kernel code\n\n")
	
	SetPITMode(PIT_100HZ)
	SetupTimers()
	
	KernelTerminal->SetCursorTimer()
	
	KernelTerminal->PrintLine("BOOT: Mounting disk")
	
	void* SB := KernelHeapAllocate('SB', 2048)
	void* TI := KernelHeapAllocate('TI', 1024)
	void* TB1 := KernelHeapAllocate('TB1', 1024)
	void* TB2 := KernelHeapAllocate('TB2', 1024)
	void* BMP := KernelHeapAllocate('BMP', 1024)
	
	FS := KernelHeapAllocate('Root', #Ext2)
	RootDevice := Ext2ATADevice:New()
	FS->Traits := RootDevice
	
	FS->Initialize(SB, TI, TB1, TB2, BMP)
	
	RootINode := CloneMemory(FS->ReadINode(2), #INode)
	
	SetupShell()
	
	Prompt()
	
	loop {}
}