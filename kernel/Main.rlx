

#Require "./src/kernel/Config.rlx"

#Require "$/MemoryBase.rlx"
#Require "$/StringBase.rlx"

declare void TerminateAfterUnhandledException(i64)

#Require "$/ExceptionBase.rlx"

#Require "./src/utility/x64.rlx"

declare void PrintCharacter(i8)
declare void Info(i8*, ...)
declare void Print(i8*, ...)

struct KernelInfo {
	i32 Size
	i32 PageCount
	
	void* InterruptStack
	
	i64 FrameBufferPages
	
	i64 Pages
	i64 PageFramesPages
	i64 StackPages
	i64 HeapPages
	i64 KernelPages
	i64 UserPages
}

KernelInfo RawKernelInfo
KernelInfo* Kernel := &RawKernelInfo

#Require "./src/bootloader/BootInfo.rlx"

BootloaderInfo RawBootInfo
BootloaderInfo* BootInfo := &RawBootInfo

#Require "./src/kernel/core/Paging.rlx"
#Require "./src/utility/Memory.rlx"

#Require "./src/utility/Print.rlx"
#Require "./src/utility/PrintHelpers.rlx"
#Require "./src/utility/DebugOutput.rlx"

#Require "./src/kernel/graphics/Font.rlx"
#Require "./src/kernel/graphics/Screen.rlx"

#Require "./src/kernel/core/PageHeap.rlx"
#Require "./src/kernel/core/Heap.rlx"

Heap RawKernelHeap
Heap* KernelHeap := &RawKernelHeap

PageHeap* KernelPageAllocator := null

define void* KernelHeapAllocate(i64 Tag, i32 Size) {
	return KernelHeap->Allocate(Tag, Size)
}
define void* KernelHeapExtendAllocation(void* Memory, i32 Size) {
	return KernelHeap->Extend(Memory, Size)
}
define void KernelHeapFree(void* Memory) {
	KernelHeap->Free(Memory)
}

#Require "./src/kernel/core/Descriptors.rlx"

#Require "./src/utility/Memory.rlx"
#Require "./src/utility/Exception.rlx"

declare void SchedulerYield()

#Require "./src/kernel/core/Interrupts.rlx"
#Require "./src/kernel/core/Devices.rlx"

#Require "./src/kernel/multitasking/Tasks.rlx"
#Require "./src/kernel/multitasking/Scheduler.rlx"
#Require "./src/kernel/multitasking/Timers.rlx"

#Require "./src/kernel/graphics/LoadFON.rlx"
#Require "./src/kernel/graphics/BMPOutput.rlx"

define void PrintCharacter(i8 Character) {
	; Pre-terminal print function
}

#Require "./src/utility/Print.rlx"

; Terminal print functions

#Require "./src/kernel/terminal/Terminal.rlx"
#Require "./src/kernel/terminal/Input.rlx"
#Require "./src/kernel/terminal/Renderer.rlx"

TerminalInstance _RawKernelTerminal
TerminalInstance* RawKernelTerminal := &_RawKernelTerminal
FileHandle* KernelTerminal := RawKernelTerminal->AsHandle()

define void KernelPrintCharacter(PrintOutputAdapterPrototype* this, i8 Character) {
	KernelTerminal->Write(&Character, 1)
}
define void KernelPrintCharacters(PrintOutputAdapterPrototype* this, i8* Characters, i32 Count) {
	KernelTerminal->Write(Characters, Count)
}

PrintOutputAdapterPrototype KernelPrinter {
	PrintCharacter: &KernelPrintCharacter,
	PrintCharacters: &KernelPrintCharacters
}

#Require "./src/drivers/block-device/BlockDevice.rlx"
#Require "./src/drivers/block-device/ATABlockDevice.rlx"
#Require "./src/drivers/block-device/GPTBlockDevice.rlx"

#Require "./src/drivers/Ext2.rlx"

Ext2* FS := null

#Require "./src/kernel/user-mode/Process.rlx"
#Require "./src/kernel/system-calls/SystemCalls.rlx"

#Require "./src/kernel/core/Shell.rlx"

#Require "./src/drivers/PCI/PCI.rlx"

;#Require "./src/drivers/networking/E1000.rlx"

declare void BootStrap()

define void RawBootStrap(void* Stack) asm {
	mov, rsp, rdi
	mov, rbp, 0
	
	call, @BootStrap

stop:
	jmp, stop
}

; Dummy parameters are 100% needed since the kernel is compiled as a linux program
;  and the compiler automatically sets argc/argv when Main takes <=2 parameters

define void Main(BootloaderInfo* RawInfo, i32 Dummy1, i32 Dummy2) {
	MoveMemory(BootInfo, RawInfo, #BootloaderInfo)
	
	Info("Main, FrameBuffer @ %x\n", RawInfo->PhysicalFrameBuffer)
	
	Kernel->FrameBufferPages := RawInfo->PhysicalFrameBuffer
	
	;PhysicalMemory->AddReserved(0, 0x10_0000) ; < 1mb, bootloader reserved
	;PhysicalMemory->Add(0x10_0000, 0x350_0000) ; free memory
	
	PhysicalMemory := PageHeap:Adopt(0x10_0000, 0x500)
	
	i32 KernelSize := (RawInfo->MaxKernelAddress - (ADDRESS_OF_KERNEL As i64)) As i32
	
	Kernel->Size := KernelSize
	Kernel->PageCount := SizeToPageCount(KernelSize) + 1
	
	i64 KernelLoadPages  := PhysicalMemory->Reserve(0x20_0000, Kernel->PageCount) ; Reserve the memory the kernel lives in
	i64 PageFramesPages  := PhysicalMemory->Allocate(PAGE_COUNT_FOR_1MB)
	i64 KernelStackPages := PhysicalMemory->Allocate(40)
	i64 KernelHeapPages  := PhysicalMemory->Allocate(PAGE_COUNT_FOR_2MB)
	i64 KernelPages      := PhysicalMemory->Allocate(NUMBER_OF_KERNEL_PAGES)
	
	Kernel->Pages           := KernelLoadPages
	Kernel->PageFramesPages := PageFramesPages
	Kernel->StackPages      := KernelStackPages
	Kernel->HeapPages       := KernelHeapPages
	Kernel->KernelPages     := KernelPages
	
	AddressSpaceManager* BootStrapAddressSpace := 0x14_0000 As void*
	
	BootStrapAddressSpace->Initialize(0x15_0000 As void*, 0x15_0000, 0x40)
	
	BootStrapAddressSpace->MapRange(0x10_0000 As void*, 0x100, 0x10)
	BootStrapAddressSpace->MapRange(0x15_0000 As void*, 0x150, 0x45)
	BootStrapAddressSpace->MapRange(ADDRESS_OF_KERNEL, KernelLoadPages / PAGE_SIZE, Kernel->PageCount)
	
	BootStrapAddressSpace->MapRange(ADDRESS_OF_PAGE_FRAMES, PageFramesPages / PAGE_SIZE, PAGE_COUNT_FOR_1MB)
	BootStrapAddressSpace->MapRange(ADDRESS_OF_KERNEL_STACK, KernelStackPages / PAGE_SIZE, 40)
	
	BootStrapAddressSpace->Takeover(&RawBootStrap, ADDRESS_OF_KERNEL_STACK + (PAGE_SIZE * 40))
}

declare void MainContinuation()

define void RawMainContinuation(void* Stack) asm {
	mov, rsp, rdi
	mov, rbp, 0
	
	call, @MainContinuation

stop:
	jmp, stop
}

define void BootStrap() {
	Info("Switched\n")
	
	KernelAddressSpace->Initialize(ADDRESS_OF_PAGE_FRAMES, Kernel->PageFramesPages, BYTES_IN_1MB / PAGE_SIZE)
	
	KernelAddressSpace->MapRange(0x10_0000 As void*, 0x10_0000 / PAGE_SIZE, 0x10)
	KernelAddressSpace->MapRange(0x20_0000 As void*, 0x20_0000 / PAGE_SIZE, Kernel->PageCount)
	
	KernelAddressSpace->MapRange(ADDRESS_OF_PAGE_FRAMES, Kernel->PageFramesPages / PAGE_SIZE, PAGE_COUNT_FOR_1MB)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_STACK, Kernel->StackPages / PAGE_SIZE, 40)
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_HEAP, Kernel->HeapPages / PAGE_SIZE, BYTES_IN_2MB / PAGE_SIZE)
	
	KernelAddressSpace->MapRange(ADDRESS_OF_KERNEL_PAGES, Kernel->KernelPages / PAGE_SIZE, NUMBER_OF_KERNEL_PAGES)
	
	KernelAddressSpace->Takeover(&RawMainContinuation, ADDRESS_OF_KERNEL_STACK + (PAGE_SIZE * 40))
}

ATADevice* FirstDisk := null
;E1000* FirstE1000 := null

define void VisitPCIFunction(i32 Bus, i32 Slot, i32 Function) {
	Print("%x/%x/%x: ", Bus, Slot, Function)
	
	i32 Class := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_CLASS_CODE)
	i32 SubClass := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_SUBCLASS)
	i32 Interface := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_INTERFACE)
	
	PCIClassCodes->Print(Class, SubClass, Interface)
	
	Print("\n")
	
	if (Class = PCI_CLASS_CODE_MASS_STORAGE_CONTROLLER 
	 && SubClass = PCI_SUBCLASS_IDE_INTERFACE) {
		i32 PrimaryIOBase      := IDE_LEGACY_PRIMARY_IO_BASE
		i32 PrimaryControlBase := IDE_LEGACY_PRIMARY_CONTROL_BASE
		
		if (Interface & PCI_IDE_INTERFACE_PRIMARY_PCI_NATIVE) {
			PrimaryIOBase      := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_BASE_ADDRESS_0)
			PrimaryControlBase := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_BASE_ADDRESS_1)
		}
		
		i32 SecondaryIOBase      := IDE_LEGACY_SECONDARY_IO_BASE
		i32 SecondaryControlBase := IDE_LEGACY_SECONDARY_CONTROL_BASE
		
		if (Interface & PCI_IDE_INTERFACE_SECONDARY_PCI_NATIVE) {
			SecondaryIOBase      := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_BASE_ADDRESS_2)
			SecondaryControlBase := PCIReadConfig(Bus, Slot, Function, PCI_HEADER_BASE_ADDRESS_3)
		}
		
		DiskController->Initialize(PrimaryIOBase, PrimaryControlBase, SecondaryIOBase, SecondaryControlBase)
		
		Print("Found IDE controller\n")
		Print("\tPCI address: %x/%x/%x\n", Bus, Slot, Function)
		Print("\tports: %x-%x %x-%x\n", PrimaryIOBase, PrimaryControlBase, SecondaryIOBase, SecondaryControlBase)
	}
	;else if (Class = PCI_CLASS_CODE_NETWORK_CONTROLLER 
	;     && SubClass = PCI_SUBCLASS_NETWORK_ETHERNET) {
	;	 
	;	PCIDevice NetworkDevice {
	;		Bus: Bus,
	;		Slot: Slot,
	;		Function: Function
	;	}
	;	
	;	i32 Vendor := NetworkDevice.Read(PCI_HEADER_VENDOR_ID)
	;	i32 Device := NetworkDevice.Read(PCI_HEADER_DEVICE_ID)
	;	
	;	NetworkDevice.DumpConfigurationSpace()
	;	
	;	;Print("MSI: %x\n", NetworkDevice.FindCapability(5))
	;	
	;	Print("Network interface %x:%x\n", Vendor, Device)
	;	
	;	if (Vendor = PCI_VENDOR_INTEL && Device = PCI_DEVICE_INTEL_E1000) {
	;		FirstE1000 := Alloc('E1000', #E1000)
	;		
	;		FirstE1000->Initialize(Bus, Slot, Function)
	;	}
	;}
}

Task _KernelSetupTask
Task* KernelSetupTask := &_KernelSetupTask

;#Require "./src/drivers/networking/Ethernet.rlx"
;#Require "./src/drivers/networking/ARP.rlx"

define void MainContinuation() {
	CurrentTask := KernelSetupTask
	
	DisableInterrupts()
	
	Info("Paging initialized, AddressSpaceManager in control\n")
	
	KernelPageAllocator := PageHeap:Adopt(ADDRESS_OF_KERNEL_PAGES As i64, NUMBER_OF_KERNEL_PAGES)
	
	Info("Built kernel virtual allocator\n")
	
	LoadBootFont()
	
	Info("Loaded font\n")
	
	; Remap the next available `FRAMEBUFFER_SIZE` bytes of virtual memory to 0xE000_0000 (or wherever int10 says)
	i32 FrameBufferPageCount := SizeToPageCount(FRAMEBUFFER_SIZE)
	KernelAddressSpace->MapRange(ADDRESS_OF_FRAME_BUFFER, Kernel->FrameBufferPages / PAGE_SIZE, FrameBufferPageCount)
	
	Info("Mapped the framebuffer\n")
	
	NativeScreen->Adopt(ADDRESS_OF_FRAME_BUFFER, RGB32, SCREEN_WIDTH, SCREEN_HEIGHT, TERMINAL_BACKGROUND)
	NativeScreen->Clear()
	
	Info("Adopted screen\n")
	
	KernelHeap->Initialize(ADDRESS_OF_KERNEL_HEAP, BYTES_IN_2MB)
	Info("Initialized heap\n")
	
	InitializeHandle(&TerminalFilePrototype, KernelTerminal, TERMINAL_MAJOR, TERMINAL_MINOR)
	
	DefaultTerminalInput := NewHandle(&TerminalInputStreamPrototype)
	KernelTerminal->DeviceControl(TERMINAL_SET_INPUT, DefaultTerminalInput)
	
	DefaultTerminalOutput := NewHandle(&TerminalRendererPrototype, NativeScreen, BootFont, TERMINAL_FOREGROUND, TERMINAL_BACKGROUND)
	KernelTerminal->DeviceControl(TERMINAL_SET_OUTPUT, DefaultTerminalOutput)
	
	KernelTerminal->DeviceControl(TERMINAL_INITIALIZE, null)
	
	Printer := &KernelPrinter
	
	Print("BOOT: Screen *probably* works\n")
	
	KernelAddressSpace->Map(0 As void*, 0, PAGE_NOT_PRESENT)
	
	Print("BOOT: Unmapped page 0\n")
	
	SetCR4(GetCR4() | CR4_ENABLE_FS_GS_BASE)
	
	void* InterruptStackTop    := ADDRESS_OF_KERNEL_STACK + (10 * PAGE_SIZE)
	void* InterruptStackBottom := ADDRESS_OF_KERNEL_STACK
	KernelAddressSpace->UnmapRange(InterruptStackBottom, 1)
	Kernel->InterruptStack := InterruptStackTop
	
	SetupGDT()
	
	Print("BOOT: Setup GDT and TSS\n")
	
	SetupInterrupts()
	
	SetPITMode(PIT_100HZ)
	SetupTimers()
	RegisterSerialInterrupts()
	
	Print("Set up PIT/timers/serial\n")
	
	EnableInterrupts()
	
	SetupSystemCalls()
	
	DiskController := KernelHeap->Allocate('IDE', #IDEDiskController)
	
	PCIEnumerateBusses(&VisitPCIFunction)
	
	if !(DiskController->IsInitialized) {
		Print("Didn't find disk controller, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	DiskController->DetectDevices()
	
	i32 FirstDiskIndex := DiskController->FindFirstDiskIndex()
	
	if (FirstDiskIndex < -1) {
		Print("Didn't find any disks, hanging\n")
		
		loop {asm {emit, 0xF4}}
	}
	
	for (i32 Index := 0, Index < 4, Index++) {
		ATADevice* Disk := DiskController->Disk(Index)
		
		Print("\thd%c - ", 'a' + Index)
		
		if (Disk) {
			Print("%s:%s, %x blocks\n", Disk->Model, Disk->Serial, Disk->MaxLBA)
		}
		else {
			Print("not present\n")
		}
	}
	
	;FirstE1000->Setup()
	;Print("%B:%B:%B:%B:%B:%B\n", FirstE1000->MAC[0], FirstE1000->MAC[1], FirstE1000->MAC[2], FirstE1000->MAC[3], FirstE1000->MAC[4], FirstE1000->MAC[5])
	;
	;void* Packet := KernelPageAllocator->AllocateVirtual(2)
	;
	;i32 BodySize := #ARPHeaderMACToIPV4
	;i32 PacketSize := EthernetSize(BodySize)
	;
	;i8* MulticastMAC := i8[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
	;i8* MyMAC := FirstE1000->MAC
	;i32 MyIP := 0x01020304
	;
	;Print("Status %x\nCommand %x\n", FirstE1000->Read(E1000_REGISTER_STATUS), FirstE1000->Read(E1000_REGISTER_CTRL))
	;
	;void* Buffer := EthernetWriteHeader(Packet, MulticastMAC, MyMAC, ETHERTYPE_ARP)
	;ARPRequestMACToIPV4(Buffer, MyMAC, MyIP, MyMAC, MyIP)
	;
	;Info("%hexdump\n", Packet, PacketSize)
	;
	;FirstE1000->Send(Packet, PacketSize)
	
	Print("BOOT: Mounting disk\n")
	
	i8[2] DiskIndexString
	
	DiskIndexString[0] := ('0' + FirstDiskIndex) As i8
	DiskIndexString[1] := 0
	
	BlockDevice* BootDisk := NewBlockDevice(null, &ATABlockDevicePrototype, DiskIndexString)
	BlockDevice* OSPatition := NewBlockDevice(BootDisk, &GPTPartitionBlockDevicePrototype, "1")
	
	;BlockDevice* FSDevice := InstantiateBlockDeviceChainFromPath("ATAPIO(0)>GPT(1)")
	
	void* Ext2Scratch := KernelPageAllocator->AllocateVirtual(2)
	
	FS := KernelHeapAllocate('RootFS', #Ext2)
	FS->Device := OSPatition
	
	FS->Initialize(Ext2Scratch, Ext2Scratch + 0x800, Ext2Scratch + 0xC00, Ext2Scratch + 0x1000, Ext2Scratch + 0x1400)
	RootDirectory := Ext2OpenINodeNumber(FS, 2)
	
	Print("BOOT: About to replace myself with /dev/console wish me luck\n")
	Info("Test\n")
	
	FileHandle* NewKernelConsole := RootDirectory->Open("dev/console")
	
	Print("NewKernelConsole = %x\n", NewKernelConsole)
	
	KernelTerminal->Close()
	KernelTerminal := NewKernelConsole
	
	Print("Hello /dev/console!\n")
	
	KernelTerminal->DeviceControl(TERMINAL_RENDERER_START_CURSOR_TIMER, null)
	
	SetupShell()
	
	StartScheduler()
	
}