
struct PixelBufferInstance {
	void* Buffer
	
	i32 Width
	i32 Height
	
	i32 Count
	i32 Size
}

struct PixelFormat {
	void(PixelFormat*, void*, i32) SetColor
	i32(PixelFormat*, void*) GetColor
	void(PixelFormat*, PixelBufferInstance*, i32, i32, i32, i32) DrawStrip
	void*(PixelFormat*, PixelBufferInstance*, i32, i32) GetPixelAddress
	
	i32 Size
	
	i32 RedMask
	i32 BlueMask
	i32 GreenMask
	
	i8 RedShift
	i8 BlueShift
	i8 GreenShift
	
	define void SetColor_24_R8_G8_B8(void* Pixel, i32 Color) asm {
		mov, r8b, {p2 + 3} As i8*
		mov, {p2} As i32*, p3d
		mov, {p2 + 3} As i8*, r8b
		ret
	}
	define i32 GetColor_24_R8_G8_B8(void* Pixel) asm {
		mov, eax, {p2} As i32*
		and, eax, 0xFF_FF_FF
		ret
	}
	define void* GetPixelAddress_24_R8_G8_B8(PixelBufferInstance* Dimensions, i32 X, i32 Y) asm {
		mov, rax, {p2 + PixelBufferInstance.Buffer} As i64*   ; RAX = Base
		mov, ebx, {p2 + PixelBufferInstance.Width} As i32*   ; RBX = Width
		
		imul, p4, rbx                   ; Y *= Stride
		add, p4, p3                    ; Index = Y += X
		lea, p4, {p4[p4 * 2]} As i64* ; Offset = Index * 3
		
		add, rax, p4                    ; RAX = Base + Offset
		
		ret
	}
	
	define void SetColor_32_R8_G8_B8(void* Pixel, i32 Color) asm {
		mov, {p2} As i32*, edx
		ret
	}
	define i32 GetColor_32_R8_G8_B8(void* Pixel) asm {
		mov, eax, {p2} As i32*
		ret
	}
	define void* GetPixelAddress_32_R8_G8_B8(PixelBufferInstance* Dimensions, i32 X, i32 Y) asm {
		mov, rax, {p2 + PixelBufferInstance.Buffer} As i64*   ; RAX = Base
		mov, ebx, {p2 + PixelBufferInstance.Width} As i32*   ; RBX = Width
		
		imul, p4, rbx                   ; Row = Y * Width
		add, p4, p3                    ; Index = Row + X
		
		; shl, rcx(p4), 2                    ; Offset = Index * 4
		emit, 0x48
		emit, 0xC1
		emit, 0xE1
		emit, 0x02
		
		add, rax, p4                    ; RAX = Base + Offset
		
		ret
	}
	define void DrawStrip_32_R8_G8_B8(PixelBufferInstance* Dimensions, i32 X, i32 Y, i32 Width, i32 Color) asm {
		call, @PixelFormat.GetPixelAddress_32_R8_G8_B8
		
		mov, rcx, p5  ; rcx = count
		mov, rdi, rax ; rdi = pixel
		mov, rax, p6  ; rax = color
		rep stosd
		
		ret
	}
}

PixelFormat _RGB24 {
	RedMask: 0xFF_00_00,
	RedShift: 16,
	
	BlueMask: 0x00_FF_00,
	BlueShift: 8,
	
	GreenMask: 0x00_00_FF,
	GreenShift: 0,
	
	Size: 3,
	
	SetColor: &PixelFormat.SetColor_24_R8_G8_B8,
	GetColor: &PixelFormat.GetColor_24_R8_G8_B8,
	GetPixelAddress: &PixelFormat.GetPixelAddress_24_R8_G8_B8
}

PixelFormat* RGB24 := &_RGB24

PixelFormat _RGB32 {
	RedMask: 0xFF_00_00,
	RedShift: 16,
	
	BlueMask: 0x00_FF_00,
	BlueShift: 8,
	
	GreenMask: 0x00_00_FF,
	GreenShift: 0,
	
	Size: 4,
	
	SetColor: &PixelFormat.SetColor_32_R8_G8_B8,
	GetColor: &PixelFormat.GetColor_32_R8_G8_B8,
	GetPixelAddress: &PixelFormat.GetPixelAddress_32_R8_G8_B8,
	DrawStrip: &PixelFormat.DrawStrip_32_R8_G8_B8
}

PixelFormat* RGB32 := &_RGB32

struct PixelBuffer {
	void* PrivateData
	PixelFormat* Format
	PixelBufferInstance Instance
	
	define void SetPixelColor(i32 X, i32 Y, i32 Color) {
		void* Pixel := this->Format->GetPixelAddress(this~>Instance, X, Y)
		
		this->Format->SetColor(Pixel, Color)
	}
	
	define i32 GetPixelColor(i32 X, i32 Y) {
		void* Pixel := this->Format->GetPixelAddress(this~>Instance, X, Y)
		
		return this->Format->GetColor(Pixel)
	}
	
	define void BlockTransfer(i32 MyX, i32 MyY, i32 Width, i32 Height, PixelBuffer* Other, i32 OtherX, i32 OtherY) {
		if (Other->Format = this->Format) {
			for (i32 Row := 0, Row < Height, Row++) {
				void* Destination := this->Format->GetPixelAddress(this~>Instance, MyX, MyY + Row)
				void* Source := Other->Format->GetPixelAddress(Other~>Instance, OtherX, OtherY + Row)
				
				MoveMemory(Destination, Source, Width * this->Format->Size)
			}
		}
		else {
			for (i32 Row := 0, Row < Height, Row++) {
				for (i32 Column := 0, Column < Width, Column++) {
					i32 OtherColor := Other->GetPixelColor(OtherX + Column, OtherY + Row)
					
					this->SetPixelColor(MyX + Column, MyY + Row, OtherColor)
				}
			}
		}
	}
	
	define void DrawStrip(i32 X, i32 Y, i32 Width, i32 Color) {
		if !(this->Format->DrawStrip) {
			for (i32 Index := 0, Index < Width, Index++) {
				this->SetPixelColor(X + Index, Y, Color)
			}
		}
		else {
			this->Format->DrawStrip(this~>Instance, X, Y, Width, Color)
		}
	}
	
	define i32 Width() {
		return this~>Instance->Width
	}
	define i32 Height() {
		return this~>Instance->Height
	}
	define i32 Count() {
		return this~>Instance->Count
	}
	define i32 Size() {
		return this~>Instance->Size
	}
	define i32 PixelSize() {
		return this->Format->Size
	}
	
	define void* Buffer() {
		return this~>Instance->Buffer
	}
	define void Buffer(void* New) {
		this~>Instance->Buffer := New
	}
	
	define void Initialize(void* Buffer, PixelFormat* Format, i32 Width, i32 Height) {
		this->Format := Format
		
		PixelBufferInstance* Instance := this~>Instance
		
		Instance->Buffer := Buffer
		Instance->Width := Width
		Instance->Height := Height
		Instance->Count := Instance->Width * Instance->Height
		Instance->Size := Instance->Count * this->Format->Size
	}
}