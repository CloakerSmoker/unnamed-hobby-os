#Require "./src/utility/NE.rlx"
#Require "./src/utility/FNT.rlx"
#Require "./src/utility/EFICRC.rlx"

struct _Glyph {
	i32 RenderForegroundColor
	i32 RenderBackgroundColor
	i8* Render
}

struct _Font {
	i8* FaceName
	
	i32 Width
	i32 Height
	
	i32 FirstCharacter
	i32 LastCharacter
	
	i32 PixelsPerGlyph
	i32 BytesPerGlyph
	
	PixelBuffer RawGlyphBuffer
	PixelBuffer* GlyphBuffer
	_Glyph* Glyphs
	
	define void Initialize(PixelFormat* Format, i32 Width, i32 Height) {
		this->Width := Width
		this->Height := Height
		
		this->GlyphBuffer := this~>RawGlyphBuffer
		
		this->GlyphBuffer->Initialize(null, Format, Width, Height)
	}
	
	define void ReplaceRenderColor(i32 Old, i32 New) {
		for (i32 Row := 0, Row < this->Height, Row++) {
			for (i32 Column := 0, Column < this->Width, Column++) {
				if (this->GlyphBuffer->GetPixelColor(Column, Row) = Old) {
					this->GlyphBuffer->SetPixelColor(Column, Row, New)
				}
			}
		}
	}
	
	define void Draw(PixelBuffer* Buffer, i32 Foreground, i32 Background, i32 X, i32 Y, i8 Character) {
		_Glyph* CharacterGlyph := this->Glyphs[Character]
		
		this->GlyphBuffer->Buffer := CharacterGlyph->Render
		
		i8 ForegroundMatches := Foreground = CharacterGlyph->RenderForegroundColor
		i8 BackgroundMatches := Background = CharacterGlyph->RenderBackgroundColor
		
		if !(ForegroundMatches && BackgroundMatches) {
			for (i32 Row := 0, Row < this->Height, Row++) {
				for (i32 Column := 0, Column < this->Width, Column++) {
					i32 Old := this->GlyphBuffer->GetPixelColor(Column, Row)
					
					if (Old = CharacterGlyph->RenderForegroundColor) {
						this->GlyphBuffer->SetPixelColor(Column, Row, Foreground)
					}
					else if (Old = CharacterGlyph->RenderBackgroundColor) {
						this->GlyphBuffer->SetPixelColor(Column, Row, Background)
					}
				}
			}
			
			CharacterGlyph->RenderForegroundColor := Foreground
			CharacterGlyph->RenderBackgroundColor := Background
		}
		
		Buffer->BlockTransfer(X, Y, this->Width, this->Height, this->GlyphBuffer, 0, 0)
	}
}

define _Font* LoadFON(_Font* Result, void* Data, i32 Size) {
	NEFile RawNE
	SetMemory(&RawNE, #NEFile, 0)
	NEFile* NE := &RawNE
	
	NE->Initialize(Data, Size)
	
	NEResource* FontResource := NE->FindResource(NE_RESOURCE_TYPE_ID_FONT, 0)
	
	FNTHeader* FNT := NE->GetResourceData(FontResource)
	
	Result->Initialize(RGB32, FNT->PixelWidth, FNT->PixelHeight)
	
	i32 BytesPerColumn := FNT->PixelWidth / 8
	
	if (FNT->PixelWidth % 8) {
		BytesPerColumn += 1
	}
	
	i32 PixelsPerGlyph := Result->Width * Result->Height
	i32 BytesPerRender := PixelsPerGlyph * RGB32->Size
	i32 BytesForRenders := BytesPerRender * 256
	i32 PagesForRenders := SizeToPageCount(BytesForRenders)
	
	_Glyph* Glyphs := KernelPageAllocator->AllocateVirtual(1)
	void* Renders := KernelPageAllocator->AllocateVirtual(PagesForRenders)
	
	for (i32 Index := 0, Index < 256, Index++) {
		FNTCharacterTableEntry* Entry := FNT->CharacterTableEntry(Index)
		
		_Glyph* Next := Glyphs[Index]
		
		Next->RenderBackgroundColor := 0x00_00_00
		Next->RenderForegroundColor := 0xFF_FF_FF
		
		void* Render := Renders + (Index * BytesPerRender)
		
		Next->Render := Render
		Result->GlyphBuffer->Buffer := Render
		
		i8* GlyphData := (FNT As void*) + Entry->BitmapOffset
		
		i32 ColumnSize := FNT->PixelHeight
		i32 ColumnBits := BytesPerColumn * 8
		
		i32 ColumnBitsEnd := ColumnBits - FNT->PixelWidth
		
		for (i32 Row := 0, Row < FNT->PixelHeight, Row++) {
			i32 ActualColumn := 0
			
			for (i32 Column := ColumnBits - 1, Column >= ColumnBitsEnd, Column--) {
				i32 ColumnBase := (Column / 8) * ColumnSize
				i32 ColumnBit := Column % 8
				
				i32 Value := (GlyphData[ColumnBase + Row] & (1 << (ColumnBit As i8))) != 0
				
				Result->GlyphBuffer->SetPixelColor(ActualColumn, Row, Value * 0xFF_FF_FF)
				
				ActualColumn++
			}
		}
	}
	
	Result->Glyphs := Glyphs
	
	return Result
}

define _Font* LoadFON(void* Data, i32 Size) {
	return LoadFON(Alloc(#_Font), Data, Size)
}

void* BootFontFON := i8[#File "./src/misc/fonts/Fanta.fon"]

_Font RawBootFont
_Font* BootFont := &RawBootFont

define void LoadBootFont() {
	LoadFON(BootFont, BootFontFON, 0)
}