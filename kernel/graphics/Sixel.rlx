#Require "./src/kernel/graphics/PixelBuffer.rlx"

enum SixelBackgroundMode {
	Fill,
	Transparent
}

enum SixelWriteState {
	Enter,
	Normal,
	Attributes,
	Repeat,
	ColorMap,
	Escape,
	Done
}

i32 SIXEL_COLOR_SPACE_HSV := 1
i32 SIXEL_COLOR_SPACE_RGB := 2

define i32 ScaleSixelColor(i32 In) {
	i32 InFraction := (In * 1000) / 100
	i32 Temp := InFraction * 255
	
	i32 OutWhole := Temp / 1000
	i32 OutFraction := Temp % 1000
	
	if (OutFraction >= 500) {
		OutWhole++
	}
	
	return OutWhole
}

i8* DefaultSixelPalette := i8[
	0 , 0 , 0 ,
	20, 20, 80,
	80, 13, 13,
	20, 80, 20,
	80, 20, 20,
	80, 80, 20,
	53, 53, 53,
	26, 26, 26,
	33, 33, 90,
	60, 26, 26,
	33, 60, 33,
	60, 33, 60,
	33, 60, 60,
	60, 60, 33,
	80, 80, 80
]

struct SixelRenderer {
	PixelBuffer* Display
	i32[256] Palette
	
	define void SetPalette(i32 Index, i32 R, i32 G, i32 B) {
		R := ScaleSixelColor(R)
		G := ScaleSixelColor(G)
		B := ScaleSixelColor(B)
		
		this->Palette[Index] :=  (R << 16) | (G << 8) | B
	}
	
	define void ClearPalette() {
		for (i32 Index := 0, Index < 16, Index++) {
			i8* Color := &DefaultSixelPalette[Index * 3]
			
			this->SetPalette(Index, Color[0], Color[1], Color[3])
		}
		
		for (i32 Index := 16, Index < 256, Index++) {
			this->Palette[Index] := 0
		}
	}
	
	define void Initialize(PixelBuffer* Display) {
		this->Display := Display
		this->ClearPalette()
	}
	
	SixelWriteState State
	i8 GatheringParameters
	
	i32 ColorIndex
	i32 X
	i32 Y
	
	define void Reset(i32 X, i32 Y) {
		this->State := SixelWriteState:Enter
		this->GatheringParameters := false
		
		this->ColorIndex := 0
		this->ClearPalette()
		
		this->X := X
		this->Y := Y
	}
	
	define void PushSixel(i32 Value, i32 Count) {
		if (Value = 0) {
			this->X += Count
			return
		}
		
		if (this->X >= this->Display->Width()) {
			return
		}
		else if (this->X + Count >= this->Display->Width()) {
			Count := this->Display->Width() - this->X
		}
		
		i32 Color := this->Palette[this->ColorIndex]
		
		for (i8 Index := 0, Index < 6, Index++) {
			i32 Mask := 1 << Index
			
			if (Value & Mask) {
				;this->Display->SetPixelColor(this->X, this->Y + Index, Color)
				
				this->Display->DrawStrip(this->X, this->Y + Index, Count, Color)
			}
		}
		
		this->X += Count
	}
	
	i32[7] Parameters
	i32 ParameterIndex
	i32 ParameterCount
	
	define void GatherNumberCharacter(i8 Next) {
		this->Parameters[this->ParameterIndex] *= 10
		this->Parameters[this->ParameterIndex] += Next - '0'
	}
	
	define i8 GatherParameterCharacter(i8 Next) {
		if ('0' <= Next && Next <= '9') {
			this->GatherNumberCharacter(Next)
		}
		else if (Next = ';') {
			this->ParameterIndex++
		}
		else {
			this->ParameterCount := this->ParameterIndex + 1
			
			return true
		}
		
		return false
	}
	
	define void StartGatherParameters(SixelWriteState NewState) {
		this->State := NewState
		this->GatheringParameters := true
		
		this->ParameterIndex := 0
		this->ParameterCount := 0
		
		for (i32 Index := 0, Index < 7, Index++) {
			this->Parameters[Index] := 0
		}
	}
	
	define i32 Write(i8* Characters, i32 Count) {
		for (i32 Index := 0, Index < Count, Index++) {
			i8 Next := Characters[Index]
		
			if (this->State = SixelWriteState:Enter && !this->GatheringParameters) {
				if (Next = 0x1B) {
					;Print("Enter sixel mode\n")
				}
				else if (Next = 'P') {
					;Print("Enter\n")
					this->StartGatherParameters(SixelWriteState:Enter)
				}
			}
			else if (Next = 0x1B) {
				this->State := SixelWriteState:Escape
			}
			else if (this->State = SixelWriteState:Escape) {
				if (Next = '\') {
					return Index + 1
				}
				
				return Index
			}
			else if (this->State = SixelWriteState:Normal) {
				if ('?' <= Next && Next <= '~') {
					while (Index < Count) {
						this->PushSixel(Next - '?', 1)
						
						Next := Characters[++Index]
						
						if !('?' <= Next && Next <= '~') {
							Index--
							break
						}
					}
				}
				else if (Next = '!') {
					;Print("Enter repeat mode\n")
					this->StartGatherParameters(SixelWriteState:Repeat)
				}
				else if (Next = '#') {
					;Print("Enter color map mode\n")
					this->StartGatherParameters(SixelWriteState:ColorMap)
				}
				else if (Next = '"') {
					;Print("Enter attributes mode\n")
					this->StartGatherParameters(SixelWriteState:Attributes)
				}
				else if (Next = '-') {
					this->X := 0
					this->Y += 6
				}
				else if (Next = '$') {
					this->X := 0
				}
			}
			else if (this->GatheringParameters) {
				if (this->GatherParameterCharacter(Next)) {
					if (this->State = SixelWriteState:ColorMap) {
						if (this->ParameterCount >= 1) {
							this->ColorIndex := this->Parameters[0]
							;Print("Switch to color %i\n", this->ColorIndex)
						}
						
						if (this->ParameterCount = 5) {
							if (this->Parameters[1] = SIXEL_COLOR_SPACE_HSV) {
								Throw('SIXELHSV')
							}
							else if (this->Parameters[1] = SIXEL_COLOR_SPACE_RGB) {
								this->SetPalette(this->ColorIndex, this->Parameters[2], this->Parameters[3], this->Parameters[4])
							}
						}
					}
					else if (this->State = SixelWriteState:Repeat) {
						i32 RepeatCount := this->Parameters[0]
						;i8 RepeatCharacter := Next
						
						;Print("Repeat %c %i times\n", Next, RepeatCount)
						
						this->PushSixel(Next - '?', RepeatCount)
						this->State := SixelWriteState:Normal
						this->GatheringParameters := false
						continue
					}
					else if (this->State = SixelWriteState:Enter) {
						if (Next != 'q') {
							;Print("Sixel: Enter not terminated with 'q'\n")
						}
						
						;Print("Exited enter\n")
						
						this->State := SixelWriteState:Normal
						this->GatheringParameters := false
						continue
					}
					
					this->State := SixelWriteState:Normal
					this->GatheringParameters := false
					
					Index--
				}
			}
		}
		
		return Count
	}
}
