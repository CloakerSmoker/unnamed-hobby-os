#Require "./src/kernel/graphics/PixelBuffer.rlx"

struct Glyph {
	i32 RenderForegroundColor
	i32 RenderBackgroundColor
	i8* Render
}

struct Font {
	i8* FaceName
	
	i32 Width
	i32 Height
	
	i32 FirstCharacter
	i32 LastCharacter
	
	i32 PixelsPerGlyph
	i32 BytesPerGlyph
	
	PixelBuffer RawGlyphBuffer
	PixelBuffer* GlyphBuffer
	Glyph* Glyphs
	
	define void Initialize(PixelFormat* Format, i32 Width, i32 Height) {
		this->Width := Width
		this->Height := Height
		
		this->GlyphBuffer := this~>RawGlyphBuffer
		
		this->GlyphBuffer->Initialize(null, Format, Width, Height)
	}
	
	define void ReplaceRenderColor(i32 Old, i32 New) {
		for (i32 Row := 0, Row < this->Height, Row++) {
			for (i32 Column := 0, Column < this->Width, Column++) {
				if (this->GlyphBuffer->GetPixelColor(Column, Row) = Old) {
					this->GlyphBuffer->SetPixelColor(Column, Row, New)
				}
			}
		}
	}
	
	define void Draw(PixelBuffer* Buffer, i32 Foreground, i32 Background, i32 X, i32 Y, i8 Character) {
		if (Foreground = Background) {
			Character := 0
		}
		
		Glyph* CharacterGlyph := this->Glyphs[Character]
		
		this->GlyphBuffer->Buffer(CharacterGlyph->Render)
		
		i8 ForegroundMatches := Foreground = CharacterGlyph->RenderForegroundColor
		i8 BackgroundMatches := Background = CharacterGlyph->RenderBackgroundColor
		
		if !(ForegroundMatches && BackgroundMatches) {
			for (i32 Row := 0, Row < this->Height, Row++) {
				for (i32 Column := 0, Column < this->Width, Column++) {
					i32 Old := this->GlyphBuffer->GetPixelColor(Column, Row)
					
					if (Old = CharacterGlyph->RenderForegroundColor) {
						this->GlyphBuffer->SetPixelColor(Column, Row, Foreground)
					}
					else if (Old = CharacterGlyph->RenderBackgroundColor) {
						this->GlyphBuffer->SetPixelColor(Column, Row, Background)
					}
				}
			}
			
			CharacterGlyph->RenderForegroundColor := Foreground
			CharacterGlyph->RenderBackgroundColor := Background
		}
		
		Buffer->BlockTransfer(X, Y, this->Width, this->Height, this->GlyphBuffer, 0, 0)
	}
}