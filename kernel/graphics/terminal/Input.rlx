
#Require "./src/linux/Termios.rlx"
#Require "./src/utility/MemoryFIFO.rlx"
#Require "./src/kernel/file-system/FileSystem.rlx"
#Require "./src/kernel/input/InputToTerminalEscapes.rlx"

struct TerminalInputStreamInstance {
	#Include "./src/kernel/file-system/HandleInstance.rlx"
	#Include "./src/kernel/graphics/terminal/InstanceComponent.rlx"
	FileHandle* Output
	
	i8[64] RawLineBuffer
	MemoryFIFO LineBuffer
	
	i8[64] RawInputBuffer
	MemoryFIFO InputBuffer
	
	InputToTerminalEscapesStream Escaper
	
	define i8 LocalFlag(i32 Mask) {
		return (this->Config->LocalFlags & Mask) != 0
	}
	
	define void Echo(i8* Characters, i32 Count) {
		this->Output->Write(Characters, Count)
	}
	define void Echo(i8 Character) {
		this->Echo(&Character, 1)
	}
	
	define void Input(void* Buffer, i32 Count) {
		this~>InputBuffer->Write(Buffer, Count)
		
		if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ECHO)) {
			this->Echo(Buffer, Count)
		}
	}
	
	define void Input(i8 Next) {
		this->Input(&Next, 1)
	}
	
	define void Initialize(void** Options, i32 Count) {
		this~>Escaper->State := this
		this~>Escaper->WriteOutput := &TerminalInputStreamInstance.Input(void*, i32)
		
		this~>LineBuffer->Initialize(this~>RawLineBuffer, 64)
		this~>InputBuffer->Initialize(this~>RawInputBuffer, 64)
	}
	
	define void OnInput(i8 Modifiers, i32 KeyCode) {
		;Print("Got ")
		;PrintModifiers(Modifiers)
		;PrintKeyName(KeyCode)
		;Print("\n")
		
		if (KeyCode = KEY_ENTER) {
			;if !(RunningProgram) {
			;	; TODO: figure out how to let a program tell us to do this or not
			;	;  over termios
			;	
			;	i8 EOL := this~>Config->ControlCharacters[LINUX_TERMIOS_CHARACTER_VEOL]
			;	
			;	KeyboardBuffer->Write(&EOL, 1)
			;}
		
			i8 EOL2 := this->Config->ControlCharacters[LINUX_TERMIOS_CHARACTER_VEOL2]
			
			if (EOL2) {
				this->Input(EOL2)
			}
			
			if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ICANON)) {
				this~>InputBuffer->MoveTo(this~>LineBuffer, this~>InputBuffer->Available())
			}
		}
		else if (KeyCode = KEY_BACKSPACE) {	
			;Info("Available %i\n", this~>InputBuffer->Available())
			
			if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ICANON)) {
				i32 AvailableBefore := this~>InputBuffer->Available()
				
				this~>InputBuffer->Drop(1)
				
				;Info("Available v2 %i\n", this~>InputBuffer->Available())
				
				if (AvailableBefore != 0 && this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ECHO)) {
					this->Echo(ASCII_BACK As i8)
				}
			}
			else {
				this->Input(ASCII_BACK As i8)
			}
		}
		else {
			this~>Escaper->OnInput(Modifiers, KeyCode)
		}
	}
	
	define i32 ReadBuffered(MemoryFIFO* Buffer, void* Out, i32 Count) {
		i32 Available := Buffer->Available()
		
		if (Available > Count) {
			Available := Count
		}
		
		Buffer->Read(Out, Available)
		
		return Available
	}
	
	define i32 DeviceControl(i32 Function, void* Parameter) {
		if (Function = TERMINAL_INITIALIZE) {
			; Master is letting us know we are the default terminal, take ownership of keyboard input
			
			SinkPS2Input(this, &TerminalInputStreamInstance.OnInput)
		}
		else {
			return this->ComponentDeviceControl(Function, Parameter)
		}
		
		return 0
	}
	
	define i32 Poll(i32 Mode) {
		MemoryFIFO* Buffer := this~>InputBuffer
		
		if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ICANON)) {
			Buffer := this~>LineBuffer
		}
		
		i32 Result := 0
	
		if (Mode & POLL_CAN_READ && Buffer->Available() != 0) {
			Result |= POLL_CAN_READ
		}
		
		if (Mode & POLL_CAN_WRITE) {
			Result |= POLL_CAN_WRITE
		}
		
		return Result
	}
	
	define i32 Read(void* Out, i32 Count) {
		MemoryFIFO* Buffer := this~>InputBuffer
		
		if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ICANON)) {
			Buffer := this~>LineBuffer
		}
		
		i32 Available := Buffer->Available()
		
		if !(Available) {
			if (IsSchedulerActive()) {
				while !(Available) {
					SchedulerYield()
					Available := Buffer->Available()
				}
			}
			else {
				while !(Available) {
					Available := Buffer->Available()
				}
			}
		}
		
		return this->ReadBuffered(Buffer, Out, Count)
	}
	define i32 WriteToInputStream(void* Data, i32 Size) {
		MemoryFIFO* Buffer := this~>InputBuffer
		
		if (this->LocalFlag(LINUX_TERMIOS_LOCAL_FLAG_ICANON)) {
			Buffer := this~>LineBuffer
		}
		
		Buffer->Write(Data, Size)
		
		return Size
	}
}

FileHandlePrototype TerminalInputStreamPrototype {
	DataSize: #TerminalInputStreamInstance,
	Initialize: &TerminalInputStreamInstance.Initialize,
	
	DeviceControl: &TerminalInputStreamInstance.DeviceControl,
	
	Poll: &TerminalInputStreamInstance.Poll,
	Read: &TerminalInputStreamInstance.Read,
	Write: &TerminalInputStreamInstance.WriteToInputStream
}

i32 TERMINAL_KEY_INPUT_PROTOTYPE_ID := RegisterHandlePrototype(&TerminalInputStreamPrototype)