struct PhysicalRangeInfo {
	i32 Size
	i8 Busy
}

struct PhysicalRange {
	i64 Start
	
	union {
		PhysicalRangeInfo Info
		i64 Padding
	}
}

struct Physical {
	i8 Dummy
}

struct PhysicalMemoryManager {
	PhysicalRange[20] Ranges
	i32 RangeCount
	
	define i32 Add(i64 Start, i32 Size, i8 Reserved) {
		i32 Index := this->RangeCount++
		PhysicalRange* Next := this->Ranges[Index]
		
		Next->Start := Start
		Next->Info.Size := Size
		Next->Info.Busy := Reserved
		
		return Index
	}
	
	define i32 Add(i64 Start, i32 Size) {
		return this->Add(Start, Size, false)
	}
	define i32 AddReserved(i64 Start, i32 Size) {
		return this->Add(Start, Size, true)
	}
	
	define i64 Reserve(i32 MinimumSize, i32 Alignment) {
		for (i32 Index := 0, Index < this->RangeCount, Index++) {
			PhysicalRange* Next := this->Ranges[Index]
			PhysicalRangeInfo* Info := Next~>Info
			
			if (Info->Busy = false && Info->Size >= MinimumSize) {
				i64 Remainder := (Next->Start As i64) % Alignment
				
				if (Remainder != 0) {
					i64 Padding := Alignment - Remainder
					
					if (Info->Size < (Padding + MinimumSize)) {
						continue
					}
					
					Next->Start += Padding
				}
				
				Info->Busy := true
				
				i32 SizeDifference := Info->Size - MinimumSize
				
				if (SizeDifference >= 0x1000) {
					Info->Size := MinimumSize
					
					this->Add(Next->Start + MinimumSize, SizeDifference)
				}
				
				return Next->Start
			}
		}
		
		return 0
	}
	
	define i64 Reserve(i32 MinimumSize) {
		return this->Reserve(MinimumSize, 1)
	}
}

PhysicalMemoryManager RawPhysicalMemory
PhysicalMemoryManager* PhysicalMemory := &RawPhysicalMemory












