struct PhysicalRange {
	i64 Start
	i32 Size
	i32 Tag
	i8 Busy
	i8[3] Padding
}

struct Physical {
	i8 Dummy
}

struct PhysicalMemoryManager {
	PhysicalRange[20] Ranges
	i32 RangeCount
	
	define i32 Add(i64 Start, i32 Size, i8 Reserved) {
		i32 Index := this->RangeCount++
		PhysicalRange* Next := this->Ranges[Index]
		
		Next->Start := Start
		Next->Size := Size
		Next->Busy := Reserved
		
		return Index
	}
	
	define i32 Add(i64 Start, i32 Size) {
		return this->Add(Start, Size, false)
	}
	define i32 AddReserved(i64 Start, i32 Size) {
		return this->Add(Start, Size, true)
	}
	
	define i64 Reserve(i32 Tag, i32 MinimumSize, i32 Alignment) {
		for (i32 Index := 0, Index < this->RangeCount, Index++) {
			PhysicalRange* Next := this->Ranges[Index]
			
			if (Next->Busy = false && Next->Size >= MinimumSize) {
				i64 Remainder := (Next->Start As i64) % Alignment
				
				if (Remainder != 0) {
					i64 Padding := Alignment - Remainder
					
					if (Next->Size < (Padding + MinimumSize)) {
						continue
					}
					
					Next->Start += Padding
				}
				
				Next->Busy := true
				Next->Tag := Tag
				
				i32 SizeDifference := Next->Size - MinimumSize
				
				if (SizeDifference >= 0x1000) {
					Next->Size := MinimumSize
					
					this->Add(Next->Start + MinimumSize, SizeDifference)
				}
				
				return Next->Start
			}
		}
		
		return 0
	}
	
	define i64 Reserve(i32 Tag, i32 MinimumSize) {
		return this->Reserve(Tag, MinimumSize, 1)
	}
	
	define void Print() {
		Print("PhysicalMemory Dump: %i total ranges {\n", this->RangeCount)
		
		for (i32 Index := 0, Index < this->RangeCount, Index++) {
			PhysicalRange* Next := this->Ranges[Index]
		
			Print("\t%x\t - %x \t(%x \tbytes)\t", Next->Start, Next->Start + Next->Size, Next->Size)
			
			if (Next->Busy) {			
				Print(" '%l' : busy", Next->Tag)
			}
			
			Print("\n")
		}
		
		Print("}\n")
	}
}

PhysicalMemoryManager RawPhysicalMemory
PhysicalMemoryManager* PhysicalMemory := &RawPhysicalMemory












