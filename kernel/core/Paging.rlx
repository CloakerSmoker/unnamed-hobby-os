i32 PAGE_COUNT_FOR_1MB := 0x100
i32 PAGE_COUNT_FOR_2MB := 0x200
i32 PAGE_COUNT_FOR_4MB := 0x400
i32 PAGE_COUNT_FOR_6MB := 0x600
i32 PAGE_COUNT_FOR_8MB := 0x800

i32 BYTES_IN_1MB := 0x10_0000
i32 BYTES_IN_2MB := 0x20_0000
i32 BYTES_IN_4MB := 0x40_0000
i32 BYTES_IN_6MB := 0x60_0000
i32 BYTES_IN_8MB := 0x80_0000

i32 PAGES_PER_PT  := 0x0000_0200
i32 PAGES_PER_PD  := 0x0004_0000
i32 PAGES_PER_PDP := 0x0800_0000

i32 PAGE_SIZE := 0x1000

i32 BYTES_PER_PT  := PAGES_PER_PT  * PAGE_SIZE
i32 BYTES_PER_PD  := PAGES_PER_PD  * PAGE_SIZE
i32 BYTES_PER_PDP := PAGES_PER_PDP * PAGE_SIZE

i64 PAGE_NOT_PRESENT := 0b000
i64 PAGE_PRESENT     := 0b001
i64 PAGE_WRITE       := 0b010
i64 PAGE_USER        := 0b100

define i32 SizeToPageCount(i32 Size) {
	i32 PageCount := Size / PAGE_SIZE
	
	if (Size % PAGE_SIZE) {
		PageCount += 1
	}
	
	return PageCount
}
define void* PageNumberToPointer(i64 PageNumber) {
	return (PageNumber * PAGE_SIZE) As void*
}
define i64 PointerToPageNumber(void* PageMemory) {
	return (PageMemory / PAGE_SIZE) As i64
}

struct Page {
	i8[0x1000] Data
}

define i32 GetPML4Index(void* Address) {
	return ((Address & 0b_111111111_000000000_000000000_000000000_000000000000) >> 39) As i32
}
define i32 GetPDPIndex(void* Address) {
	return ((Address &           0b_111111111_000000000_000000000_000000000000) >> 30) As i32
}
define i32 GetPDIndex(void* Address) {
	return ((Address &                     0b_111111111_000000000_000000000000) >> 21) As i32
}
define i32 GetPTIndex(void* Address) {
	return ((Address &                               0b_111111111_000000000000) >> 12) As i32
}

define i64**** GetPML4Entry(i64**** PML4, void* Address) {
	i32 Index      := ((Address & 0b_111111111_000000000_000000000_000000000_000000000000) >> 39) As i32
	return &PML4[Index]
}
define i64*** GetPDPEntry(i64*** PDT, void* Address) {
	PDT            &=             0b_111111111_111111111_111111111_111111111_000000000000
	i32 Index      := ((Address &           0b_111111111_000000000_000000000_000000000000) >> 30) As i32
	return &PDT[Index]
}
define i64** GetPDEntry(i64** PD, void* Address) {
	PD             &=             0b_111111111_111111111_111111111_111111111_000000000000
	i32 Index      := ((Address &                     0b_111111111_000000000_000000000000) >> 21) As i32
	return &PD[Index]
}
define i64* GetPTEntry(i64* PT, void* Address) {
	PT             &=             0b_111111111_111111111_111111111_111111111_000000000000
	i32 Index      := ((Address &                               0b_111111111_000000000000) >> 12) As i32
	return &PT[Index]
}

define void* RemovePageFlags(void* Entry) {
	Entry &= 0b_111111111_111111111_111111111_111111111_000000000000
	
	return Entry
}
define i64 PackPageFlags(i64 PageNumber, i64 Flags) {
	return (PageNumber << 12) | Flags
}


define i32 ExternalMapPage(void* CR3, void* RawTempPages, void* From, i64 To) {
	Page* TempPages := RawTempPages
	i32 TempPagesUsed := 0
	
	i64**** PML4E := GetPML4Entry(i64****{CR3}, From)
	i64*** PDP := *PML4E
	
	if !(PDP & PAGE_PRESENT) {
		PDP := i64***{&TempPages[TempPagesUsed++]}
		*PML4E := PDP | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
	}
	
	i64*** PDPE := GetPDPEntry(*PML4E, From)
	i64** PD := *PDPE
	
	if !(PD & PAGE_PRESENT) {
		PD := i64**{&TempPages[TempPagesUsed++]}
		*PDPE := PD | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
	}

	i64** PDE := GetPDEntry(*PDPE, From)
	i64* PT := *PDE
	
	if !(PT & PAGE_PRESENT) {
		PT := i64*{&TempPages[TempPagesUsed++]}
		*PDE := PT | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
	}
	
	i64* PTE := RemovePageFlags(GetPTEntry(*PDE, From))
	
	*PTE := To
	
	return TempPagesUsed
}

struct PagePath {
	i32 PML4Index
	i32 PDPIndex
	i32 PDIndex
	i32 PTIndex
}

struct AddressSpaceManager {
	i8* Bitmap
	
	i64 PhysicalPML4
	i64* VirtualPML4
	
	i32 PageFrameCount
	
	define i64* PhysicalToVirtual(i64 Physical) {
		return this->VirtualPML4 + (Physical - this->PhysicalPML4)
	}
	
	define i32 AllocatePageFrameIndex() {
		for (i32 Index := 0, Index < this->PageFrameCount, Index++) {
			i32 Byte := Index / 8
			i32 Bit := Index % 8
			
			i32 Mask := 1 << (Bit As i8)
			
			if (this->Bitmap[Byte] & Mask = 0) {
				this->Bitmap[Byte] |= (Mask As i8)
				
				return Index
			}
		}
		
		return -1
	}
	define void FreePageFrameIndex(i32 Index) {
		i32 Byte := Index / 8
		i32 Bit := Index % 8
		
		i32 Mask := 1 << (Bit As i8)
		
		this->Bitmap[Byte] &= ~(Mask As i8)
	}
	define i32 GetPageFrameIndexStatus(i32 Index) {
		i32 Byte := Index / 8
		i32 Bit := Index % 8
		
		i32 Mask := 1 << (Bit As i8)
		
		return (this->Bitmap[Byte] & Mask) >> (Bit As i8)
	}
	
	define i64 GetPageFrame(i32 Index) {
		return this->PhysicalPML4 + (Index * PAGE_SIZE)
	}
	define i64 AllocatePageFrame() {
		i32 Index := this->AllocatePageFrameIndex()
		i32 Offset := Index * PAGE_SIZE
		i64* Virtual := this->VirtualPML4 + Offset
		
		SetMemory(Virtual, PAGE_SIZE, 0)
		
		return this->PhysicalPML4 + Offset
	}
	
	define i32 PageFramePointerToIndex(void* PageFrame) {
		return PointerToPageNumber(PageFrame - this->VirtualPML4) As i32
	}
	
	define void Initialize(void* VirtualBase, i64 PhysicalBase, i32 FrameCount) {
		i32 BitmapSize := FrameCount / 8 
		i32 BitmapPages := BitmapSize / PAGE_SIZE
		
		if (BitmapSize % PAGE_SIZE) {
			BitmapPages += 1
		}
		
		FrameCount -= BitmapPages
		
		this->Bitmap := VirtualBase
		this->PageFrameCount := FrameCount
		
		this->PhysicalPML4 := PhysicalBase + (BitmapPages * PAGE_SIZE)
		this->VirtualPML4 := VirtualBase + (BitmapPages * PAGE_SIZE)
		
		this->AllocatePageFrame()
		
		SetMemory(this->VirtualPML4, PAGE_SIZE, 0)
	}
	
	define i64* GetPML4Entry(void* Address) {
		i32 Index      := ((Address & 0b_111111111_000000000_000000000_000000000_000000000000) >> 39) As i32
		return &this->VirtualPML4[Index]
	}
	define i64* GetPDPEntry(i64* PDT, void* Address) {
		PDT            &=             0b_111111111_111111111_111111111_111111111_000000000000
		i32 Index      := ((Address &           0b_111111111_000000000_000000000_000000000000) >> 30) As i32
		return &PDT[Index]
	}
	define i64* GetPDEntry(i64* PD, void* Address) {
		PD             &=             0b_111111111_111111111_111111111_111111111_000000000000
		i32 Index      := ((Address &                     0b_111111111_000000000_000000000000) >> 21) As i32
		return &PD[Index]
	}
	define i64* GetPTEntry(i64* PT, void* Address) {
		PT             &=             0b_111111111_111111111_111111111_111111111_000000000000
		i32 Index      := ((Address &                               0b_111111111_000000000000) >> 12) As i32
		return &PT[Index]
	}
	
	define i64* FindOrAddPML4Entry(void* Address) {
		i64* PML4E := this->GetPML4Entry(Address)
		i64 PDP := *PML4E
		
		if !(PDP & PAGE_PRESENT) {
			PDP := this->AllocatePageFrame()
			*PML4E := PDP | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
		}
		
		return PML4E
	}
	define i64* FindOrAddPDPEntry(i64* PML4E, void* Address) {
		i64* PDPE := this->GetPDPEntry(this->PhysicalToVirtual(*PML4E), Address)
		i64 PD := *PDPE
		
		if !(PD & PAGE_PRESENT) {
			PD := this->AllocatePageFrame()
			*PDPE := PD | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
		}
		
		return PDPE
	}
	define i64* FindOrAddPDEntry(i64* PDPE, void* Address) {
		i64* PDE := this->GetPDEntry(this->PhysicalToVirtual(*PDPE), Address)
		i64 PT := *PDE
		
		if !(PT & PAGE_PRESENT) {
			PT := this->AllocatePageFrame()
			*PDE := PT | PAGE_PRESENT | PAGE_WRITE | PAGE_USER
		}
		
		return PDE
	}
	define i64* FindOrAddPTEntry(i64* PDE, void* Address) {
		i64* PTE := this->GetPTEntry(this->PhysicalToVirtual(*PDE), Address)
		
		return PTE
	}
	
	define i64* FindOrAddPDPEntry(void* Address) {
		i64* PML4E := this->FindOrAddPML4Entry(Address)
		i64* PDPE := this->FindOrAddPDPEntry(PML4E, Address)
		
		return PDPE
	}
	define i64* FindOrAddPDEntry(void* Address) {
		i64* PDPE := this->FindOrAddPDPEntry(Address)
		i64* PDE := this->FindOrAddPDEntry(PDPE, Address)
		
		return PDE
	}
	define i64* FindOrAddPTEntry(void* Address) {
		i64* PDE := this->FindOrAddPDEntry(Address)
		i64* PTE := this->FindOrAddPTEntry(PDE, Address)
		
		return PTE
	}
	
	define void Map(void* Address, i64 PageNumber) {
		i64* PageTableEntry := RemovePageFlags(this->FindOrAddPTEntry(Address))
		
		*PageTableEntry := PackPageFlags(PageNumber, PAGE_PRESENT | PAGE_WRITE | PAGE_USER)
	}
	define void Map(void* Address, i64 PageNumber, i64 Flags) {
		i64* PageTableEntry := RemovePageFlags(this->FindOrAddPTEntry(Address))
		
		*PageTableEntry := PackPageFlags(PageNumber, Flags)
	}
	
	define void MapRange(void* Address, i64 StartPage, i32 Count, i64 Flags) {
		Info("Map %x pages from %x to %x\n", Count, Address, StartPage)
		
		while (Count != 0) {
			i64* PDE := this->FindOrAddPDEntry(Address)
			i64* PT := RemovePageFlags(this->PhysicalToVirtual(*PDE))
			i32 PTIndex := GetPTIndex(Address)
			
			i32 PTSpace := PAGES_PER_PT - PTIndex
			
			i32 PTMax := Count
			
			if (Count > PTSpace) {
				PTMax := PTSpace
			}
			
			;Info("Map PT @ %x [%x-%x] to %x-%x\n", PT, PTIndex, PTMax, StartPage, StartPage + PTMax)
			
			for (i32 Index := 0, Index < PTMax, Index++) {
				PT[PTIndex + Index] := PackPageFlags(StartPage + Index, Flags)
			}
			
			Count -= PTMax
			StartPage += PTMax
			Address += PTMax * PAGE_SIZE
		}
	}
	define void MapRange(void* Address, i64 StartPage, i32 Count) {
		this->MapRange(Address, StartPage, Count, PAGE_PRESENT | PAGE_WRITE | PAGE_USER)
	}
	
	define void GarbageCollect(i64** TableEntry, i64* Table) {
		for (i32 Index := 0, Index < 512, Index++) {
			i64 Entry := Table[Index]
			
			if (Entry & PAGE_PRESENT) {
				return
			}
		}
		
		this->FreePageFrameIndex(this->PageFramePointerToIndex(Table))
		
		*TableEntry := null
	}
	
	define void UnmapRange(void* Address, i32 Count) {
		void* End := Address + (Count * PAGE_SIZE)

		while (Count != 0) {
			i64* PML4E := this->GetPML4Entry(Address)
			
			if !(*PML4E & PAGE_PRESENT) {
				break
			}
			
			i64* PDPE := this->GetPDPEntry(this->PhysicalToVirtual(*PML4E), Address)
			
			if !(*PDPE & PAGE_PRESENT) {
				break
			}
			
			i64* PDE := this->GetPDEntry(this->PhysicalToVirtual(*PDPE), Address)
			
			if !(*PDE & PAGE_PRESENT) {
				break
			}
			
			i64* PT := RemovePageFlags(this->PhysicalToVirtual(*PDE))
			
			i32 PTIndex := GetPTIndex(Address)
			
			i32 PTSpace := PAGES_PER_PT - PTIndex
			
			i32 PTMax := Count
			
			if (Count > PTSpace) {
				PTMax := PTSpace
			}
			
			;BochsInfo("Map PT @ %x [%x-%x] to %x-%x\n", PT, PTIndex, PTMax, StartPage, StartPage + PTMax)
			
			for (i32 Index := 0, Index < PTMax, Index++) {
				PT[PTIndex + Index] := 0
			}
			
			Count -= PTMax
			Address += PTMax * PAGE_SIZE
			
			this->GarbageCollect(PDE   As i64**, RemovePageFlags(this->PhysicalToVirtual(*PDE  )))
			this->GarbageCollect(PDPE  As i64**, RemovePageFlags(this->PhysicalToVirtual(*PDPE )))
			this->GarbageCollect(PML4E As i64**, RemovePageFlags(this->PhysicalToVirtual(*PML4E)))
		}
	}
	
	define void Takeover(void* Continuation, void* Parameter){
		SetCR3(this->PhysicalPML4, Continuation, Parameter)
	}
	
	
	define void PrintMeta() {
		i32 Index := 0
		
		i32 Rows := this->PageFrameCount / 40
		
		for (i32 RowIndex := 0, RowIndex < Rows, RowIndex++) {
			for (i32 ColumnIndex := 0, ColumnIndex < 40, ColumnIndex++) {
				i32 Allocated := this->GetPageFrameIndexStatus(Index++)
				
				Print("%b", Allocated)
			}
			
			Print("\n")
		}
		
		i32 Remainder := this->PageFrameCount % 40
		
		for (i32 ColumnIndex := 0, ColumnIndex < Remainder, ColumnIndex++) {
			i32 Allocated := this->GetPageFrameIndexStatus(Index++)
			
			Print("%b", Allocated)
		}
		
		Print("\n")
	}
	
	define void PrintPTE(i64 Virtual, i64 Entry) {
		Print("%x -> %x ", Virtual, RemovePageFlags(Entry As void*))
		
		if (Entry & PAGE_PRESENT) {
			Print("[Present] ")
		}
		else {
			Print("[Not Present] ")
		}
		
		if (Entry & PAGE_WRITE) {
			Print("[Write] ")
		}
		else {
			Print("[Read only] ")
		}
		
		if (Entry & PAGE_USER) {
			Print("[User] ")
		}
		else {
			Print("[Supervisor] ")
		}
		
		Print("\n")
	}
	
	define i64 EndRun(i64 RunStartAddress, i64 RunStart, i64 RunLastAddress, i64 RunLast, i64 RunLength) {
		if (RunLength) {
			this->PrintPTE(RunStartAddress, RunStart)
			
			if (RunLength > 1) {
				Print("...\n")
				this->PrintPTE(RunLastAddress, RunLast)
			}
		}
		
		return 0
	}
	
	define void PrintMappings() {
		i64 RunStartAddress := 0
		i64 RunStart := 0
		i64 RunLastAddress := 0
		i64 RunLast := 0
		i64 RunLength := 0
		
		for (i64 PML4Index := 0, PML4Index < 512, PML4Index++) {
			i64* PML4E := this->GetPML4Entry((PML4Index << 39) As void*)
			
			if (*PML4E & PAGE_PRESENT) {
				for (i64 PDPIndex := 0, PDPIndex < 512, PDPIndex++) {
					i64* PDPE := this->GetPDPEntry(this->PhysicalToVirtual(*PML4E), (PDPIndex << 30) As void*)
					
					if (*PDPE & PAGE_PRESENT) {
						for (i64 PDIndex := 0, PDIndex < 512, PDIndex++) {
							i64* PDE := this->GetPDEntry(this->PhysicalToVirtual(*PDPE), (PDIndex << 21) As void*)
							
							if (*PDE & PAGE_PRESENT) {
								for (i64 PTIndex := 0, PTIndex < 512, PTIndex++) {
									i64* PTE := this->GetPTEntry(this->PhysicalToVirtual(*PDE), (PTIndex << 12) As void*)
									
									if (*PTE & PAGE_PRESENT) {
										i64 Address := (PML4Index << 39) | (PDPIndex << 30) | (PDIndex << 21) | (PTIndex << 12) 
										
										if (RunStart = 0 && RunLength = 0) {
											RunStartAddress := Address
											RunStart := *PTE
										}
										else if ((*PTE) - RunLast >= 0x1300) {
											RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
											
											RunStartAddress := Address
											RunStart := *PTE
										}
										
										RunLength += 1
										RunLastAddress := Address
										RunLast := *PTE
									}
									else {
										RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
										RunStart := 0
									}
								}
							}
							else {
								RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
								RunStart := 0
							}
						}
					}
					else {
						RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
						RunStart := 0
					}
				}
			}
			else {
				RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
				RunStart := 0
			}
		}
		
		RunLength := this->EndRun(RunStartAddress, RunStart, RunLastAddress, RunLast, RunLength)
	}
}

AddressSpaceManager RawKernelAddressSpace
AddressSpaceManager* KernelAddressSpace := &RawKernelAddressSpace