
enum EventState {
	CallNextListener
	Handled
}

enum EventHandlerKind {
	Function
	Method
}

struct EventListener {
	EventListener* Next
	
	union {
		EventState(void*, Event*) Function
		EventState(void*, void*, Event*) Method
	}
	
	void* Parameter
	
	EventHandlerKind Kind
}

struct Event {
	EventListener* FirstListener
	i8* Name
	i32 FireCounter
	
	define EventListener* ListenMethod(EventState(void*, void*, Event*) Method, void* Parameter) {
		EventListener* Result := Alloc(#EventListener)
		
		Result->Method := Method
		Result->Parameter := Parameter
		Result->Kind := EventHandlerKind:Method
		
		Result->Next := this->FirstListener
		this->FirstListener := Result
		
		return Result
	}
	define EventListener* ListenFunction(EventState(void*, Event*) Function) {
		EventListener* Result := Alloc(#EventListener)
		
		Result->Function := Function
		Result->Kind := EventHandlerKind:Function
		
		Result->Next := this->FirstListener
		this->FirstListener := Result
		
		return Result
	}
	
	define void RemoveListener(EventListener* Listener) {
		if (this->FirstListener = Listener) {
			this->FirstListener := Listener->Next
		}
		else if (this->FirstListener) {
			EventListener* Current := this->FirstListener
			
			while (Current) {
				if (Current->Next = Listener) {
					Current->Next := Listener->Next
				}
				
				Current := Current->Next
			}
		}
	}
	
	define void Fire(void* Data) {
		this->FireCounter++
		
		EventListener* Current := this->FirstListener
		
		while (Current) {
			EventState State := EventState:CallNextListener
			
			if (Current->Kind = EventHandlerKind:Function) {
				State := Current->Function(Data, this)
			}
			else if (Current->Kind = EventHandlerKind:Method) {
				State := Current->Method(Current->Parameter, Data, this)
			}
			
			if (State = EventState:Handled) {
				break
			}
			
			Current := Current->Next
		}
	}
	
	define void Wait() {
		i64 OriginalCounter := this->FireCounter
		
		while (this->FireCounter = OriginalCounter) {
			SchedulerYield()
		}
	}
}