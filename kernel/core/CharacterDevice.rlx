
i64 CHARACTER_DEVICE_INIT_FAIL := 'CDEV_IF'
i64 CHARACTER_DEVICE_READ_FAIL := 'CDEV_RF'
i64 CHARACTER_DEVICE_WRITE_FAIL := 'CDEV_WF'

struct CharacterDevicePrototype {
	i32 DataSize
	
	void(void*, void**, i32) Initialize
	
	i32(void*, void*, i32) Read
	i32(void*, void*, i32) Write
	
	i8(void*) ReadSingle
	void(void*, i8) WriteSingle
}

struct CharacterDeviceLink {
	#Include "./src/kernel/core/CharacterDeviceInstance.rlx"
}

struct CharacterDevice {
	CharacterDeviceLink Link
	
	define i8 ReadSingle() {
		return this~>Link->Prototype->ReadSingle(this)
	}
	define void WriteSingle(i8 Next) {
		this~>Link->Prototype->WriteSingle(this, Next)
	}
	define i8 FailRead() {
		Throw(CHARACTER_DEVICE_READ_FAIL)
		
		return 0
	}
	define void FailWrite(i8 Character) {
		Throw(CHARACTER_DEVICE_WRITE_FAIL)
	}
	
	define i32 DefaultRead(void* RawBuffer, i32 Size) {
		i8* Buffer := RawBuffer
		i32 Result := 0
		
		for (i32 Index := 0, Index < Size, Index++) {
			try {
				Buffer[Index] := this->ReadSingle()
				Result += 1
			}
			catch {
				break
			}
		}
		
		return Result
	}
	define i32 DefaultWrite(void* RawBuffer, i32 Size) {
		i8* Buffer := RawBuffer
		i32 Result := 0
		
		for (i32 Index := 0, Index < Size, Index++) {
			try {
				this->WriteSingle(Buffer[Index])
				Result += 1
			}
			catch {
				break
			}
		}
		
		return Result
	}
	
	define i8 DefaultReadSingle() {
		i8 Result := 0
		
		if (this~>Link->Prototype->Read(this, &Result, 1) != 1) {
			Throw(CHARACTER_DEVICE_READ_FAIL)
		}
		
		return Result
	}
	define void DefaultWriteSingle(i8 Value) {
		if (this~>Link->Prototype->Write(this, &Value, 1) != 1) {
			Throw(CHARACTER_DEVICE_WRITE_FAIL)
		}
	}
	
	define i32 Read(void* Buffer, i32 Size) {
		return this~>Link->Prototype->Read(this, Buffer, Size)
	}
	define i32 Write(void* Buffer, i32 Size) {
		return this~>Link->Prototype->Write(this, Buffer, Size)
	}
}

define i32 RegisterCharacterDevicePrototype(CharacterDevicePrototype* Prototype) {
	if (Prototype->Read = null && Prototype->ReadSingle != null) {
		Prototype->Read := &CharacterDevice.DefaultRead
	}
	
	if (Prototype->Write = null && Prototype->WriteSingle != null) {
		Prototype->Write := &CharacterDevice.DefaultWrite
	}
	
	if (Prototype->Read != null && Prototype->ReadSingle = null) {
		Prototype->ReadSingle := &CharacterDevice.DefaultReadSingle
	}
	
	if (Prototype->Write != null && Prototype->WriteSingle = null) {
		Prototype->WriteSingle := &CharacterDevice.DefaultWriteSingle
	}
	
	return 0
}

define void InitializeCharacterDevice(CharacterDevice* Result, CharacterDevicePrototype* Prototype, ... RawOptions) {
	i32 OptionCount := (RawOptions As i32*)[0]
	void** Options := (RawOptions As void**) + 0x8

	Result~>Link->Prototype := Prototype
	
	Prototype->Initialize(Result, Options, OptionCount)
}

define CharacterDevice* NewCharacterDevice(CharacterDevicePrototype* Prototype, ... RawOptions) {
	i32 OptionCount := (RawOptions As i32*)[0]
	void** Options := (RawOptions As void**) + 0x8
	
	CharacterDevice* Result := Alloc(Prototype->DataSize)
	
	Result~>Link->Prototype := Prototype
	
	Prototype->Initialize(Result, Options, OptionCount)
	
	return Result
}