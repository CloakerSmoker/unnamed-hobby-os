#Require "./src/utility/x64.rlx"
#Require "./src/drivers/PIC.rlx"

struct InterruptContext {
	i64 R15, i64 R14, i64 R13, i64 R12, i64 R11, i64 R10, i64 R9, i64 R8,
	i64 RBP, i64 RDX, i64 RCX, i64 RBX, i64 RDI, i64 RSI, i64 RAX

	i64 ErrorCode
	i64 RIP
	i64 CS
	i64 Flags
	i64 RSP
	i64 SS
	
	define void PrintContext() {
		Info("Interrupt Context: {\n")
		Info("\tErrorCode: %x (%b)\n", this->ErrorCode, this->ErrorCode)
		Info("\tRIP: %x\n", this->RIP)
		Info("\tCS: %i (%x)\n", this->CS, this->CS)
		Info("\tFlags: %i (%x, %b)\n", this->Flags, this->Flags, this->Flags)
		Info("\tRSP: %x\n", this->RSP)
		Info("\tSS: %x\n", this->SS)
		Info("}\n")
	}
	
	define void PrintRegisters() {
		Info("Registers: {\n")
		Info("\tRAX: %x\n", this->RAX)
		Info("\tRBX: %x\n", this->RBX)
		Info("\tRCX: %x\n", this->RCX)
		Info("\tRDX: %x\n", this->RDX)
		Info("\tRSP: %x (copy from context)\n", this->RSP)
		Info("\tRBP: %x\n", this->RBP)
		Info("\tRSI: %x\n", this->RSI)
		Info("\tRDI: %x\n", this->RDI)
		Info("\tR8 : %x\n", this->R8)
		Info("\tR9 : %x\n", this->R9)
		Info("\tR10: %x\n", this->R10)
		Info("\tR11: %x\n", this->R11)
		Info("\tR12: %x\n", this->R12)
		Info("\tR13: %x\n", this->R13)
		Info("\tR14: %x\n", this->R14)
		Info("\tR15: %x\n", this->R15)
		Info("}\n")
	}
	
	define void PrintStackDump() {
		Info("\nStack dump:\n")
		
		StackFrame* Last := this->RBP As StackFrame*
		i32 Index := 1
		
		while (Last) {
			if (Last->LastFrame & 1) {
				StackFrame* Temp := Last->LastFrame - 1
				
				Info("\tStack[%i] Try catch address = %x\n", Index, Last->ReturnAddress, Temp)
				Index += 1
				
				Last := Temp
			}
			else {
				i64* MaybeMagic := (Last - 0x8) As i64*
				i8** MaybeName := (Last - 0x10) As i8**
				
				if (Debug && *MaybeMagic = 0x12345678) {
					Info("\tStack[%i] Fn = %s\n", Index, *MaybeName)
				}
				else {
					Info("\tStack[%i] Fn callsite = %x\n", Index, Last->ReturnAddress, Last->LastFrame)
				}
				
				Index += 1
				
				Last := Last->LastFrame
			}
		}
	}
}

define void InterruptCodeSetup() asm {
	xchg, rax, {rsp} As i64* ; Swap the user RAX value with our return address
	
	push, rsi
	push, rdi
	push, rbx
	push, rcx
	push, rdx
	push, rbp
	push, r8
	push, r9
	push, r10
	push, r11
	push, r12
	push, r13
	push, r14
	push, r15
	
	mov, rdi, rsp
	jmp, rax
}
define void InterruptCodeReturn() asm {
	pop, r15
	pop, r14
	pop, r13
	pop, r12
	pop, r11
	pop, r10
	pop, r9
	pop, r8
	pop, rbp
	pop, rdx
	pop, rcx
	pop, rbx
	pop, rdi
	pop, rsi
	pop, rax
	
	iret
}

define void InterruptSetup() asm {
	mov, {rsp - 0x8} As i64*, rax ; Write rax to where it *should* go in the InterruptContext
	
	xor, rax, rax
	xchg, rax, {rsp} As i64* ; Swap a dummy error code in for our return address
	
	; sub, rsp, 0x8 (HOW IS THIS NOT IMPLEMENTED?)
	emit, 0x48
	emit, 0x83
	emit, 0xEC
	emit, 0x08
	
	push, rsi
	push, rdi
	push, rbx
	push, rcx
	push, rdx
	push, rbp
	push, r8
	push, r9
	push, r10
	push, r11
	push, r12
	push, r13
	push, r14
	push, r15
	
	mov, rdi, rsp
	jmp, rax
}
define void InterruptReturn() asm {
	pop, r15
	pop, r14
	pop, r13
	pop, r12
	pop, r11
	pop, r10
	pop, r9
	pop, r8
	pop, rbp
	pop, rdx
	pop, rcx
	pop, rbx
	pop, rdi
	pop, rsi
	pop, rax
	
	; Free the dummy error code pushed in setup
	; add, rsp, 0x8 (HOW IS THIS NOT IMPLEMENTED?)
	emit, 0x48
	emit, 0x83
	emit, 0xC4
	emit, 0x08
	
	iret
}

struct IDTEntry unaligned {
	i16 OffsetLow16,
	i16 Selector,
	i8 IST,
	i8 Flags,
	i16 OffsetHigh16,
	i32 OffsetHigh32,
	i32 Padding
}

IDTEntry* IDT

i8 IST_NONE := 0
i8 IST_1 := 1
i8 IST_2 := 1
i8 IST_3 := 1
i8 IST_4 := 1
i8 IST_5 := 1
i8 IST_6 := 1
i8 IST_7 := 1

define void InsertIDTEntry(i32 Index, void* Function, i8 Present, i8 IST) {
	IDTEntry* E := IDT[Index]
	
	SetMemory(E As i64*, 0, 2)
	
	E->OffsetLow16 := (Function & 0xFFFF) As i16
	E->OffsetHigh16 := ((Function >> 16) & 0xFFFF) As i16
	E->OffsetHigh32 := ((Function >> 32) & 0xFFFFFFFF) As i32
	
	E->Selector := 0x08
	E->Flags := 0x0E | (Present << 7) As i8
}

define void InsertIDTEntry(i32 Index, void* Function, i8 Present) {
	InsertIDTEntry(Index, Function, Present, IST_NONE)
}

i32 IDT_MAX := 50
i32 IDT_SIZE := IDT_MAX * #IDTEntry

declare void AddHandlerStubs()
declare void AddKernelHandlers()
declare void SetupDeviceInterrupts()

define void SetupInterrupts() {
	asm {cli}
	
	DescriptorTableHeader IDTHeader
	
	IDT := KernelHeap->Allocate('IDT', IDT_SIZE)
	
	IDTHeader.Base := IDT
	IDTHeader.Limit := IDT_SIZE As i16
	
	RemapPIC(0x20, 0x28)
	
	if (USE_INTERRUPT_STUBS) {
		AddHandlerStubs()
	}
	
	AddKernelHandlers()
	SetupDeviceInterrupts()
	
	asm (rax := &IDTHeader) {
		lidt, {rax} As i64*
		sti
	}
}

define void GenericInterrupt(InterruptContext* Context, i32 InterruptNumber) {
	Info("UNHANDLED INTERRUPT %i (%x)\n", InterruptNumber, InterruptNumber)
	
	Context->PrintContext()
	Context->PrintRegisters()
	Context->PrintStackDump()
	
	asm {cli}
	
	loop {}
}

#Require "./src/kernel/core/InterruptStubs.rlx"
#Require "./src/kernel/core/InterruptHandlers.rlx"
