#Require "./src/utility/x64.rlx"
#Require "./src/drivers/PIC.rlx"

define void _InterruptSetup() asm {
	xchg, rax, {rsp + 0x10} As i64*
	
	push, rbx
	push, rcx
	push, rdx
	push, rbp
	push, r8
	push, r9
	push, r10
	push, r11
	push, r12
	push, r13
	push, r14
	push, r15
	mov, rsi, rsp
	
	jmp, rax
}
define void InterruptCodeSetup() asm {
	push, rdi
	xchg, rsi, {rsp + 0x10} As i64*
	lea, rdi, {rsp + 0x18} As i64*
	jmp, @_InterruptSetup
}
define void InterruptSetup() asm {
	push, rsi
	push, rdi
	lea, rdi, {rsp + 0x18} As i64*  /* Get interrupt context, which is above RDI,RSI,RIP on the stack */ 
	jmp, @_InterruptSetup
}
define void InterruptReturn() asm {
	pop, r15
	pop, r14
	pop, r13
	pop, r12
	pop, r11
	pop, r10
	pop, r9
	pop, r8
	pop, rbp
	pop, rdx
	pop, rcx
	pop, rbx
	pop, rdi
	pop, rsi
	pop, rax
	
	iret
}

struct Registers {
	i64 R15, i64 R14, i64 R13, i64 R12, i64 R11, i64 R10, i64 R9, i64 R8,
	i64 RBP, i64 RDX, i64 RCX, i64 RBX, i64 RDI, i64 RSI, i64 RAX
}
struct InterruptContext {
	i64 RIP, i64 CS, i64 Flags, i64 RSP, i64 SS
}

struct IDTEntry unaligned {
	i16 OffsetLow16,
	i16 Selector,
	i8 PaddingZero,
	i8 Flags,
	i16 OffsetHigh16,
	i32 OffsetHigh32,
	i32 Padding
}

struct IDT unaligned {
	i16 Size,
	IDTEntry* Start
}

IDT* IDTHeader
IDTEntry* IDT

define void InsertIDTEntry(i32 Index, void* Function, i8 Present) {
	IDTEntry* E := IDT + (Index * #IDTEntry)
	
	MemorySet64(E As i64*, 0, 2)
	
	E->OffsetLow16 := (Function & 0xFFFF) As i16
	E->OffsetHigh16 := ((Function >> 16) & 0xFFFF) As i16
	E->OffsetHigh32 := ((Function >> 32) & 0xFFFFFFFF) As i32
	
	E->Selector := 0x08
	E->Flags := 0x0E | (Present << 7) As i8
}

i32 IDT_MAX := 50
i32 IDT_SIZE := IDT_MAX * #IDTEntry

declare void AddKernelHandlers()
declare void SetupDeviceInterrupts()

define void SetupInterrupts() {
	asm {cli}
	
	IDTHeader := KernelHeap->Allocate('IDTH', 0x10)
	IDT := KernelHeap->Allocate('IDT', IDT_SIZE)
	
	IDTHeader->Start := IDT
	IDTHeader->Size := IDT_SIZE As i16
	
	RemapPIC(0x20, 0x28)
	
	AddKernelHandlers()
	SetupDeviceInterrupts()
	
	asm (rax := IDTHeader) {
		lidt, {rax} As i64*
		sti
	}
}

#Require "./src/kernel/core/InterruptHandlers.rlx"
