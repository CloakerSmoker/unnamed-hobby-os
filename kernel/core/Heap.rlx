struct HeapBlock {
	i64 Tag
	i32 Size
	i8 IsFree
	i8 IsEnd
	
	define void* Body() {
		return (this + #HeapBlock) As void*
	}
	define HeapBlock* Next() {
		return this + this->Size
	}
	define void MergeContigousFreeBlocks() {
		if (this->IsEnd) {
			return
		}
		
		HeapBlock* Current := this->Next()
		
		while (Current->IsFree) {
			this->Size += Current->Size
			
			if (Current->IsEnd) {
				this->IsEnd := true
				
				break
			}
			
			Current := Current->Next()
		}
	}
}

i32 TAIL_SPACE_FOR_NEW_BLOCK := 0x20 + #HeapBlock

struct Heap {
	union {
		void* RawBackingMemory
		HeapBlock* FirstBlock
	}
	
	HeapBlock* FirstFreeBlock
	i32 Size
	
	define void Initialize(void* Memory, i32 Size) {
		FastSetMemory64(Memory, 0, Size / 8)
		
		this->RawBackingMemory := Memory
		
		HeapBlock* FirstBlock := this->FirstBlock
		
		FirstBlock->Size := Size
		FirstBlock->IsFree := true
		FirstBlock->IsEnd := true
		
		this->FirstFreeBlock := FirstBlock
		this->Size := Size
	}
	
	define HeapBlock* AllocateBlock(i64 Tag, i32 Size) {
		;Info("AllocateBlock(%x) {\n", Size)
		
		HeapBlock* Block := this->FirstFreeBlock
		
		loop {
			;Info("\tBlock %x { Size %x, Free? %i }\n", Block, Block->Size, Block->IsFree)
			
			if (Block->IsFree) {
				Block->MergeContigousFreeBlocks()
				
				i32 BlockSize := Block->Size
				
				if (BlockSize >= Size) {
					i32 TailSpace := BlockSize - Size
					
					;Info("\t\t{ TailSpace = %x }\n", TailSpace)
					
					if (TailSpace >= TAIL_SPACE_FOR_NEW_BLOCK) {
						Block->Size := Size
						
						HeapBlock* Tail := Block->Next()
						
						Tail->IsFree := true
						Tail->Size := TailSpace
						Tail->Tag := '__'
						
						if (Block->IsEnd) {
							Block->IsEnd := false
							Tail->IsEnd := true
						}
					}
					
					Block->IsFree := false
					Block->Tag := Tag
					
					;Info("}\n")
					
					return Block
				}
			}
			
			if (Block->IsEnd) {
				break
			}
			
			Block := Block->Next()
		}
		
		;Info("}\n")
		
		Throw('HEAP-OOM')
		
		return null
	}
	define void* Allocate(i64 Tag, i32 Size) {
		i8* Memory := this->AllocateBlock(Tag, Size + #HeapBlock)->Body()
		
		if (DEBUG_HEAP_ALLOC_FREE) {
			Info("Allocate(%l, %x) = %x\n", Tag, Size, Memory, GetRBP())
		}
		
		for (i32 Index := 0, Index < Size, Index += 1) {
			Memory[Index] := 0
		}
		
		return Memory
	}
	define void* Allocate(i32 Size) {
		return this->Allocate('++', Size)
	}
	
	define void FreeBlock(HeapBlock* Block) {
		Block->IsFree := true
		
		if (DEBUG_HEAP_ALLOC_FREE) {
			Info("Block { %x }\n", Block->Size, GetRBP())
		}
		
		if (Block < this->FirstFreeBlock) {
			this->FirstFreeBlock := Block
		}
	}
	define void Free(void* RawBlock) {
		if (DEBUG_HEAP_ALLOC_FREE) {
			Info("Free(%x) = ", RawBlock)
		}
		
		this->FreeBlock((RawBlock - #HeapBlock) As HeapBlock*)
	}
	
	define void* Extend(void* RawOldBlock, i32 NewSize) {
		HeapBlock* OldBlock := RawOldBlock - #HeapBlock
		
		i32 OldSize := OldBlock->Size
		i32 TrueNewSize := NewSize + #HeapBlock
		
		if (OldBlock->Size >= TrueNewSize) {
			return RawOldBlock
		}
		
		this->FreeBlock(OldBlock)
		
		HeapBlock* NewBlock := this->AllocateBlock(OldBlock->Tag, TrueNewSize)
		
		i8* NewBlockBody := NewBlock->Body()
		
		MoveMemory(NewBlockBody, RawOldBlock, OldSize)
		
		for (i32 Index := OldSize, Index < NewSize, Index += 1) {
			NewBlockBody[Index] := 0
		}
		
		return NewBlockBody
	}
	
	define void Print() {
		Print("Heap [%x owns %x] {\n", this, this->RawBackingMemory)
		
		i32 TotalSize := 0
		
		for (HeapBlock* Block := this->FirstBlock, Block != null, Block := Block->Next()) {
			TotalSize += Block->Size
			
			Print("    Block [%l] { Size %x, Free? %i, IsEnd? %i }\n", Block->Tag, Block->Size, Block->IsFree, Block->IsEnd)
			
			if (Block->IsEnd) {
				break
			}
		}
		
		Print("} %x bytes\n", TotalSize)
	}
}