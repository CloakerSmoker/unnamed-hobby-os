#Require "./src/utility/ELF.rlx"

struct ELFMemoryMapping {
	void* Virtual
	i64 Physical
	i64 PageCount
	ELFMemoryMapping* Next
}

define ELFMemoryMapping* MapELF(ELFHeader* Image, AddressSpaceManager* AddressSpace) {
	ELFMemoryMapping* First := null
	ELFMemoryMapping** LastNext := &First
	
	ELFProgramHeader* ProgramHeaders := Image->GetProgramHeaders()
	
	for (i32 Index := 0, Index < Image->ProgramHeaderEntryCount, Index++) {
		ELFProgramHeader* Next := ProgramHeaders[Index]
		
		if (Next->Type = ELF_SEGMENT_TYPE_LOAD) {
			void* SectionData := Image + Next->FileOffset
			void* SectionMemory := Next->VirtualAddress As void*
			void* SectionVirtualPage := SectionMemory & 0xFFFF_FFFF_FFFF_F000
			
			i32 SectionPageCount := (Next->MemorySize As i32) / PAGE_SIZE
			
			if (Next->MemorySize % PAGE_SIZE) {
				SectionPageCount += 1
			}
			
			i64 SectionPhysicalPages := PhysicalMemory->Reserve('ELF', SectionPageCount * PAGE_SIZE, PAGE_SIZE)
			
			Print("Allocated %i pages starting at %x for section %i of image\n", SectionPageCount, SectionPhysicalPages / PAGE_SIZE, Index)
			
			i64 Flags := PAGE_PRESENT | PAGE_USER
			
			if (Next->Flags & ELF_SECTION_FLAGS_WRITE) {
				Flags |= PAGE_WRITE
			}
			
			Print("Mapping virtual(%x) to physical(%x)\n", SectionMemory & 0xFFFF_FFFF_FFFF_F000, SectionPhysicalPages)
			
			KernelAddressSpace->MapRange(SectionVirtualPage, SectionPhysicalPages / PAGE_SIZE, SectionPageCount, Flags)
			
			ELFMemoryMapping* Mapping := KernelHeap->Allocate('ELFM', #ELFMemoryMapping)
			
			Mapping->Virtual := SectionVirtualPage
			Mapping->Physical := SectionPhysicalPages
			Mapping->PageCount := SectionPageCount
			
			*LastNext := Mapping
			LastNext := Mapping~>Next
			
			if (Next->MemorySize > Next->FileSize) {
				void* ZeroArea := SectionMemory + Next->FileSize
				i64 ZeroSize := Next->MemorySize - Next->FileSize
				
				FastSetMemory8(ZeroArea, 0, ZeroSize)
			}
			
			FastMoveMemory(SectionMemory, SectionData, Next->FileSize)
			
			Print("Wrote %x bytes to section memory\n\n", Next->MemorySize)
		}
	}
	
	return First
}

define void UnmapELF(ELFMemoryMapping* Next) {
	while (Next != null) {
		
		
	}
}