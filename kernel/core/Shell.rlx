
#Require "./src/utility/ScanCodes.rlx"
#Require "./src/drivers/ATA.rlx"
#Require "./src/kernel/core/ELFLoader.rlx"

define void Prompt() {
	Print("(>")
}

i8*[0x20] CommandParameters

define void OnCommand(i8* CommandLine) {
	i32 ParameterStart := 0
	i32 ParameterCount := 0
	
	for (i32 Index := 0, CommandLine[Index] != 0, Index += 1) {
		i8 NextCharacter := CommandLine[Index]
		
		if (NextCharacter = ' ') {
			CommandParameters[ParameterCount] := CommandLine + ParameterStart
			ParameterCount += 1

			CommandLine[Index] := 0
			
			while (CommandLine[Index + 1] = ' ') {
				Index += 1
			}
			
			ParameterStart := Index + 1
		}
	}
	
	CommandParameters[ParameterCount] := CommandLine + ParameterStart
	
	i8* Command := CommandParameters[0]
	i8** Parameters := CommandParameters + 8
	
	if (StringEquals(Command, "uptime")) {
		i64 MS := GetUptimeMS()
		i64 Seconds := MS / 1000
		i64 Minutes := Seconds / 60
		Seconds := Seconds % 60
		i64 Hours := Minutes / 60
		Minutes := Minutes % 60
		
		Print(" Uptime [ %ih %im %is | %ims ]\n Ticks [ %i ]\n", Hours, Minutes, Seconds, GetUptimeMS(), GetTickCount())
	}
	else if (StringEquals(Command, "crash")) {
		breakpoint:()
	}
	else if (StringEquals(Command, "ls")) {
		i32 NextEntryOffset := FS->StartWalkDirectory(RootINode)
		
		loop {
			DirectoryEntry* NextEntry := FS->WalkDirectoryNext(RootINode, &NextEntryOffset)
			
			if (NextEntry = null) {
				break
			}
			
			INode* NextNode := FS->ReadINode(NextEntry->INode)
			
			if (NextNode->IsDirectory()) {
				Print(" D ")
			}
			else {
				Print(" F ")
			}
			
			Print("%x 	%x 	%s\n", NextEntry->INode, NextNode->FileSizeLow, NextEntry~>Name)
		}
	}
	else if (StringEquals(Command, "cat")) {
		i8* Path := CommandParameters[1]
		
		DirectoryEntry* FoundFileEntry := FS->FindDirectoryEntryByPath(RootINode, Path)
		
		if (FoundFileEntry = null || !FoundFileEntry->IsFile()) {
			Print(" Could not find file '^%s'\n", Path)
		}
		else {
			INode FoundFileNode
			
			MoveMemory(&FoundFileNode, FS->ReadINode(FoundFileEntry->INode), #INode)
			
			i32 FileBlockCount := FoundFileNode.FileSizeLow / 1024
			
			if (FoundFileNode.FileSizeLow % 1024) {
				FileBlockCount += 1
			}
			
			for (i32 FileBlockIndex := 0, FileBlockIndex < FileBlockCount, FileBlockIndex += 1) {
				i32 FileDataBlock := FS->FindINodeDataBlock(&FoundFileNode, FileBlockIndex, false)
				Print("%s", FS->ReadBlock(FileDataBlock))
			}
			
			Print("\n Done, %i blocks printed\n", FileBlockCount)
		}
	}
	else if (StringEquals(Command, "reset_time")) {
		asm {cli}
		
		PITWhole := 0
		PITFraction := 0
		TickCount := 0
		
		asm {sti}
	}
	else if (StringEquals(Command, "clear")) {
		Print("%sc", ESC)
	}
	else if (StringEquals(Command, "colors")) {
		for (i8 Fore := 0, Fore < 16, Fore++) {
			for (i8 Back := 0, Back < 16, Back++) {
				SetColor(Fore, Back)
				Print("Test")
			}
			
			Print("^R\n")
		}
	}
	else if (StringEquals(Command, "color")) {
		Print(Parameters[0], ESC)
	}
	else if (StringEquals(Command, "scroll")) {
		if (ParameterCount = 1) {
			i64 LineOffset := AToI(Parameters[0], 10)
			
			Print("^E%iS", LineOffset)
		}
		else {
			Print("^ES")
		}
	}
	else if (StringEquals(Command, "peek")) {
		i64 TargetAddress := AToI(Parameters[0], 10)
		i64 AddressValue := *(TargetAddress As i64*)
		
		if (ParameterCount = 2 && StringLength(Parameters[1]) = 1) {
			i8 Size := Parameters[1][0]
			
			if (IsNumeric(Size, 8)) {
				if (Size = '1') {
					AddressValue := AddressValue & 0xFF
				}
				else if (Size = '2') {
					AddressValue := AddressValue & 0xFFFF
				}
				else if (Size = '4') {
					AddressValue := AddressValue & 0xFFFFFFFF
				}
				else if (Size = '8') {
					AddressValue := AddressValue
				}
				else {
					Print(" Unknown size '%c', must be 1/2/4/8\n", Size)
					return
				}
				
				Print(" *(%x As i%i*) = %x\n", TargetAddress, (Size - '0') * 8, AddressValue)
				
				Prompt()
				return
			}
		}
		
		Print(" *(%x) = %x\n", TargetAddress, AddressValue)
	}
	else if (StringEquals(Command, "phys")) {
		PhysicalMemory->Print()
	}
	else if (StringEquals(Command, "virt")) {
		KernelAddressSpace->Print()
	}
	else if (StringEquals(Command, "heap")) {
		KernelHeap->Print()
	}
	else if (StringEquals(Command, "exec")) {
		i8* Path := CommandParameters[1]
		
		DirectoryEntry* FoundFileEntry := FS->FindDirectoryEntryByPath(RootINode, Path)
		
		if (FoundFileEntry = null || !FoundFileEntry->IsFile()) {
			Print(" Could not find file '^%s'\n", Path)
		}
		else {
			INode FoundFileNode
			
			MoveMemory(&FoundFileNode, FS->ReadINode(FoundFileEntry->INode), #INode)
			
			i32 FileBlockCount := FoundFileNode.FileSizeLow / 1024
			
			if (FoundFileNode.FileSizeLow % 1024) {
				FileBlockCount += 1
			}
			
			void* FileData := KernelHeap->Allocate('EXEC', FileBlockCount * 1024)
			
			for (i32 FileBlockIndex := 0, FileBlockIndex < FileBlockCount, FileBlockIndex += 1) {
				i32 FileDataBlock := FS->FindINodeDataBlock(&FoundFileNode, FileBlockIndex, false)
				
				MoveMemory(FileData + (FileBlockIndex * 1024), FS->ReadBlock(FileDataBlock), 1024)
			}
			
			Print("Loaded %x byte image @ %x\n", FoundFileNode.FileSizeLow, FileData)
			
			ELFHeader* ELFData := FileData As ELFHeader*
			
			MapELF(ELFData, KernelAddressSpace)
			
			void* Stack := KernelHeap->Allocate(0x400)
			
			Stack += 0x300
			
			if (Stack & 0xF) {
				Stack += 0x10 - ((Stack As i64) & 0xF)
			}
			
			EnterUserMode(ELFData->EntryPoint As void*, Stack)
			
			Print("Returned from program\n")
			
			KernelHeap->Free(FileData)
			KernelHeap->Free(Stack)
		}
	}
	else if (StringEquals(Command, "ksyscall")) {
		i64 Value := AToI(CommandParameters[0], 16)
		
		syscall:(1, Value)
	}
	else {
		Print(" Unknown command '%s'\n", Command)
	}
	
	Prompt()
}

i8[0x200] CommandBuffer
i32 CommandBufferIndex

define void ShellOnKey(i16 ScanCode, i8 ASCIICode) {
	if (ScanCode = SCANCODE_ENTER_DOWN) {
		Print("\n")
		
		CommandBuffer[CommandBufferIndex] := 0
		OnCommand(CommandBuffer)
		CommandBufferIndex := 0
	}
	else if (ScanCode = SCANCODE_BACKSPACE_DOWN) {
		if (CommandBufferIndex > 0) {
			CommandBuffer[--CommandBufferIndex] := 0
			
			Print("%c", 0x7F)
		}
	}
	else {
		CommandBuffer[CommandBufferIndex++] := ASCIICode
		
		Print("%c", ASCIICode)
	}
}

define void SetupShell() {
	SetOnKeyCallback(&ShellOnKey)
}