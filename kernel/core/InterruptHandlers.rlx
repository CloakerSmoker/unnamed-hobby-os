; Int 0x27
define void OnSpuriousInterrupt() asm {
	call, @InterruptSetup
	jmp, @InterruptReturn
}

i64 PAGE_FAULT_PAGE_PRESENT      := 0b00001
i64 PAGE_FAULT_READ_WRITE        := 0b00010
i64 PAGE_FAULT_USER_SUPERVISOR   := 0b00100
i64 PAGE_FAULT_PAGE_RESERVED     := 0b01000
i64 PAGE_FAULT_INSTRUCTION_FETCH := 0b10000

define void PageFault(InterruptContext* Context) {
	i64 CR2 := GetCR2()
	i64 CR2Page := (CR2 >> 12) << 12
	
	if !(Context->ErrorCode & PAGE_FAULT_USER_SUPERVISOR) {
		; For a user-mode exception, don't switch print the spooky panic message
		
		Print("^E1000A^E1000D")
		Print("^F1")
	}

	Print("Page fault at %x while accessing %x {\n", Context->RIP, CR2) 
	
	
	Print("\tPage %x is present? ", CR2Page)
	
	if (Context->ErrorCode & PAGE_FAULT_PAGE_PRESENT) {
		Print("Yes\n")
	}
	else {
		Print("No\n")
	}
	
	
	Print("\tPage %x is reserved? ", CR2Page)
	
	if (Context->ErrorCode & PAGE_FAULT_PAGE_RESERVED) {
		Print("Yes\n")
	}
	else {
		Print("No\n")
	}
	
	
	Print("\tAddress %x was being? ", CR2)
	
	if (Context->ErrorCode & PAGE_FAULT_READ_WRITE) {
		Print("Written to\n")
	}
	else {
		Print("Read from\n")
	}
	
	
	Print("\tFrom code running in? ")
	
	if (Context->ErrorCode & PAGE_FAULT_USER_SUPERVISOR) {
		Print("User mode\n")
	}
	else {
		Print("Kernel mode\n")
	}
	
	Print("}\n\n^R")
	
	if (RECOVER_FROM_USER_PAGE_FAULT && (Context->ErrorCode & PAGE_FAULT_USER_SUPERVISOR)) {
		RestoreContext(&KernelContext)
	}
	
	GenericInterrupt(Context, 0xE)
}

define void OnPageFault() asm {
	call, @InterruptCodeSetup
	call, @PageFault
	jmp, @InterruptCodeReturn
}

define void AddKernelHandlers() {
	if (USE_PAGE_FAULT_HANDLER) {
		InsertIDTEntry(0xE, &OnPageFault, true)
	}
	
	InsertIDTEntry(0x27, &OnSpuriousInterrupt, true)
}
