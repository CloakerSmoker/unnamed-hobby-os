define void MemoryMove(i8* To, i8* From, i32 Size) {
	i32 Index := 0
	
	if (To < From) {
		for (Index := 0, Index < Size, Index += 1) {
			To[Index] := From[Index]
		}
	}
	else {
		for (Index := Size, Index != 0, Index += 1) {
			To[Index - 1] := From[Index - 1]
		}
	}
}
define void MemorySet8(i8* At, i8 Value, i32 Size) {
	for (i32 Index := 0, Index < Size, Index += 1) {
		At[Index] := Value
	}
}
define void MemorySet16(i16* At, i16 Value, i32 Size) {
	for (i32 Index := 0, Index < Size, Index += 1) {
		At[Index] := Value
	}
}
define void MemorySet64(i64* At, i64 Value, i32 Size) {
	for (i32 Index := 0, Index < Size, Index += 1) {
		At[Index] := Value
	}
}

define void MemoryReverse(i8* Buffer, i32 Length) {
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 Temp := Buffer[Index]
		Buffer[Index] := Buffer[Length - 1]
		Buffer[Length - 1] := Temp
		
		Length -= 1
	}
}

define i32 StringLength(i8* String) {
	for (i32 Length := 0, String[Length] != 0, Length += 1) {}
	
	return Length
}

i8* NumberBuffer := StaticAllocate:(96)

define i8 NumberToCharacter(i8 Number) {
	if (Number < 10) {
		return (Number + '0') As i8
	}
	else {
		return ((Number - 10) + 'a') As i8
	}
	
}

declare i8 GetCharacterValue(i8)

define i8* IToA(i64 Number, i64 Base) {
	MemorySet64(NumberBuffer, 0, 12)
	
	i8 Sign := 0
	
	if (Number < 0) {
		Sign := true
		
		if (Base = 10) {
			Number := -Number
		}
		else if (Base = 16) {
			Number := Number & 0x7FFFFFFFFFFFFFFF
		}
	}
	
	for (i32 Index := 0, Number != 0, Index += 1) {
		NumberBuffer[Index] := NumberToCharacter((Number % Base) As i8)
		Number := Number / Base
	}
	
	if (Index = 0) {
		NumberBuffer[0] := '0'
		Index := 1
	}
	
	if (Sign) {
		if (Base = 10) {
			NumberBuffer[Index] := '-'
		}
		else if (Base = 16) {
			i8 Last := GetCharacterValue(NumberBuffer[Index - 1])
			Last := Last | 0x8
			NumberBuffer[Index - 1] := NumberToCharacter(Last)
		}
	}
	
	if (Base = 16) {
		NumberBuffer[Index] := 'x'
		NumberBuffer[Index + 1] := '0'
		Index += 2
	}
	
	NumberBuffer[Index + 1] := 0
	
	MemoryReverse(NumberBuffer, Index)
	
	return NumberBuffer
}

define void Sleep(i32 MS) {
	i64 End := TickCount + (MS / 10)
	
	while (TickCount <= End) {}
}

define i8 IsAlpha(i8 Character) {
	if ('a' <= Character && Character <= 'z') {
		return true
	}
	else if ('A' <= Character && Character <= 'Z') {
		return true
	}

	return false
}

define i8 StringEquals(i8* Left, i8* Right) {
	i32 Index := 0
	
	loop {
		i8 LeftCharacter := Left[Index]
		i8 RightCharacter := Right[Index]
		
		if (LeftCharacter = 0 && RightCharacter = 0) {
			return true
		}
		else if (LeftCharacter != RightCharacter || LeftCharacter = 0 || RightCharacter = 0) {
			return false
		}
		
		Index += 1
	}
}
define i32 StartsWith(i8* Left, i8* Right) {
	i32 Index := 0
	
	loop {
		i8 LeftCharacter := Left[Index]
		i8 RightCharacter := Right[Index]
		
		if (RightCharacter = 0) {
			return Index
		}
		else if (LeftCharacter != RightCharacter || LeftCharacter = 0) {
			return false
		}
		
		Index += 1
	}
}

define i8 IsNumeric(i8 Character, i64 Base) {
	Base -= 1
	
	if (Base > 9) {
		if (Character >= 'a' && Character <= ('a' + Base)) {
			return true
		}
	}
	
	return (Character >= '0') && (Character <= ('0' + Base))
}
define i16 Lower(i16 Character) {
	if ('A' <= Character && Character <= 'Z') {
		Character += 32
	}
	
	return Character
}
define i8 GetCharacterValue(i8 Character) {
	Character := Lower(Character)
	
	if (Character >= 'a') {
		return ((Character - 'a') + 10) As i8
	}
	
	return (Character - '0') As i8
}

define i64 AToI(i8* AString) {
	i64 Result := 0
	i64 Negative := 0
	i64 Base := 10
	
	i16 FirstCharacter := AString[0]
	
	if (FirstCharacter = '0' && Lower(AString[1]) = 'x') {
		Base := 16
		AString += 2
	}
	else if (FirstCharacter = '-') {
		Negative := 1
		AString += 1
	}
	
	i32 Length := StringLength(AString)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 NextCharacter := Lower(AString[Index])
		
		if !(IsNumeric(NextCharacter, Base)) {
			Break
		}
		
		Result := Result * Base
		Result += GetCharacterValue(NextCharacter)
	}
	
	if (Negative) {
		Result := -Result
	}
	
	return Result
}
